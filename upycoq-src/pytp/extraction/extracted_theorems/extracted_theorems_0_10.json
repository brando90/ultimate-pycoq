[{"path": "/home/jizej/proverbot9001/coq-projects/StructTact/Subseq.v", "name": "subseq_NoDup", "text": "Theorem subseq_NoDup :\n    forall (ys xs : list A),\n      subseq xs ys ->\n      NoDup ys ->\n      NoDup xs.\n  Proof using.\n    induction ys; intros.\n    - destruct xs; simpl in *; intuition.\n    - simpl in *. invc_NoDup.\n      break_match.\n      + constructor.\n      + intuition.\n        subst. constructor; eauto using subseq_In.\n  Qed.\n", "definition": "\n    forall (ys xs : list A),\n      subseq xs ys ->\n      NoDup ys ->\n      NoDup xs.", "proof": "\n  Proof using.\n    induction ys; intros.\n    - destruct xs; simpl in *; intuition.\n    - simpl in *. invc_NoDup.\n      break_match.\n      + constructor.\n      + intuition.\n        subst. constructor; eauto using subseq_In.\n  ", "def_ranges": [49, 0, 53, 15], "proof_ranges": [54, 0, 62, 6], "proof_steps": [{"text": "Proof using.", "goal_before": ["forall ys xs : list A, subseq xs ys -> NoDup ys -> NoDup xs"], "goal_after": ["forall ys xs : list A, subseq xs ys -> NoDup ys -> NoDup xs"], "proof_term_before": [], "proof_term_after": ["?Goal"]}, {"text": "induction ys; intros.", "goal_before": ["forall ys xs : list A, subseq xs ys -> NoDup ys -> NoDup xs"], "goal_after": ["NoDup xs", "NoDup xs"], "proof_term_before": ["?Goal"], "proof_term_after": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) => ?Goal)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    ?Goal0@{ys:=ys0}) ys)"]}, {"text": "destruct xs; simpl in *; intuition.", "goal_before": ["NoDup xs", "NoDup xs"], "goal_after": ["NoDup xs"], "proof_term_before": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) => ?Goal)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    ?Goal0@{ys:=ys0}) ys)"], "proof_term_after": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    ?Goal@{ys:=ys0}) ys)"]}, {"text": "simpl in *.", "goal_before": ["NoDup xs"], "goal_after": ["NoDup xs"], "proof_term_before": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    ?Goal@{ys:=ys0}) ys)"], "proof_term_after": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    ?Goal@{ys:=ys0} : NoDup xs) ys)"]}, {"text": "invc_NoDup.", "goal_before": ["NoDup xs"], "goal_after": ["NoDup xs"], "proof_term_before": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    ?Goal@{ys:=ys0} : NoDup xs) ys)"], "proof_term_after": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    ?Goal@{ys:=ys0} : NoDup xs) ys)"]}, {"text": "break_match.", "goal_before": ["NoDup xs"], "goal_after": ["NoDup []", "NoDup (a0 :: l)"], "proof_term_before": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    ?Goal@{ys:=ys0} : NoDup xs) ys)"], "proof_term_after": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    (let l := xs in\n     let Heql : xs = l := eq_refl in\n     match\n       l as l0\n       return\n         (xs = l0 ->\n          match l0 with\n          | [] => True\n          | x :: xs' => x = a /\\ subseq xs' ys0 \\/ subseq l0 ys0\n          end -> NoDup l0)\n     with\n     | [] =>\n         fun (Heql0 : xs = []) (H1 : True) =>\n         ?Goal@{ys:=ys0; Heql:=Heql0; H:=H1}\n     | a0 :: l0 =>\n         (fun (a1 : A) (l1 : list A) (Heql0 : xs = a1 :: l1)\n            (H1 : a1 = a /\\ subseq l1 ys0 \\/ subseq (a1 :: l1) ys0) =>\n          ?Goal0@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H:=H1}) a0 l0\n     end Heql H)\n    :\n    NoDup xs) ys)"]}, {"text": "constructor.", "goal_before": ["NoDup []", "NoDup (a0 :: l)"], "goal_after": ["NoDup (a0 :: l)"], "proof_term_before": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    (let l := xs in\n     let Heql : xs = l := eq_refl in\n     match\n       l as l0\n       return\n         (xs = l0 ->\n          match l0 with\n          | [] => True\n          | x :: xs' => x = a /\\ subseq xs' ys0 \\/ subseq l0 ys0\n          end -> NoDup l0)\n     with\n     | [] =>\n         fun (Heql0 : xs = []) (H1 : True) =>\n         ?Goal@{ys:=ys0; Heql:=Heql0; H:=H1}\n     | a0 :: l0 =>\n         (fun (a1 : A) (l1 : list A) (Heql0 : xs = a1 :: l1)\n            (H1 : a1 = a /\\ subseq l1 ys0 \\/ subseq (a1 :: l1) ys0) =>\n          ?Goal0@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H:=H1}) a0 l0\n     end Heql H)\n    :\n    NoDup xs) ys)"], "proof_term_after": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    (let l := xs in\n     let Heql : xs = l := eq_refl in\n     match\n       l as l0\n       return\n         (xs = l0 ->\n          match l0 with\n          | [] => True\n          | x :: xs' => x = a /\\ subseq xs' ys0 \\/ subseq l0 ys0\n          end -> NoDup l0)\n     with\n     | [] => fun (_ : xs = []) (_ : True) => NoDup_nil A\n     | a0 :: l0 =>\n         (fun (a1 : A) (l1 : list A) (Heql0 : xs = a1 :: l1)\n            (H1 : a1 = a /\\ subseq l1 ys0 \\/ subseq (a1 :: l1) ys0) =>\n          ?Goal@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H:=H1}) a0 l0\n     end Heql H)\n    :\n    NoDup xs) ys)"]}, {"text": "intuition.", "goal_before": ["NoDup (a0 :: l)"], "goal_after": ["NoDup (a0 :: l)", "NoDup (a0 :: l)"], "proof_term_before": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    (let l := xs in\n     let Heql : xs = l := eq_refl in\n     match\n       l as l0\n       return\n         (xs = l0 ->\n          match l0 with\n          | [] => True\n          | x :: xs' => x = a /\\ subseq xs' ys0 \\/ subseq l0 ys0\n          end -> NoDup l0)\n     with\n     | [] => fun (_ : xs = []) (_ : True) => NoDup_nil A\n     | a0 :: l0 =>\n         (fun (a1 : A) (l1 : list A) (Heql0 : xs = a1 :: l1)\n            (H1 : a1 = a /\\ subseq l1 ys0 \\/ subseq (a1 :: l1) ys0) =>\n          ?Goal@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H:=H1}) a0 l0\n     end Heql H)\n    :\n    NoDup xs) ys)"], "proof_term_after": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    (let l := xs in\n     let Heql : xs = l := eq_refl in\n     match\n       l as l0\n       return\n         (xs = l0 ->\n          match l0 with\n          | [] => True\n          | x :: xs' => x = a /\\ subseq xs' ys0 \\/ subseq l0 ys0\n          end -> NoDup l0)\n     with\n     | [] => fun (_ : xs = []) (_ : True) => NoDup_nil A\n     | a0 :: l0 =>\n         (fun (a1 : A) (l1 : list A) (Heql0 : xs = a1 :: l1)\n            (H1 : a1 = a /\\ subseq l1 ys0 \\/ subseq (a1 :: l1) ys0) =>\n          or_ind\n            (fun H2 : a1 = a /\\ subseq l1 ys0 =>\n             and_ind\n               (fun (H3 : a1 = a) (H4 : subseq l1 ys0) =>\n                ?Goal@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H:=H3; H2:=H4}\n                :\n                NoDup (a1 :: l1)) H2)\n            (fun H2 : subseq (a1 :: l1) ys0 =>\n             ?Goal0@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H1:=H2}\n             :\n             NoDup (a1 :: l1)) H1) a0 l0\n     end Heql H)\n    :\n    NoDup xs) ys)"]}, {"text": "subst.", "goal_before": ["NoDup (a0 :: l)", "NoDup (a0 :: l)"], "goal_after": ["NoDup (a :: l)", "NoDup (a0 :: l)"], "proof_term_before": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    (let l := xs in\n     let Heql : xs = l := eq_refl in\n     match\n       l as l0\n       return\n         (xs = l0 ->\n          match l0 with\n          | [] => True\n          | x :: xs' => x = a /\\ subseq xs' ys0 \\/ subseq l0 ys0\n          end -> NoDup l0)\n     with\n     | [] => fun (_ : xs = []) (_ : True) => NoDup_nil A\n     | a0 :: l0 =>\n         (fun (a1 : A) (l1 : list A) (Heql0 : xs = a1 :: l1)\n            (H1 : a1 = a /\\ subseq l1 ys0 \\/ subseq (a1 :: l1) ys0) =>\n          or_ind\n            (fun H2 : a1 = a /\\ subseq l1 ys0 =>\n             and_ind\n               (fun (H3 : a1 = a) (H4 : subseq l1 ys0) =>\n                ?Goal@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H:=H3; H2:=H4}\n                :\n                NoDup (a1 :: l1)) H2)\n            (fun H2 : subseq (a1 :: l1) ys0 =>\n             ?Goal0@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H1:=H2}\n             :\n             NoDup (a1 :: l1)) H1) a0 l0\n     end Heql H)\n    :\n    NoDup xs) ys)"], "proof_term_after": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    (let l := xs in\n     let Heql : xs = l := eq_refl in\n     match\n       l as l0\n       return\n         (xs = l0 ->\n          match l0 with\n          | [] => True\n          | x :: xs' => x = a /\\ subseq xs' ys0 \\/ subseq l0 ys0\n          end -> NoDup l0)\n     with\n     | [] => fun (_ : xs = []) (_ : True) => NoDup_nil A\n     | a0 :: l0 =>\n         (fun (a1 : A) (l1 : list A) (Heql0 : xs = a1 :: l1)\n            (H1 : a1 = a /\\ subseq l1 ys0 \\/ subseq (a1 :: l1) ys0) =>\n          or_ind\n            (fun H2 : a1 = a /\\ subseq l1 ys0 =>\n             and_ind\n               (fun (H3 : a1 = a) (H4 : subseq l1 ys0) =>\n                eq_ind_r (fun a2 : A => NoDup (a2 :: l1))\n                  ?Goal0@{ys:=ys0; l:=l1; H2:=H4} H3\n                :\n                NoDup (a1 :: l1)) H2)\n            (fun H2 : subseq (a1 :: l1) ys0 =>\n             ?Goal@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H1:=H2}\n             :\n             NoDup (a1 :: l1)) H1) a0 l0\n     end Heql H)\n    :\n    NoDup xs) ys)"]}, {"text": "constructor; eauto using subseq_In.", "goal_before": ["NoDup (a :: l)", "NoDup (a0 :: l)"], "goal_after": ["~ In a l", "NoDup l", "NoDup (a0 :: l)"], "proof_term_before": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    (let l := xs in\n     let Heql : xs = l := eq_refl in\n     match\n       l as l0\n       return\n         (xs = l0 ->\n          match l0 with\n          | [] => True\n          | x :: xs' => x = a /\\ subseq xs' ys0 \\/ subseq l0 ys0\n          end -> NoDup l0)\n     with\n     | [] => fun (_ : xs = []) (_ : True) => NoDup_nil A\n     | a0 :: l0 =>\n         (fun (a1 : A) (l1 : list A) (Heql0 : xs = a1 :: l1)\n            (H1 : a1 = a /\\ subseq l1 ys0 \\/ subseq (a1 :: l1) ys0) =>\n          or_ind\n            (fun H2 : a1 = a /\\ subseq l1 ys0 =>\n             and_ind\n               (fun (H3 : a1 = a) (H4 : subseq l1 ys0) =>\n                eq_ind_r (fun a2 : A => NoDup (a2 :: l1))\n                  ?Goal0@{ys:=ys0; l:=l1; H2:=H4} H3\n                :\n                NoDup (a1 :: l1)) H2)\n            (fun H2 : subseq (a1 :: l1) ys0 =>\n             ?Goal@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H1:=H2}\n             :\n             NoDup (a1 :: l1)) H1) a0 l0\n     end Heql H)\n    :\n    NoDup xs) ys)"], "proof_term_after": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    (let l := xs in\n     let Heql : xs = l := eq_refl in\n     match\n       l as l0\n       return\n         (xs = l0 ->\n          match l0 with\n          | [] => True\n          | x :: xs' => x = a /\\ subseq xs' ys0 \\/ subseq l0 ys0\n          end -> NoDup l0)\n     with\n     | [] => fun (_ : xs = []) (_ : True) => NoDup_nil A\n     | a0 :: l0 =>\n         (fun (a1 : A) (l1 : list A) (Heql0 : xs = a1 :: l1)\n            (H1 : a1 = a /\\ subseq l1 ys0 \\/ subseq (a1 :: l1) ys0) =>\n          or_ind\n            (fun H2 : a1 = a /\\ subseq l1 ys0 =>\n             and_ind\n               (fun (H3 : a1 = a) (H4 : subseq l1 ys0) =>\n                eq_ind_r (fun a2 : A => NoDup (a2 :: l1))\n                  (NoDup_cons a ?Goal0@{ys:=ys0; l:=l1; H2:=H4}\n                     ?Goal1@{ys:=ys0; l:=l1; H2:=H4}) H3\n                :\n                NoDup (a1 :: l1)) H2)\n            (fun H2 : subseq (a1 :: l1) ys0 =>\n             ?Goal@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H1:=H2}\n             :\n             NoDup (a1 :: l1)) H1) a0 l0\n     end Heql H)\n    :\n    NoDup xs) ys)"]}, {"text": "Qed.", "goal_before": ["~ In a l", "NoDup l", "NoDup (a0 :: l)"], "goal_after": [], "proof_term_before": ["(fun ys : list A =>\n list_ind\n   (fun ys0 : list A =>\n    forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n   (fun (xs : list A) (H : subseq xs []) (H0 : NoDup []) =>\n    match xs as l return (subseq l [] -> NoDup l) with\n    | [] => fun _ : subseq [] [] => H0 : NoDup []\n    | a :: l =>\n        (fun (a0 : A) (xs0 : list A) (H1 : subseq (a0 :: xs0) []) =>\n         False_ind (NoDup (a0 :: xs0)) H1 : NoDup (a0 :: xs0)) a l\n    end H)\n   (fun (a : A) (ys0 : list A)\n      (IHys : forall xs : list A, subseq xs ys0 -> NoDup ys0 -> NoDup xs)\n      (xs : list A) (H : subseq xs (a :: ys0)) (H0 : NoDup (a :: ys0)) =>\n    (let l := xs in\n     let Heql : xs = l := eq_refl in\n     match\n       l as l0\n       return\n         (xs = l0 ->\n          match l0 with\n          | [] => True\n          | x :: xs' => x = a /\\ subseq xs' ys0 \\/ subseq l0 ys0\n          end -> NoDup l0)\n     with\n     | [] => fun (_ : xs = []) (_ : True) => NoDup_nil A\n     | a0 :: l0 =>\n         (fun (a1 : A) (l1 : list A) (Heql0 : xs = a1 :: l1)\n            (H1 : a1 = a /\\ subseq l1 ys0 \\/ subseq (a1 :: l1) ys0) =>\n          or_ind\n            (fun H2 : a1 = a /\\ subseq l1 ys0 =>\n             and_ind\n               (fun (H3 : a1 = a) (H4 : subseq l1 ys0) =>\n                eq_ind_r (fun a2 : A => NoDup (a2 :: l1))\n                  (NoDup_cons a ?Goal0@{ys:=ys0; l:=l1; H2:=H4}\n                     ?Goal1@{ys:=ys0; l:=l1; H2:=H4}) H3\n                :\n                NoDup (a1 :: l1)) H2)\n            (fun H2 : subseq (a1 :: l1) ys0 =>\n             ?Goal@{ys:=ys0; a0:=a1; l:=l1; Heql:=Heql0; H1:=H2}\n             :\n             NoDup (a1 :: l1)) H1) a0 l0\n     end Heql H)\n    :\n    NoDup xs) ys)"], "proof_term_after": []}], "ends_qed": true}, {"path": "/home/jizej/proverbot9001/coq-projects/StructTact/StringOrders.v", "name": "lex_lt_trans", "text": "Theorem lex_lt_trans : forall s0 s1 s2,\n    lex_lt s0 s1 -> lex_lt s1 s2 -> lex_lt s0 s2.\nProof.\ninduction s0.\n- intros.  \n  inversion H; subst.\n  inversion H0; subst.\n  * apply lex_lt_empty.\n  * apply lex_lt_empty.\n- intros.\n  inversion H; subst; inversion H0; subst.\n  * apply lex_lt_lt.\n    eauto with arith.\n  * apply lex_lt_lt.\n    assumption.\n  * apply lex_lt_lt.\n    assumption.\n  * apply lex_lt_eq.\n    eapply IHs0; eauto.\nQed.\n", "definition": " forall s0 s1 s2,\n    lex_lt s0 s1 -> lex_lt s1 s2 -> lex_lt s0 s2.\n", "proof": "\ninduction s0.\n- intros.  \n  inversion H; subst.\n  inversion H0; subst.\n  * apply lex_lt_empty.\n  * apply lex_lt_empty.\n- intros.\n  inversion H; subst; inversion H0; subst.\n  * apply lex_lt_lt.\n    eauto with arith.\n  * apply lex_lt_lt.\n    assumption.\n  * apply lex_lt_lt.\n    assumption.\n  * apply lex_lt_eq.\n    eapply IHs0; eauto.\n", "def_ranges": [84, 0, 85, 49], "proof_ranges": [86, 0, 103, 4], "proof_steps": [{"text": "induction s0.", "goal_before": ["forall s0 s1 s2 : string, lex_lt s0 s1 -> lex_lt s1 s2 -> lex_lt s0 s2"], "goal_after": ["forall s1 s2 : string, lex_lt \"\" s1 -> lex_lt s1 s2 -> lex_lt \"\" s2", "forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "proof_term_before": [], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   ?Goal\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) =>\n    ?Goal0@{s0:=s1}) s0)"]}, {"text": "intros.", "goal_before": ["forall s1 s2 : string, lex_lt \"\" s1 -> lex_lt s1 s2 -> lex_lt \"\" s2", "forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "goal_after": ["lex_lt \"\" s2", "forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   ?Goal\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) =>\n    ?Goal0@{s0:=s1}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) => ?Goal0)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) => \n    ?Goal@{s0:=s1}) s0)"]}, {"text": "inversion H; subst.", "goal_before": ["lex_lt \"\" s2", "forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "goal_after": ["lex_lt \"\" s2", "forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) => ?Goal0)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) => \n    ?Goal@{s0:=s1}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (H6 : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  ?Goal0@{c:=c0; s:=s3; H0:=H7; H:=H6}) s1 H4 H H0) s1 H5) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) => \n    ?Goal@{s0:=s1}) s0)"]}, {"text": "inversion H0; subst.", "goal_before": ["lex_lt \"\" s2", "forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "goal_after": ["lex_lt \"\" (String c2 s0)", "lex_lt \"\" (String c s0)", "forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (H6 : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  ?Goal0@{c:=c0; s:=s3; H0:=H7; H:=H6}) s1 H4 H H0) s1 H5) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) => \n    ?Goal@{s0:=s1}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (H6 : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       H20 : nat_of_ascii c0 <\n                                             nat_of_ascii c4 =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          H21 : lex_lt \n                                                 (String c0 s3)\n                                                 (String c4 s7) =>\n                                        ?Goal0@{c:=c0; s:=s3; c2:=c4; s0:=s7;\n                                                H0:=H21; H:=H6; H4:=H20}) s2\n                                       H18 H7) s2 H19) H17) H15) H13) H12) H9\n                           H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun H20 : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          H21 : lex_lt \n                                                 (String c0 s3)\n                                                 (String c0 s7) =>\n                                        ?Goal1@{c:=c0; s:=s3; s0:=s7;\n                                                H0:=H21; H:=H6; H4:=H20}) s2\n                                       H18 H7) s2 H19) H17) H15) H13) H12) H9\n                           H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) => \n    ?Goal@{s0:=s1}) s0)"]}, {"text": "apply lex_lt_empty.", "goal_before": ["lex_lt \"\" (String c2 s0)", "lex_lt \"\" (String c s0)", "forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "goal_after": ["lex_lt \"\" (String c s0)", "forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (H6 : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       H20 : nat_of_ascii c0 <\n                                             nat_of_ascii c4 =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          H21 : lex_lt \n                                                 (String c0 s3)\n                                                 (String c4 s7) =>\n                                        ?Goal0@{c:=c0; s:=s3; c2:=c4; s0:=s7;\n                                                H0:=H21; H:=H6; H4:=H20}) s2\n                                       H18 H7) s2 H19) H17) H15) H13) H12) H9\n                           H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun H20 : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          H21 : lex_lt \n                                                 (String c0 s3)\n                                                 (String c0 s7) =>\n                                        ?Goal1@{c:=c0; s:=s3; s0:=s7;\n                                                H0:=H21; H:=H6; H4:=H20}) s2\n                                       H18 H7) s2 H19) H17) H15) H13) H12) H9\n                           H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) => \n    ?Goal@{s0:=s1}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (H6 : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun H20 : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          H21 : lex_lt \n                                                 (String c0 s3)\n                                                 (String c0 s7) =>\n                                        ?Goal0@{c:=c0; s:=s3; s0:=s7;\n                                                H0:=H21; H:=H6; H4:=H20}) s2\n                                       H18 H7) s2 H19) H17) H15) H13) H12) H9\n                           H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) => \n    ?Goal@{s0:=s1}) s0)"]}, {"text": "apply lex_lt_empty.", "goal_before": ["lex_lt \"\" (String c s0)", "forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "goal_after": ["forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (H6 : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun H20 : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          H21 : lex_lt \n                                                 (String c0 s3)\n                                                 (String c0 s7) =>\n                                        ?Goal0@{c:=c0; s:=s3; s0:=s7;\n                                                H0:=H21; H:=H6; H4:=H20}) s2\n                                       H18 H7) s2 H19) H17) H15) H13) H12) H9\n                           H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) => \n    ?Goal@{s0:=s1}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) => \n    ?Goal@{s0:=s1}) s0)"]}, {"text": "intros.", "goal_before": ["forall s1 s2 : string,\nlex_lt (String a s0) s1 -> lex_lt s1 s2 -> lex_lt (String a s0) s2"], "goal_after": ["lex_lt (String a s0) s2"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) => \n    ?Goal@{s0:=s1}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) => ?Goal@{s0:=s1; s1:=s2; s2:=s3}) s0)"]}, {"text": "inversion H; subst; inversion H0; subst.", "goal_before": ["lex_lt (String a s0) s2"], "goal_after": ["lex_lt (String a s0) (String c0 s3)", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String a s3)"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) => ?Goal@{s0:=s1; s1:=s2; s2:=s3}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                ?Goal@{\n                                                s0:=s1; c2:=c4; s4:=s7;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                ?Goal0@{\n                                                s0:=s1; c2:=c4; s4:=s7;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                ?Goal1@{\n                                                s0:=s1; s4:=s7; c2:=c4;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal2@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"]}, {"text": "apply lex_lt_lt.", "goal_before": ["lex_lt (String a s0) (String c0 s3)", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String a s3)"], "goal_after": ["nat_of_ascii a < nat_of_ascii c0", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String a s3)"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                ?Goal@{\n                                                s0:=s1; c2:=c4; s4:=s7;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                ?Goal0@{\n                                                s0:=s1; c2:=c4; s4:=s7;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                ?Goal1@{\n                                                s0:=s1; s4:=s7; c2:=c4;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal2@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 ?Goal2@{\n                                                 s0:=s1; c2:=c4; s4:=s7;\n                                                 s3:=s11; H0:=H29; H:=H14;\n                                                 H4:=H13; H5:=H28}) s3 H26\n                                               H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                ?Goal@{\n                                                s0:=s1; c2:=c4; s4:=s7;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                ?Goal0@{\n                                                s0:=s1; s4:=s7; c2:=c4;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal1@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"]}, {"text": "eauto with arith.", "goal_before": ["nat_of_ascii a < nat_of_ascii c0", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String a s3)"], "goal_after": ["lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String a s3)"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 ?Goal2@{\n                                                 s0:=s1; c2:=c4; s4:=s7;\n                                                 s3:=s11; H0:=H29; H:=H14;\n                                                 H4:=H13; H5:=H28}) s3 H26\n                                               H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                ?Goal@{\n                                                s0:=s1; c2:=c4; s4:=s7;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                ?Goal0@{\n                                                s0:=s1; s4:=s7; c2:=c4;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal1@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                ?Goal@{\n                                                s0:=s1; c2:=c4; s4:=s7;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                ?Goal0@{\n                                                s0:=s1; s4:=s7; c2:=c4;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal1@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"]}, {"text": "apply lex_lt_lt.", "goal_before": ["lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String a s3)"], "goal_after": ["nat_of_ascii a < nat_of_ascii c2", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String a s3)"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                ?Goal@{\n                                                s0:=s1; c2:=c4; s4:=s7;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                ?Goal0@{\n                                                s0:=s1; s4:=s7; c2:=c4;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal1@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11\n                                                 ?Goal1@{\n                                                 s0:=s1; c2:=c4; s4:=s7;\n                                                 s3:=s11; H0:=H29; H:=H14;\n                                                 H4:=H13; H5:=H28}) s3 H26\n                                               H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                ?Goal@{\n                                                s0:=s1; s4:=s7; c2:=c4;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal0@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"]}, {"text": "assumption.", "goal_before": ["nat_of_ascii a < nat_of_ascii c2", "lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String a s3)"], "goal_after": ["lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String a s3)"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11\n                                                 ?Goal1@{\n                                                 s0:=s1; c2:=c4; s4:=s7;\n                                                 s3:=s11; H0:=H29; H:=H14;\n                                                 H4:=H13; H5:=H28}) s3 H26\n                                               H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                ?Goal@{\n                                                s0:=s1; s4:=s7; c2:=c4;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal0@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun _ : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H13) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                ?Goal@{\n                                                s0:=s1; s4:=s7; c2:=c4;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal0@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"]}, {"text": "apply lex_lt_lt.", "goal_before": ["lex_lt (String a s0) (String c2 s3)", "lex_lt (String a s0) (String a s3)"], "goal_after": ["nat_of_ascii a < nat_of_ascii c2", "lex_lt (String a s0) (String a s3)"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun _ : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H13) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                ?Goal@{\n                                                s0:=s1; s4:=s7; c2:=c4;\n                                                s3:=s11; H0:=H29; H:=H14;\n                                                H4:=H13; H5:=H28}) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal0@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun _ : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H13) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11\n                                                 ?Goal0@{\n                                                 s0:=s1; s4:=s7; c2:=c4;\n                                                 s3:=s11; H0:=H29; H:=H14;\n                                                 H4:=H13; H5:=H28}) s3 H26\n                                               H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"]}, {"text": "assumption.", "goal_before": ["nat_of_ascii a < nat_of_ascii c2", "lex_lt (String a s0) (String a s3)"], "goal_after": ["lex_lt (String a s0) (String a s3)"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun _ : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H13) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11\n                                                 ?Goal0@{\n                                                 s0:=s1; s4:=s7; c2:=c4;\n                                                 s3:=s11; H0:=H29; H:=H14;\n                                                 H4:=H13; H5:=H28}) s3 H26\n                                               H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun _ : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H13) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H28) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"]}, {"text": "apply lex_lt_eq.", "goal_before": ["lex_lt (String a s0) (String a s3)"], "goal_after": ["lex_lt s0 s3"], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun _ : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H13) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H28) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                ?Goal@{\n                                                s0:=s1; s4:=s7; s3:=s11;\n                                                H0:=H29; H:=H14; H4:=H13;\n                                                H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun _ : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H13) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H28) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                lex_lt_eq a s1 s11\n                                                 ?Goal@{\n                                                 s0:=s1; s4:=s7; s3:=s11;\n                                                 H0:=H29; H:=H14; H4:=H13;\n                                                 H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"]}, {"text": "eapply IHs0; eauto.", "goal_before": ["lex_lt s0 s3"], "goal_after": [], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun _ : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H13) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (H14 : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H28) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 H29 : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                lex_lt_eq a s1 s11\n                                                 ?Goal@{\n                                                 s0:=s1; s4:=s7; s3:=s11;\n                                                 H0:=H29; H:=H14; H4:=H13;\n                                                 H5:=H28}) s3 H26 H15) s3 H27)\n                                         H25) H23) H21) H20) H17 H18 H16) c1\n                                  s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun _ : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H13) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H28) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                lex_lt_eq a s1 s11\n                                                 (IHs0 s7 s11 H13 H28)) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c1 s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun s0 : string =>\n string_ind\n   (fun s1 : string =>\n    forall s2 s3 : string, lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3)\n   (fun (s1 s2 : string) (H : lex_lt \"\" s1) (H0 : lex_lt s1 s2) =>\n    let H1 : \"\"%string = \"\"%string -> s1 = s1 -> lex_lt \"\" s2 :=\n      match\n        H in (lex_lt s s3) return (s = \"\"%string -> s3 = s1 -> lex_lt \"\" s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s5 = \"\"%string) (H3 : String c4 s6 = s1) =>\n           (fun H4 : String c3 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c3 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind\n              (String c4 s6 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> lex_lt \"\" s2) H5) H2 H3\n             H1) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H1 : lex_lt s5 s6)\n             (H2 : String c0 s5 = \"\"%string) (H3 : String c0 s6 = s1) =>\n           (fun H4 : String c0 s5 = \"\"%string =>\n            let H5 : False :=\n              eq_ind (String c0 s5)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H4 in\n            False_ind (String c0 s6 = s1 -> lex_lt s5 s6 -> lex_lt \"\" s2) H5)\n             H2 H3 H1) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H1 : \"\"%string = \"\"%string)\n             (H2 : String c0 s3 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H4 : String c0 s3 = s1) =>\n            let H5 : String c0 s3 = s1 := H4 in\n            eq_ind (String c0 s3) (fun _ : string => lex_lt \"\" s2)\n              (eq_ind (String c0 s3)\n                 (fun s4 : string =>\n                  lex_lt \"\" s4 -> lex_lt s4 s2 -> lex_lt \"\" s2)\n                 (fun (_ : lex_lt \"\" (String c0 s3))\n                    (H7 : lex_lt (String c0 s3) s2) =>\n                  let H8 :\n                    String c0 s3 = String c0 s3 -> s2 = s2 -> lex_lt \"\" s2 :=\n                    match\n                      H7 in (lex_lt s4 s5)\n                      return (s4 = String c0 s3 -> s5 = s2 -> lex_lt \"\" s2)\n                    with\n                    | lex_lt_lt c1 c2 s4 s5 x =>\n                        (fun (c3 c4 : ascii) (s6 s7 : string)\n                           (H8 : nat_of_ascii c3 < nat_of_ascii c4)\n                           (H9 : String c3 s6 = String c0 s3)\n                           (H10 : String c4 s7 = s2) =>\n                         (fun H11 : String c3 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c3 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c3\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c3 = c0 =>\n                            let H15 : c3 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String c4 s7 = s2 ->\n                               nat_of_ascii a < nat_of_ascii c4 ->\n                               lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun _ : string =>\n                                  String c4 s7 = s2 ->\n                                  nat_of_ascii c0 < nat_of_ascii c4 ->\n                                  lex_lt \"\" s2)\n                                 (fun H18 : String c4 s7 = s2 =>\n                                  let H19 : String c4 s7 = s2 := H18 in\n                                  eq_ind (String c4 s7)\n                                    (fun s8 : string =>\n                                     nat_of_ascii c0 < nat_of_ascii c4 ->\n                                     lex_lt \"\" s8)\n                                    (fun\n                                       _ : nat_of_ascii c0 < nat_of_ascii c4\n                                     =>\n                                     eq_ind (String c4 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c4 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c4 s7) =>\n                                        lex_lt_empty c4 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 c2 s4 s5 x\n                    | lex_lt_eq c1 s4 s5 x =>\n                        (fun (c2 : ascii) (s6 s7 : string)\n                           (H8 : lex_lt s6 s7)\n                           (H9 : String c2 s6 = String c0 s3)\n                           (H10 : String c2 s7 = s2) =>\n                         (fun H11 : String c2 s6 = String c0 s3 =>\n                          let H12 : s6 = s3 :=\n                            f_equal\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => s6\n                               | String _ s8 => s8\n                               end) H11 in\n                          (let H13 : c2 = c0 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => c2\n                                | String a _ => a\n                                end) H11 in\n                           (fun H14 : c2 = c0 =>\n                            let H15 : c2 = c0 := H14 in\n                            eq_ind_r\n                              (fun a : ascii =>\n                               s6 = s3 ->\n                               String a s7 = s2 ->\n                               lex_lt s6 s7 -> lex_lt \"\" s2)\n                              (fun H16 : s6 = s3 =>\n                               let H17 : s6 = s3 := H16 in\n                               eq_ind_r\n                                 (fun s8 : string =>\n                                  String c0 s7 = s2 ->\n                                  lex_lt s8 s7 -> lex_lt \"\" s2)\n                                 (fun H18 : String c0 s7 = s2 =>\n                                  let H19 : String c0 s7 = s2 := H18 in\n                                  eq_ind (String c0 s7)\n                                    (fun s8 : string =>\n                                     lex_lt s3 s7 -> lex_lt \"\" s8)\n                                    (fun _ : lex_lt s3 s7 =>\n                                     eq_ind (String c0 s7)\n                                       (fun s8 : string =>\n                                        lex_lt (String c0 s3) s8 ->\n                                        lex_lt \"\" (String c0 s7))\n                                       (fun\n                                          _ : lex_lt \n                                                (String c0 s3) \n                                                (String c0 s7) =>\n                                        lex_lt_empty c0 s7) s2 H18 H7) s2 H19)\n                                 H17) H15) H13) H12) H9 H10 H8) c1 s4 s5 x\n                    | lex_lt_empty c1 s4 =>\n                        (fun (c2 : ascii) (s5 : string)\n                           (H8 : \"\"%string = String c0 s3)\n                           (H9 : String c2 s5 = s2) =>\n                         (fun H10 : \"\"%string = String c0 s3 =>\n                          let H11 : False :=\n                            eq_ind \"\"%string\n                              (fun e : string =>\n                               match e with\n                               | \"\"%string => True\n                               | String _ _ => False\n                               end) I (String c0 s3) H10 in\n                          False_ind (String c2 s5 = s2 -> lex_lt \"\" s2) H11)\n                           H8 H9) c1 s4\n                    end in\n                  H8 eq_refl eq_refl) s1 H4 H H0) s1 H5) H1 H2) c s\n      end in\n    H1 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 s3 : string,\n              lex_lt s1 s2 -> lex_lt s2 s3 -> lex_lt s1 s3) \n      (s2 s3 : string) (H : lex_lt (String a s1) s2) \n      (H0 : lex_lt s2 s3) =>\n    let H1 :\n      String a s1 = String a s1 -> s2 = s2 -> lex_lt (String a s1) s3 :=\n      match\n        H in (lex_lt s s4)\n        return (s = String a s1 -> s4 = s2 -> lex_lt (String a s1) s3)\n      with\n      | lex_lt_lt c1 c2 s4 s5 x =>\n          (fun (c3 c4 : ascii) (s6 s7 : string)\n             (H1 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H2 : String c3 s6 = String a s1) (H3 : String c4 s7 = s2) =>\n           (fun H4 : String c3 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c3 = a =>\n              let H8 : c3 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String c4 s7 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s7 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 ->\n                    lex_lt (String a s1) s3)\n                   (fun H11 : String c4 s7 = s2 =>\n                    let H12 : String c4 s7 = s2 := H11 in\n                    eq_ind (String c4 s7)\n                      (fun _ : string =>\n                       nat_of_ascii a < nat_of_ascii c4 ->\n                       lex_lt (String a s1) s3)\n                      (fun H13 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String c4 s7))\n                            (H15 : lex_lt (String c4 s7) s3) =>\n                          let H16 :\n                            String c4 s7 = String c4 s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String c4 s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c5 c6 s8 s9 x0 =>\n                                (fun (c7 c0 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c7 < nat_of_ascii c0)\n                                   (H17 : String c7 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c7 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c7 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c7\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c7 = c4 =>\n                                    let H23 : c7 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c0 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c0 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c0 s11 = s3 ->\n                                          nat_of_ascii c4 < nat_of_ascii c0 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c0 s11 = s3 =>\n                                          let H27 : \n                                            String c0 s11 = s3 := H26 in\n                                          eq_ind (String c0 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii c4 <\n                                             nat_of_ascii c0 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii c4 <\n                                                nat_of_ascii c0 =>\n                                             eq_ind \n                                               (String c0 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c0 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c0 s11) =>\n                                                lex_lt_lt a c0 s1 s11\n                                                 (gt_le_S \n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.le_lt_trans\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4)\n                                                 (nat_of_ascii c0)\n                                                 (Nat.lt_le_incl\n                                                 (nat_of_ascii a)\n                                                 (nat_of_ascii c4) H13) H28\n                                                 :\n                                                 nat_of_ascii c0 >\n                                                 nat_of_ascii a)\n                                                 :\n                                                 nat_of_ascii a <\n                                                 nat_of_ascii c0)) s3 H26 H15)\n                                            s3 H27) H25) H23) H21) H20) H17\n                                   H18 H16) c5 c6 s8 s9 x0\n                            | lex_lt_eq c s8 s9 x0 =>\n                                (fun (c0 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c0 s10 = String c4 s7)\n                                   (H18 : String c0 s11 = s3) =>\n                                 (fun H19 : String c0 s10 = String c4 s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c0 = c4 :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c0\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c0 = c4 =>\n                                    let H23 : c0 = c4 := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String c4 s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun _ : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String c4 s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String c4 s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H13) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c s8 s9 x0\n                            | lex_lt_empty c s =>\n                                (fun (c0 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String c4 s7)\n                                   (H17 : String c0 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String c4 s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String c4 s7) H18 in\n                                  False_ind\n                                    (String c0 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17) c\n                                  s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c1 c2 s4 s5 x\n      | lex_lt_eq c s4 s5 x =>\n          (fun (c0 : ascii) (s6 s7 : string) (H1 : lex_lt s6 s7)\n             (H2 : String c0 s6 = String a s1) (H3 : String c0 s7 = s2) =>\n           (fun H4 : String c0 s6 = String a s1 =>\n            let H5 : s6 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s6\n                 | String _ s => s\n                 end) H4 in\n            (let H6 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H4 in\n             (fun H7 : c0 = a =>\n              let H8 : c0 = a := H7 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s6 = s1 ->\n                 String a0 s7 = s2 -> lex_lt s6 s7 -> lex_lt (String a s1) s3)\n                (fun H9 : s6 = s1 =>\n                 let H10 : s6 = s1 := H9 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s7 = s2 ->\n                    lex_lt s s7 -> lex_lt (String a s1) s3)\n                   (fun H11 : String a s7 = s2 =>\n                    let H12 : String a s7 = s2 := H11 in\n                    eq_ind (String a s7)\n                      (fun _ : string =>\n                       lex_lt s1 s7 -> lex_lt (String a s1) s3)\n                      (fun H13 : lex_lt s1 s7 =>\n                       eq_ind (String a s7)\n                         (fun s8 : string =>\n                          lex_lt (String a s1) s8 ->\n                          lex_lt s8 s3 -> lex_lt (String a s1) s3)\n                         (fun (_ : lex_lt (String a s1) (String a s7))\n                            (H15 : lex_lt (String a s7) s3) =>\n                          let H16 :\n                            String a s7 = String a s7 ->\n                            s3 = s3 -> lex_lt (String a s1) s3 :=\n                            match\n                              H15 in (lex_lt s s8)\n                              return\n                                (s = String a s7 ->\n                                 s8 = s3 -> lex_lt (String a s1) s3)\n                            with\n                            | lex_lt_lt c1 c2 s8 s9 x0 =>\n                                (fun (c3 c4 : ascii) \n                                   (s10 s11 : string)\n                                   (H16 : nat_of_ascii c3 < nat_of_ascii c4)\n                                   (H17 : String c3 s10 = String a s7)\n                                   (H18 : String c4 s11 = s3) =>\n                                 (fun H19 : String c3 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c3 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c3\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c3 = a =>\n                                    let H23 : c3 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String c4 s11 = s3 ->\n                                       nat_of_ascii a0 < nat_of_ascii c4 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun _ : string =>\n                                          String c4 s11 = s3 ->\n                                          nat_of_ascii a < nat_of_ascii c4 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String c4 s11 = s3 =>\n                                          let H27 : \n                                            String c4 s11 = s3 := H26 in\n                                          eq_ind (String c4 s11)\n                                            (fun s : string =>\n                                             nat_of_ascii a < nat_of_ascii c4 ->\n                                             lex_lt (String a s1) s)\n                                            (fun\n                                               H28 : \n                                                nat_of_ascii a <\n                                                nat_of_ascii c4 =>\n                                             eq_ind \n                                               (String c4 s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1)\n                                                 (String c4 s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String a s7)\n                                                 (String c4 s11) =>\n                                                lex_lt_lt a c4 s1 s11 H28) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c1 c2 s8 s9 x0\n                            | lex_lt_eq c1 s8 s9 x0 =>\n                                (fun (c2 : ascii) \n                                   (s10 s11 : string) \n                                   (H16 : lex_lt s10 s11)\n                                   (H17 : String c2 s10 = String a s7)\n                                   (H18 : String c2 s11 = s3) =>\n                                 (fun H19 : String c2 s10 = String a s7 =>\n                                  let H20 : s10 = s7 :=\n                                    f_equal\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => s10\n                                       | String _ s => s\n                                       end) H19 in\n                                  (let H21 : c2 = a :=\n                                     f_equal\n                                       (fun e : string =>\n                                        match e with\n                                        | \"\"%string => c2\n                                        | String a0 _ => a0\n                                        end) H19 in\n                                   (fun H22 : c2 = a =>\n                                    let H23 : c2 = a := H22 in\n                                    eq_ind_r\n                                      (fun a0 : ascii =>\n                                       s10 = s7 ->\n                                       String a0 s11 = s3 ->\n                                       lex_lt s10 s11 ->\n                                       lex_lt (String a s1) s3)\n                                      (fun H24 : s10 = s7 =>\n                                       let H25 : s10 = s7 := H24 in\n                                       eq_ind_r\n                                         (fun s : string =>\n                                          String a s11 = s3 ->\n                                          lex_lt s s11 ->\n                                          lex_lt (String a s1) s3)\n                                         (fun H26 : String a s11 = s3 =>\n                                          let H27 : \n                                            String a s11 = s3 := H26 in\n                                          eq_ind (String a s11)\n                                            (fun s : string =>\n                                             lex_lt s7 s11 ->\n                                             lex_lt (String a s1) s)\n                                            (fun H28 : lex_lt s7 s11 =>\n                                             eq_ind \n                                               (String a s11)\n                                               (fun s12 : string =>\n                                                lex_lt (String a s7) s12 ->\n                                                lex_lt \n                                                 (String a s1) \n                                                 (String a s11))\n                                               (fun\n                                                 _ : \n                                                 lex_lt \n                                                 (String a s7) \n                                                 (String a s11) =>\n                                                lex_lt_eq a s1 s11\n                                                 (IHs0 s7 s11 H13 H28)) s3\n                                               H26 H15) s3 H27) H25) H23) H21)\n                                    H20) H17 H18 H16) c1 s8 s9 x0\n                            | lex_lt_empty c1 s =>\n                                (fun (c2 : ascii) \n                                   (s8 : string)\n                                   (H16 : \"\"%string = String a s7)\n                                   (H17 : String c2 s8 = s3) =>\n                                 (fun H18 : \"\"%string = String a s7 =>\n                                  let H19 : False :=\n                                    eq_ind \"\"%string\n                                      (fun e : string =>\n                                       match e with\n                                       | \"\"%string => True\n                                       | String _ _ => False\n                                       end) I (String a s7) H18 in\n                                  False_ind\n                                    (String c2 s8 = s3 ->\n                                     lex_lt (String a s1) s3) H19) H16 H17)\n                                  c1 s\n                            end in\n                          H16 eq_refl eq_refl) s2 H11 H H0) s2 H12) H10) H8)\n               H6) H5) H2 H3 H1) c s4 s5 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s4 : string) (H1 : \"\"%string = String a s1)\n             (H2 : String c0 s4 = s2) =>\n           (fun H3 : \"\"%string = String a s1 =>\n            let H4 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H3 in\n            False_ind (String c0 s4 = s2 -> lex_lt (String a s1) s3) H4) H1\n             H2) c s\n      end in\n    H1 eq_refl eq_refl) s0)"], "proof_term_after": []}], "ends_qed": true}, {"path": "/home/jizej/proverbot9001/coq-projects/StructTact/StringOrders.v", "name": "lex_lt_not_eq", "text": "Theorem lex_lt_not_eq : forall s0 s1,\n    lex_lt s0 s1 -> s0 <> s1.\nProof.\n  induction s0.\n  - intros.\n    inversion H; subst.\n    congruence.\n  - intros.\n    inversion H; subst.\n    * intro H_eq.\n      find_injection.\n      contradict H3.\n      auto with arith.\n    * intro H_eq.\n      find_injection.\n      specialize (IHs0 s3).\n      concludes.\n      auto.\nQed.\n", "definition": " forall s0 s1,\n    lex_lt s0 s1 -> s0 <> s1.\n", "proof": "\n  induction s0.\n  - intros.\n    inversion H; subst.\n    congruence.\n  - intros.\n    inversion H; subst.\n    * intro H_eq.\n      find_injection.\n      contradict H3.\n      auto with arith.\n    * intro H_eq.\n      find_injection.\n      specialize (IHs0 s3).\n      concludes.\n      auto.\n", "def_ranges": [105, 0, 106, 29], "proof_ranges": [107, 0, 123, 4], "proof_steps": [{"text": "induction s0.", "goal_before": ["forall s0 s1 : string, lex_lt s0 s1 -> s0 <> s1"], "goal_after": ["forall s1 : string, lex_lt \"\" s1 -> \"\"%string <> s1", "forall s1 : string, lex_lt (String a s0) s1 -> String a s0 <> s1"], "proof_term_before": [], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   ?Goal\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) =>\n    ?Goal0@{s0:=s1}) s0)"]}, {"text": "intros.", "goal_before": ["forall s1 : string, lex_lt \"\" s1 -> \"\"%string <> s1", "forall s1 : string, lex_lt (String a s0) s1 -> String a s0 <> s1"], "goal_after": ["\"\"%string <> s1", "forall s1 : string, lex_lt (String a s0) s1 -> String a s0 <> s1"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   ?Goal\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) =>\n    ?Goal0@{s0:=s1}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) => ?Goal0)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) => \n    ?Goal@{s0:=s1}) s0)"]}, {"text": "inversion H; subst.", "goal_before": ["\"\"%string <> s1", "forall s1 : string, lex_lt (String a s0) s1 -> String a s0 <> s1"], "goal_after": ["\"\"%string <> String c s", "forall s1 : string, lex_lt (String a s0) s1 -> String a s0 <> s1"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) => ?Goal0)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) => \n    ?Goal@{s0:=s1}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun H5 : lex_lt \"\" (String c0 s2) =>\n                  ?Goal0@{c:=c0; s:=s2; H:=H5}) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) => \n    ?Goal@{s0:=s1}) s0)"]}, {"text": "congruence.", "goal_before": ["\"\"%string <> String c s", "forall s1 : string, lex_lt (String a s0) s1 -> String a s0 <> s1"], "goal_after": ["forall s1 : string, lex_lt (String a s0) s1 -> String a s0 <> s1"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun H5 : lex_lt \"\" (String c0 s2) =>\n                  ?Goal0@{c:=c0; s:=s2; H:=H5}) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) => \n    ?Goal@{s0:=s1}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) => \n    ?Goal@{s0:=s1}) s0)"]}, {"text": "intros.", "goal_before": ["forall s1 : string, lex_lt (String a s0) s1 -> String a s0 <> s1"], "goal_after": ["String a s0 <> s1"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) => \n    ?Goal@{s0:=s1}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) => \n    ?Goal@{s0:=s1; s1:=s2}) s0)"]}, {"text": "inversion H; subst.", "goal_before": ["String a s0 <> s1"], "goal_after": ["String a s0 <> String c2 s3", "String a s0 <> String a s3"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) => \n    ?Goal@{s0:=s1; s1:=s2}) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          ?Goal@{s0:=s1; c2:=c4; s3:=s6; H:=H13; H3:=H12}) s2\n                         H10 H) s2 H11) H9) H7) H5) H4) H1 H2 H0) c1 c2 s3 s4\n            x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          ?Goal0@{s0:=s1; s3:=s6; H:=H13; H3:=H12}) s2 H10 H)\n                      s2 H11) H9) H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"]}, {"text": "intro H_eq.", "goal_before": ["String a s0 <> String c2 s3", "String a s0 <> String a s3"], "goal_after": ["False", "String a s0 <> String a s3"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          ?Goal@{s0:=s1; c2:=c4; s3:=s6; H:=H13; H3:=H12}) s2\n                         H10 H) s2 H11) H9) H7) H5) H4) H1 H2 H0) c1 c2 s3 s4\n            x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          ?Goal0@{s0:=s1; s3:=s6; H:=H13; H3:=H12}) s2 H10 H)\n                      s2 H11) H9) H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           ?Goal0@{s0:=s1; c2:=c4; s3:=s6; H:=H13; H3:=H12})\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          ?Goal@{s0:=s1; s3:=s6; H:=H13; H3:=H12}) s2 H10 H)\n                      s2 H11) H9) H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"]}, {"text": "find_injection.", "goal_before": ["False", "String a s0 <> String a s3"], "goal_after": ["False", "String a s0 <> String a s3"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           ?Goal0@{s0:=s1; c2:=c4; s3:=s6; H:=H13; H3:=H12})\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          ?Goal@{s0:=s1; s3:=s6; H:=H13; H3:=H12}) s2 H10 H)\n                      s2 H11) H9) H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (IHs1 : forall s7 : string,\n                                             lex_lt s6 s7 -> s6 <> s7)\n                                     (H20 : lex_lt \n                                              (String c4 s6) \n                                              (String c4 s6)) =>\n                                   ?Goal0@{s3:=s6; IHs0:=IHs1; c2:=c4;\n                                           H3:=H19; H:=H20}) H16 IHs0 H18)\n                               H17 H13 H12) H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          ?Goal@{s0:=s1; s3:=s6; H:=H13; H3:=H12}) s2 H10 H)\n                      s2 H11) H9) H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"]}, {"text": "contradict H3.", "goal_before": ["False", "String a s0 <> String a s3"], "goal_after": ["~ nat_of_ascii c2 < nat_of_ascii c2", "String a s0 <> String a s3"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (IHs1 : forall s7 : string,\n                                             lex_lt s6 s7 -> s6 <> s7)\n                                     (H20 : lex_lt \n                                              (String c4 s6) \n                                              (String c4 s6)) =>\n                                   ?Goal0@{s3:=s6; IHs0:=IHs1; c2:=c4;\n                                           H3:=H19; H:=H20}) H16 IHs0 H18)\n                               H17 H13 H12) H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          ?Goal@{s0:=s1; s3:=s6; H:=H13; H3:=H12}) s2 H10 H)\n                      s2 H11) H9) H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (IHs1 : forall s7 : string,\n                                             lex_lt s6 s7 -> s6 <> s7)\n                                     (H20 : lex_lt \n                                              (String c4 s6) \n                                              (String c4 s6)) =>\n                                   False_ind False\n                                     ((?Goal0@{s3:=s6; IHs0:=IHs1; c2:=c4;\n                                               H:=H20}\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          ?Goal@{s0:=s1; s3:=s6; H:=H13; H3:=H12}) s2 H10 H)\n                      s2 H11) H9) H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"]}, {"text": "auto with arith.", "goal_before": ["~ nat_of_ascii c2 < nat_of_ascii c2", "String a s0 <> String a s3"], "goal_after": ["String a s0 <> String a s3"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (IHs1 : forall s7 : string,\n                                             lex_lt s6 s7 -> s6 <> s7)\n                                     (H20 : lex_lt \n                                              (String c4 s6) \n                                              (String c4 s6)) =>\n                                   False_ind False\n                                     ((?Goal0@{s3:=s6; IHs0:=IHs1; c2:=c4;\n                                               H:=H20}\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          ?Goal@{s0:=s1; s3:=s6; H:=H13; H3:=H12}) s2 H10 H)\n                      s2 H11) H9) H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          ?Goal@{s0:=s1; s3:=s6; H:=H13; H3:=H12}) s2 H10 H)\n                      s2 H11) H9) H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"]}, {"text": "intro H_eq.", "goal_before": ["String a s0 <> String a s3"], "goal_after": ["False"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          ?Goal@{s0:=s1; s3:=s6; H:=H13; H3:=H12}) s2 H10 H)\n                      s2 H11) H9) H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          (fun H_eq : String a s1 = String a s6 =>\n                           ?Goal@{s0:=s1; s3:=s6; H:=H13; H3:=H12})\n                          :\n                          String a s1 <> String a s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"]}, {"text": "find_injection.", "goal_before": ["False"], "goal_after": ["False"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          (fun H_eq : String a s1 = String a s6 =>\n                           ?Goal@{s0:=s1; s3:=s6; H:=H13; H3:=H12})\n                          :\n                          String a s1 <> String a s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          (fun H_eq : String a s1 = String a s6 =>\n                           let H14 : s1 = s6 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => s1\n                                | String _ s => s\n                                end) H_eq in\n                           (fun H15 : s1 = s6 =>\n                            eq_ind_r\n                              (fun s7 : string =>\n                               (forall s8 : string, lex_lt s7 s8 -> s7 <> s8) ->\n                               lex_lt (String a s7) (String a s6) ->\n                               lex_lt s7 s6 -> False)\n                              (fun\n                                 (IHs1 : forall s7 : string,\n                                         lex_lt s6 s7 -> s6 <> s7)\n                                 (H16 : lex_lt (String a s6) (String a s6))\n                                 (H17 : lex_lt s6 s6) =>\n                               ?Goal@{s3:=s6; H3:=H17; H:=H16; IHs0:=IHs1})\n                              H15 IHs0 H13 H12) H14)\n                          :\n                          String a s1 <> String a s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"]}, {"text": "specialize (IHs0 s3).", "goal_before": ["False"], "goal_after": ["False"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          (fun H_eq : String a s1 = String a s6 =>\n                           let H14 : s1 = s6 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => s1\n                                | String _ s => s\n                                end) H_eq in\n                           (fun H15 : s1 = s6 =>\n                            eq_ind_r\n                              (fun s7 : string =>\n                               (forall s8 : string, lex_lt s7 s8 -> s7 <> s8) ->\n                               lex_lt (String a s7) (String a s6) ->\n                               lex_lt s7 s6 -> False)\n                              (fun\n                                 (IHs1 : forall s7 : string,\n                                         lex_lt s6 s7 -> s6 <> s7)\n                                 (H16 : lex_lt (String a s6) (String a s6))\n                                 (H17 : lex_lt s6 s6) =>\n                               ?Goal@{s3:=s6; H3:=H17; H:=H16; IHs0:=IHs1})\n                              H15 IHs0 H13 H12) H14)\n                          :\n                          String a s1 <> String a s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          (fun H_eq : String a s1 = String a s6 =>\n                           let H14 : s1 = s6 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => s1\n                                | String _ s => s\n                                end) H_eq in\n                           (fun H15 : s1 = s6 =>\n                            eq_ind_r\n                              (fun s7 : string =>\n                               (forall s8 : string, lex_lt s7 s8 -> s7 <> s8) ->\n                               lex_lt (String a s7) (String a s6) ->\n                               lex_lt s7 s6 -> False)\n                              (fun\n                                 (IHs1 : forall s7 : string,\n                                         lex_lt s6 s7 -> s6 <> s7)\n                                 (H16 : lex_lt (String a s6) (String a s6))\n                                 (H17 : lex_lt s6 s6) =>\n                               let IHs2 : lex_lt s6 s6 -> s6 <> s6 := \n                                 IHs1 s6 in\n                               ?Goal@{s3:=s6; H3:=H17; H:=H16; IHs0:=IHs2})\n                              H15 IHs0 H13 H12) H14)\n                          :\n                          String a s1 <> String a s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"]}, {"text": "concludes.", "goal_before": ["False"], "goal_after": ["False"], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          (fun H_eq : String a s1 = String a s6 =>\n                           let H14 : s1 = s6 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => s1\n                                | String _ s => s\n                                end) H_eq in\n                           (fun H15 : s1 = s6 =>\n                            eq_ind_r\n                              (fun s7 : string =>\n                               (forall s8 : string, lex_lt s7 s8 -> s7 <> s8) ->\n                               lex_lt (String a s7) (String a s6) ->\n                               lex_lt s7 s6 -> False)\n                              (fun\n                                 (IHs1 : forall s7 : string,\n                                         lex_lt s6 s7 -> s6 <> s7)\n                                 (H16 : lex_lt (String a s6) (String a s6))\n                                 (H17 : lex_lt s6 s6) =>\n                               let IHs2 : lex_lt s6 s6 -> s6 <> s6 := \n                                 IHs1 s6 in\n                               ?Goal@{s3:=s6; H3:=H17; H:=H16; IHs0:=IHs2})\n                              H15 IHs0 H13 H12) H14)\n                          :\n                          String a s1 <> String a s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          (fun H_eq : String a s1 = String a s6 =>\n                           let H14 : s1 = s6 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => s1\n                                | String _ s => s\n                                end) H_eq in\n                           (fun H15 : s1 = s6 =>\n                            eq_ind_r\n                              (fun s7 : string =>\n                               (forall s8 : string, lex_lt s7 s8 -> s7 <> s8) ->\n                               lex_lt (String a s7) (String a s6) ->\n                               lex_lt s7 s6 -> False)\n                              (fun\n                                 (IHs1 : forall s7 : string,\n                                         lex_lt s6 s7 -> s6 <> s7)\n                                 (H16 : lex_lt (String a s6) (String a s6))\n                                 (H17 : lex_lt s6 s6) =>\n                               let IHs2 : lex_lt s6 s6 -> s6 <> s6 := \n                                 IHs1 s6 in\n                               let H18 : lex_lt s6 s6 := H17 in\n                               let IHs3 : s6 <> s6 := IHs2 H18 in\n                               ?Goal@{s3:=s6; H3:=H17; H:=H16; IHs0:=IHs3})\n                              H15 IHs0 H13 H12) H14)\n                          :\n                          String a s1 <> String a s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"]}, {"text": "auto.", "goal_before": ["False"], "goal_after": [], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          (fun H_eq : String a s1 = String a s6 =>\n                           let H14 : s1 = s6 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => s1\n                                | String _ s => s\n                                end) H_eq in\n                           (fun H15 : s1 = s6 =>\n                            eq_ind_r\n                              (fun s7 : string =>\n                               (forall s8 : string, lex_lt s7 s8 -> s7 <> s8) ->\n                               lex_lt (String a s7) (String a s6) ->\n                               lex_lt s7 s6 -> False)\n                              (fun\n                                 (IHs1 : forall s7 : string,\n                                         lex_lt s6 s7 -> s6 <> s7)\n                                 (H16 : lex_lt (String a s6) (String a s6))\n                                 (H17 : lex_lt s6 s6) =>\n                               let IHs2 : lex_lt s6 s6 -> s6 <> s6 := \n                                 IHs1 s6 in\n                               let H18 : lex_lt s6 s6 := H17 in\n                               let IHs3 : s6 <> s6 := IHs2 H18 in\n                               ?Goal@{s3:=s6; H3:=H17; H:=H16; IHs0:=IHs3})\n                              H15 IHs0 H13 H12) H14)\n                          :\n                          String a s1 <> String a s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"], "proof_term_after": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          (fun H_eq : String a s1 = String a s6 =>\n                           let H14 : s1 = s6 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => s1\n                                | String _ s => s\n                                end) H_eq in\n                           (fun H15 : s1 = s6 =>\n                            eq_ind_r\n                              (fun s7 : string =>\n                               (forall s8 : string, lex_lt s7 s8 -> s7 <> s8) ->\n                               lex_lt (String a s7) (String a s6) ->\n                               lex_lt s7 s6 -> False)\n                              (fun\n                                 (IHs1 : forall s7 : string,\n                                         lex_lt s6 s7 -> s6 <> s7)\n                                 (_ : lex_lt (String a s6) (String a s6))\n                                 (H17 : lex_lt s6 s6) =>\n                               let IHs2 : lex_lt s6 s6 -> s6 <> s6 := \n                                 IHs1 s6 in\n                               let H18 : lex_lt s6 s6 := H17 in\n                               let IHs3 : s6 <> s6 := IHs2 H18 in\n                               IHs3 eq_refl) H15 IHs0 H13 H12) H14)\n                          :\n                          String a s1 <> String a s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun s0 : string =>\n string_ind (fun s1 : string => forall s2 : string, lex_lt s1 s2 -> s1 <> s2)\n   (fun (s1 : string) (H : lex_lt \"\" s1) =>\n    let H0 : \"\"%string = \"\"%string -> s1 = s1 -> \"\"%string <> s1 :=\n      match\n        H in (lex_lt s s2)\n        return (s = \"\"%string -> s2 = s1 -> \"\"%string <> s1)\n      with\n      | lex_lt_lt c1 c2 s2 s3 x =>\n          (fun (c3 c4 : ascii) (s4 s5 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s4 = \"\"%string) (H2 : String c4 s5 = s1) =>\n           (fun H3 : String c3 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c3 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind\n              (String c4 s5 = s1 ->\n               nat_of_ascii c3 < nat_of_ascii c4 -> \"\"%string <> s1) H4) H1\n             H2 H0) c1 c2 s2 s3 x\n      | lex_lt_eq c s2 s3 x =>\n          (fun (c0 : ascii) (s4 s5 : string) (H0 : lex_lt s4 s5)\n             (H1 : String c0 s4 = \"\"%string) (H2 : String c0 s5 = s1) =>\n           (fun H3 : String c0 s4 = \"\"%string =>\n            let H4 : False :=\n              eq_ind (String c0 s4)\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => False\n                 | String _ _ => True\n                 end) I \"\"%string H3 in\n            False_ind (String c0 s5 = s1 -> lex_lt s4 s5 -> \"\"%string <> s1)\n              H4) H1 H2 H0) c s2 s3 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s2 : string) (H0 : \"\"%string = \"\"%string)\n             (H1 : String c0 s2 = s1) =>\n           (fun (_ : \"\"%string = \"\"%string) (H3 : String c0 s2 = s1) =>\n            let H4 : String c0 s2 = s1 := H3 in\n            eq_ind (String c0 s2) (fun s3 : string => \"\"%string <> s3)\n              (eq_ind (String c0 s2)\n                 (fun s3 : string =>\n                  lex_lt \"\" s3 -> \"\"%string <> String c0 s2)\n                 (fun _ : lex_lt \"\" (String c0 s2) =>\n                  (fun H6 : \"\"%string = String c0 s2 =>\n                   let Heq : \"\"%string = String c0 s2 := H6 in\n                   let H7 : False :=\n                     eq_ind \"\"%string\n                       (fun e : string =>\n                        match e with\n                        | \"\"%string => True\n                        | String _ _ => False\n                        end) I (String c0 s2) Heq in\n                   False_ind False H7)\n                  :\n                  \"\"%string <> String c0 s2) s1 H3 H) s1 H4) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl)\n   (fun (a : ascii) (s1 : string)\n      (IHs0 : forall s2 : string, lex_lt s1 s2 -> s1 <> s2) \n      (s2 : string) (H : lex_lt (String a s1) s2) =>\n    let H0 : String a s1 = String a s1 -> s2 = s2 -> String a s1 <> s2 :=\n      match\n        H in (lex_lt s s3)\n        return (s = String a s1 -> s3 = s2 -> String a s1 <> s2)\n      with\n      | lex_lt_lt c1 c2 s3 s4 x =>\n          (fun (c3 c4 : ascii) (s5 s6 : string)\n             (H0 : nat_of_ascii c3 < nat_of_ascii c4)\n             (H1 : String c3 s5 = String a s1) (H2 : String c4 s6 = s2) =>\n           (fun H3 : String c3 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c3 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c3\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c3 = a =>\n              let H7 : c3 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String c4 s6 = s2 ->\n                 nat_of_ascii a0 < nat_of_ascii c4 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun _ : string =>\n                    String c4 s6 = s2 ->\n                    nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s2)\n                   (fun H10 : String c4 s6 = s2 =>\n                    let H11 : String c4 s6 = s2 := H10 in\n                    eq_ind (String c4 s6)\n                      (fun s : string =>\n                       nat_of_ascii a < nat_of_ascii c4 -> String a s1 <> s)\n                      (fun H12 : nat_of_ascii a < nat_of_ascii c4 =>\n                       eq_ind (String c4 s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String c4 s6)\n                         (fun H13 : lex_lt (String a s1) (String c4 s6) =>\n                          (fun H_eq : String a s1 = String c4 s6 =>\n                           let H14 : a = c4 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => a\n                                | String a0 _ => a0\n                                end) H_eq in\n                           (let H15 : s1 = s6 :=\n                              f_equal\n                                (fun e : string =>\n                                 match e with\n                                 | \"\"%string => s1\n                                 | String _ s => s\n                                 end) H_eq in\n                            (fun (H16 : s1 = s6) (H17 : a = c4) =>\n                             eq_ind_r\n                               (fun a0 : ascii =>\n                                lex_lt (String a0 s1) (String c4 s6) ->\n                                nat_of_ascii a0 < nat_of_ascii c4 -> False)\n                               (fun\n                                  (H18 : lex_lt (String c4 s1) (String c4 s6))\n                                  (H19 : nat_of_ascii c4 < nat_of_ascii c4)\n                                =>\n                                eq_ind_r\n                                  (fun s7 : string =>\n                                   (forall s8 : string,\n                                    lex_lt s7 s8 -> s7 <> s8) ->\n                                   lex_lt (String c4 s7) (String c4 s6) ->\n                                   False)\n                                  (fun\n                                     (_ : forall s7 : string,\n                                          lex_lt s6 s7 -> s6 <> s7)\n                                     (_ : lex_lt (String c4 s6)\n                                            (String c4 s6)) =>\n                                   False_ind False\n                                     ((Nat.lt_irrefl (nat_of_ascii c4)\n                                       :\n                                       nat_of_ascii c4 < nat_of_ascii c4 ->\n                                       False) H19)) H16 IHs0 H18) H17 H13 H12)\n                              H15) H14)\n                          :\n                          String a s1 <> String c4 s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c1 c2 s3 s4 x\n      | lex_lt_eq c s3 s4 x =>\n          (fun (c0 : ascii) (s5 s6 : string) (H0 : lex_lt s5 s6)\n             (H1 : String c0 s5 = String a s1) (H2 : String c0 s6 = s2) =>\n           (fun H3 : String c0 s5 = String a s1 =>\n            let H4 : s5 = s1 :=\n              f_equal\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => s5\n                 | String _ s => s\n                 end) H3 in\n            (let H5 : c0 = a :=\n               f_equal\n                 (fun e : string =>\n                  match e with\n                  | \"\"%string => c0\n                  | String a0 _ => a0\n                  end) H3 in\n             (fun H6 : c0 = a =>\n              let H7 : c0 = a := H6 in\n              eq_ind_r\n                (fun a0 : ascii =>\n                 s5 = s1 ->\n                 String a0 s6 = s2 -> lex_lt s5 s6 -> String a s1 <> s2)\n                (fun H8 : s5 = s1 =>\n                 let H9 : s5 = s1 := H8 in\n                 eq_ind_r\n                   (fun s : string =>\n                    String a s6 = s2 -> lex_lt s s6 -> String a s1 <> s2)\n                   (fun H10 : String a s6 = s2 =>\n                    let H11 : String a s6 = s2 := H10 in\n                    eq_ind (String a s6)\n                      (fun s : string => lex_lt s1 s6 -> String a s1 <> s)\n                      (fun H12 : lex_lt s1 s6 =>\n                       eq_ind (String a s6)\n                         (fun s7 : string =>\n                          lex_lt (String a s1) s7 ->\n                          String a s1 <> String a s6)\n                         (fun H13 : lex_lt (String a s1) (String a s6) =>\n                          (fun H_eq : String a s1 = String a s6 =>\n                           let H14 : s1 = s6 :=\n                             f_equal\n                               (fun e : string =>\n                                match e with\n                                | \"\"%string => s1\n                                | String _ s => s\n                                end) H_eq in\n                           (fun H15 : s1 = s6 =>\n                            eq_ind_r\n                              (fun s7 : string =>\n                               (forall s8 : string, lex_lt s7 s8 -> s7 <> s8) ->\n                               lex_lt (String a s7) (String a s6) ->\n                               lex_lt s7 s6 -> False)\n                              (fun\n                                 (IHs1 : forall s7 : string,\n                                         lex_lt s6 s7 -> s6 <> s7)\n                                 (_ : lex_lt (String a s6) (String a s6))\n                                 (H17 : lex_lt s6 s6) =>\n                               let IHs2 : lex_lt s6 s6 -> s6 <> s6 := \n                                 IHs1 s6 in\n                               let H18 : lex_lt s6 s6 := H17 in\n                               let IHs3 : s6 <> s6 := IHs2 H18 in\n                               IHs3 eq_refl) H15 IHs0 H13 H12) H14)\n                          :\n                          String a s1 <> String a s6) s2 H10 H) s2 H11) H9)\n                H7) H5) H4) H1 H2 H0) c s3 s4 x\n      | lex_lt_empty c s =>\n          (fun (c0 : ascii) (s3 : string) (H0 : \"\"%string = String a s1)\n             (H1 : String c0 s3 = s2) =>\n           (fun H2 : \"\"%string = String a s1 =>\n            let H3 : False :=\n              eq_ind \"\"%string\n                (fun e : string =>\n                 match e with\n                 | \"\"%string => True\n                 | String _ _ => False\n                 end) I (String a s1) H2 in\n            False_ind (String c0 s3 = s2 -> String a s1 <> s2) H3) H0 H1) c s\n      end in\n    H0 eq_refl eq_refl) s0)"], "proof_term_after": []}], "ends_qed": true}, {"path": "/home/jizej/proverbot9001/coq-projects/StructTact/StringOrders.v", "name": "lex_lt_strorder", "text": "Theorem lex_lt_strorder : StrictOrder lex_lt.\nProof.\n  exact (Build_StrictOrder _ lex_lt_irrefl lex_lt_trans).\nQed.\n", "definition": " StrictOrder lex_lt.\n", "proof": "\n  exact (Build_StrictOrder _ lex_lt_irrefl lex_lt_trans).\n", "def_ranges": [200, 0, 200, 45], "proof_ranges": [201, 0, 203, 4], "proof_steps": [{"text": "exact (Build_StrictOrder _ lex_lt_irrefl lex_lt_trans).", "goal_before": ["StrictOrder lex_lt"], "goal_after": [], "proof_term_before": [], "proof_term_after": ["{|\n  StrictOrder_Irreflexive := lex_lt_irrefl;\n  StrictOrder_Transitive := lex_lt_trans\n|}"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["{|\n  StrictOrder_Irreflexive := lex_lt_irrefl;\n  StrictOrder_Transitive := lex_lt_trans\n|}"], "proof_term_after": []}], "ends_qed": true}, {"path": "/home/jizej/proverbot9001/coq-projects/StructTact/StringOrders.v", "name": "lex_lt_lt_compat", "text": "Theorem lex_lt_lt_compat : Proper (eq ==> eq ==> iff) lex_lt.\nProof.\nintros s0 s1 H_eq s2 s3 H_eq'.\nsplit; intro H_imp; subst; auto.\nQed.\n", "definition": " Proper (eq ==> eq ==> iff) lex_lt.\n", "proof": "\nintros s0 s1 H_eq s2 s3 H_eq'.\nsplit; intro H_imp; subst; auto.\n", "def_ranges": [205, 0, 205, 61], "proof_ranges": [206, 0, 209, 4], "proof_steps": [{"text": "intros s0 s1 H_eq s2 s3 H_eq'.", "goal_before": ["Proper (eq ==> eq ==> iff) lex_lt"], "goal_after": ["lex_lt s0 s2 <-> lex_lt s1 s3"], "proof_term_before": [], "proof_term_after": ["((fun (s0 s1 : string) (H_eq : s0 = s1) =>\n  (fun (s2 s3 : string) (H_eq' : s2 = s3) => ?Goal)\n  :\n  (eq ==> iff)%signature (lex_lt s0) (lex_lt s1))\n :\n Proper (eq ==> eq ==> iff) lex_lt)"]}, {"text": "split; intro H_imp; subst; auto.", "goal_before": ["lex_lt s0 s2 <-> lex_lt s1 s3"], "goal_after": [], "proof_term_before": ["((fun (s0 s1 : string) (H_eq : s0 = s1) =>\n  (fun (s2 s3 : string) (H_eq' : s2 = s3) => ?Goal)\n  :\n  (eq ==> iff)%signature (lex_lt s0) (lex_lt s1))\n :\n Proper (eq ==> eq ==> iff) lex_lt)"], "proof_term_after": ["((fun (s0 s1 : string) (H_eq : s0 = s1) =>\n  (fun (s2 s3 : string) (H_eq' : s2 = s3) =>\n   conj\n     (fun H_imp : lex_lt s0 s2 =>\n      eq_ind_r (fun s4 : string => lex_lt s4 s2 -> lex_lt s1 s3)\n        (fun H_imp0 : lex_lt s1 s2 =>\n         eq_ind_r (fun s4 : string => lex_lt s1 s4 -> lex_lt s1 s3)\n           (fun H_imp1 : lex_lt s1 s3 => H_imp1) H_eq' H_imp0) H_eq H_imp)\n     (fun H_imp : lex_lt s1 s3 =>\n      eq_ind_r (fun s4 : string => lex_lt s4 s2)\n        (eq_ind_r (fun s4 : string => lex_lt s1 s4) H_imp H_eq') H_eq))\n  :\n  (eq ==> iff)%signature (lex_lt s0) (lex_lt s1))\n :\n Proper (eq ==> eq ==> iff) lex_lt)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["((fun (s0 s1 : string) (H_eq : s0 = s1) =>\n  (fun (s2 s3 : string) (H_eq' : s2 = s3) =>\n   conj\n     (fun H_imp : lex_lt s0 s2 =>\n      eq_ind_r (fun s4 : string => lex_lt s4 s2 -> lex_lt s1 s3)\n        (fun H_imp0 : lex_lt s1 s2 =>\n         eq_ind_r (fun s4 : string => lex_lt s1 s4 -> lex_lt s1 s3)\n           (fun H_imp1 : lex_lt s1 s3 => H_imp1) H_eq' H_imp0) H_eq H_imp)\n     (fun H_imp : lex_lt s1 s3 =>\n      eq_ind_r (fun s4 : string => lex_lt s4 s2)\n        (eq_ind_r (fun s4 : string => lex_lt s1 s4) H_imp H_eq') H_eq))\n  :\n  (eq ==> iff)%signature (lex_lt s0) (lex_lt s1))\n :\n Proper (eq ==> eq ==> iff) lex_lt)"], "proof_term_after": []}], "ends_qed": true}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "prop1", "text": "Theorem prop1 : forall ws : list word, bar (nil :: ws).\nauto.\nDefined.\n", "definition": " forall ws : list word, bar (nil :: ws).", "proof": "\nauto.\n", "def_ranges": [71, 0, 71, 55], "proof_ranges": [72, 0, 73, 8], "proof_steps": [{"text": "auto.", "goal_before": ["forall ws : list word, bar (nil :: ws)"], "goal_after": ["forall ws : list word, bar (nil :: ws)"], "proof_term_before": [], "proof_term_after": ["?Goal"]}, {"text": "Qed.", "goal_before": ["forall ws : list word, bar (nil :: ws)"], "goal_after": [], "proof_term_before": ["?Goal"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "lemma1", "text": "Theorem lemma1 :\n forall (ws : list word) (xs : word) (x : letter), L xs ws -> L (x :: xs) ws.\nsimple induction 1; auto.\nDefined.\n", "definition": "\n forall (ws : list word) (xs : word) (x : letter), L xs ws -> L (x :: xs) ws.", "proof": "\nsimple induction 1; auto.\n", "def_ranges": [76, 0, 77, 77], "proof_ranges": [78, 0, 79, 8], "proof_steps": [{"text": "simple induction 1; auto.", "goal_before": ["forall (ws : list word) (xs : word) (x : letter), L xs ws -> L (x :: xs) ws"], "goal_after": ["forall (w : word) (ws0 : list word), emb w xs -> L (x :: xs) (w :: ws0)", "forall (w : word) (ws0 : list word),\nL xs ws0 -> L (x :: xs) ws0 -> L (x :: xs) (w :: ws0)"], "proof_term_before": [], "proof_term_after": ["(fun (ws : list word) (xs : word) (x : letter) (H : L xs ws) =>\n L_ind xs (fun ws0 : list word => L (x :: xs) ws0) ?Goal ?Goal0 ws H)"]}, {"text": "Qed.", "goal_before": ["forall (w : word) (ws0 : list word), emb w xs -> L (x :: xs) (w :: ws0)", "forall (w : word) (ws0 : list word),\nL xs ws0 -> L (x :: xs) ws0 -> L (x :: xs) (w :: ws0)"], "goal_after": [], "proof_term_before": ["(fun (ws : list word) (xs : word) (x : letter) (H : L xs ws) =>\n L_ind xs (fun ws0 : list word => L (x :: xs) ws0) ?Goal ?Goal0 ws H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "lemma2'", "text": "Theorem lemma2' :\n forall (vs ws : list word) (x : letter) (xs : word),\n R x vs ws -> L xs vs -> L (x :: xs) ws.\nsimple induction 1.\ninversion 1.\ninversion 3; auto.\nDefined.\n", "definition": "\n forall (vs ws : list word) (x : letter) (xs : word),\n R x vs ws -> L xs vs -> L (x :: xs) ws.", "proof": "\nsimple induction 1.\ninversion 1.\ninversion 3; auto.\n", "def_ranges": [82, 0, 84, 40], "proof_ranges": [85, 0, 88, 8], "proof_steps": [{"text": "simple induction 1.", "goal_before": ["forall (vs ws : list word) (x : letter) (xs : word),\nR x vs ws -> L xs vs -> L (x :: xs) ws"], "goal_after": ["L xs nil -> L (x :: xs) nil", "forall (vs0 ws0 : list word) (w : word),\nR x vs0 ws0 ->\n(L xs vs0 -> L (x :: xs) ws0) ->\nL xs (w :: vs0) -> L (x :: xs) ((x :: w) :: ws0)"], "proof_term_before": [], "proof_term_after": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_ind x (fun vs0 ws0 : list word => L xs vs0 -> L (x :: xs) ws0) \n   ?Goal ?Goal0 vs ws H)"]}, {"text": "inversion 1.", "goal_before": ["L xs nil -> L (x :: xs) nil", "forall (vs0 ws0 : list word) (w : word),\nR x vs0 ws0 ->\n(L xs vs0 -> L (x :: xs) ws0) ->\nL xs (w :: vs0) -> L (x :: xs) ((x :: w) :: ws0)"], "goal_after": ["forall (vs0 ws0 : list word) (w : word),\nR x vs0 ws0 ->\n(L xs vs0 -> L (x :: xs) ws0) ->\nL xs (w :: vs0) -> L (x :: xs) ((x :: w) :: ws0)"], "proof_term_before": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_ind x (fun vs0 ws0 : list word => L xs vs0 -> L (x :: xs) ws0) \n   ?Goal ?Goal0 vs ws H)"], "proof_term_after": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_ind x (fun vs0 ws0 : list word => L xs vs0 -> L (x :: xs) ws0)\n   (fun H0 : L xs nil =>\n    let H1 : nil = nil -> L (x :: xs) nil :=\n      match H0 in (L _ l) return (l = nil -> L (x :: xs) nil) with\n      | L0 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : emb w0 xs)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_ind (emb w0 xs -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      | L1 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : L xs ws1)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_ind (L xs ws1 -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      end in\n    H1 eq_refl) ?Goal vs ws H)"]}, {"text": "inversion 3; auto.", "goal_before": ["forall (vs0 ws0 : list word) (w : word),\nR x vs0 ws0 ->\n(L xs vs0 -> L (x :: xs) ws0) ->\nL xs (w :: vs0) -> L (x :: xs) ((x :: w) :: ws0)"], "goal_after": ["L (x :: xs) ((x :: w) :: ws0)", "L (x :: xs) ((x :: w) :: ws0)"], "proof_term_before": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_ind x (fun vs0 ws0 : list word => L xs vs0 -> L (x :: xs) ws0)\n   (fun H0 : L xs nil =>\n    let H1 : nil = nil -> L (x :: xs) nil :=\n      match H0 in (L _ l) return (l = nil -> L (x :: xs) nil) with\n      | L0 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : emb w0 xs)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_ind (emb w0 xs -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      | L1 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : L xs ws1)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_ind (L xs ws1 -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      end in\n    H1 eq_refl) ?Goal vs ws H)"], "proof_term_after": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_ind x (fun vs0 ws0 : list word => L xs vs0 -> L (x :: xs) ws0)\n   (fun H0 : L xs nil =>\n    let H1 : nil = nil -> L (x :: xs) nil :=\n      match H0 in (L _ l) return (l = nil -> L (x :: xs) nil) with\n      | L0 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : emb w0 xs)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_ind (emb w0 xs -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      | L1 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : L xs ws1)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_ind (L xs ws1 -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      end in\n    H1 eq_refl)\n   (fun (vs0 ws0 : list word) (w : word) (H0 : R x vs0 ws0)\n      (H1 : L xs vs0 -> L (x :: xs) ws0) (H2 : L xs (w :: vs0)) =>\n    let H3 : w :: vs0 = w :: vs0 -> L (x :: xs) ((x :: w) :: ws0) :=\n      match\n        H2 in (L _ l) return (l = w :: vs0 -> L (x :: xs) ((x :: w) :: ws0))\n      with\n      | L0 _ w0 ws1 x0 =>\n          (fun (w1 : word) (ws2 : list word) (H3 : emb w1 xs)\n             (H4 : w1 :: ws2 = w :: vs0) =>\n           (fun H5 : w1 :: ws2 = w :: vs0 =>\n            let H6 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H5 in\n            (let H7 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H5 in\n             (fun H8 : w1 = w =>\n              let H9 : w1 = w := H8 in\n              eq_ind_r\n                (fun w2 : word =>\n                 ws2 = vs0 -> emb w2 xs -> L (x :: xs) ((x :: w) :: ws0))\n                (fun H10 : ws2 = vs0 =>\n                 let H11 : ws2 = vs0 := H10 in\n                 eq_ind_r\n                   (fun _ : list word =>\n                    emb w xs -> L (x :: xs) ((x :: w) :: ws0))\n                   (fun H12 : emb w xs =>\n                    ?Goal@{w0:=w1; ws1:=ws2; H4:=H12; H3:=H8; H5:=H10}) H11)\n                H9) H7) H6) H4 H3) w0 ws1 x0\n      | L1 _ w0 ws1 x0 =>\n          (fun (w1 : word) (ws2 : list word) (H3 : L xs ws2)\n             (H4 : w1 :: ws2 = w :: vs0) =>\n           (fun H5 : w1 :: ws2 = w :: vs0 =>\n            let H6 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H5 in\n            (let H7 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H5 in\n             (fun H8 : w1 = w =>\n              let H9 : w1 = w := H8 in\n              eq_ind_r\n                (fun _ : word =>\n                 ws2 = vs0 -> L xs ws2 -> L (x :: xs) ((x :: w) :: ws0))\n                (fun H10 : ws2 = vs0 =>\n                 let H11 : ws2 = vs0 := H10 in\n                 eq_ind_r\n                   (fun l : list word =>\n                    L xs l -> L (x :: xs) ((x :: w) :: ws0))\n                   (fun H12 : L xs vs0 =>\n                    ?Goal0@{w0:=w1; ws1:=ws2; H4:=H12; H3:=H8; H5:=H10}) H11)\n                H9) H7) H6) H4 H3) w0 ws1 x0\n      end in\n    H3 eq_refl) vs ws H)"]}, {"text": "Qed.", "goal_before": ["L (x :: xs) ((x :: w) :: ws0)", "L (x :: xs) ((x :: w) :: ws0)"], "goal_after": [], "proof_term_before": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_ind x (fun vs0 ws0 : list word => L xs vs0 -> L (x :: xs) ws0)\n   (fun H0 : L xs nil =>\n    let H1 : nil = nil -> L (x :: xs) nil :=\n      match H0 in (L _ l) return (l = nil -> L (x :: xs) nil) with\n      | L0 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : emb w0 xs)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_ind (emb w0 xs -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      | L1 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : L xs ws1)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_ind (L xs ws1 -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      end in\n    H1 eq_refl)\n   (fun (vs0 ws0 : list word) (w : word) (H0 : R x vs0 ws0)\n      (H1 : L xs vs0 -> L (x :: xs) ws0) (H2 : L xs (w :: vs0)) =>\n    let H3 : w :: vs0 = w :: vs0 -> L (x :: xs) ((x :: w) :: ws0) :=\n      match\n        H2 in (L _ l) return (l = w :: vs0 -> L (x :: xs) ((x :: w) :: ws0))\n      with\n      | L0 _ w0 ws1 x0 =>\n          (fun (w1 : word) (ws2 : list word) (H3 : emb w1 xs)\n             (H4 : w1 :: ws2 = w :: vs0) =>\n           (fun H5 : w1 :: ws2 = w :: vs0 =>\n            let H6 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H5 in\n            (let H7 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H5 in\n             (fun H8 : w1 = w =>\n              let H9 : w1 = w := H8 in\n              eq_ind_r\n                (fun w2 : word =>\n                 ws2 = vs0 -> emb w2 xs -> L (x :: xs) ((x :: w) :: ws0))\n                (fun H10 : ws2 = vs0 =>\n                 let H11 : ws2 = vs0 := H10 in\n                 eq_ind_r\n                   (fun _ : list word =>\n                    emb w xs -> L (x :: xs) ((x :: w) :: ws0))\n                   (fun H12 : emb w xs =>\n                    ?Goal@{w0:=w1; ws1:=ws2; H4:=H12; H3:=H8; H5:=H10}) H11)\n                H9) H7) H6) H4 H3) w0 ws1 x0\n      | L1 _ w0 ws1 x0 =>\n          (fun (w1 : word) (ws2 : list word) (H3 : L xs ws2)\n             (H4 : w1 :: ws2 = w :: vs0) =>\n           (fun H5 : w1 :: ws2 = w :: vs0 =>\n            let H6 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H5 in\n            (let H7 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H5 in\n             (fun H8 : w1 = w =>\n              let H9 : w1 = w := H8 in\n              eq_ind_r\n                (fun _ : word =>\n                 ws2 = vs0 -> L xs ws2 -> L (x :: xs) ((x :: w) :: ws0))\n                (fun H10 : ws2 = vs0 =>\n                 let H11 : ws2 = vs0 := H10 in\n                 eq_ind_r\n                   (fun l : list word =>\n                    L xs l -> L (x :: xs) ((x :: w) :: ws0))\n                   (fun H12 : L xs vs0 =>\n                    ?Goal0@{w0:=w1; ws1:=ws2; H4:=H12; H3:=H8; H5:=H10}) H11)\n                H9) H7) H6) H4 H3) w0 ws1 x0\n      end in\n    H3 eq_refl) vs ws H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "lemma2", "text": "Theorem lemma2 :\n forall (vs ws : list word) (a : letter), R a vs ws -> good vs -> good ws.\nsimple induction 1; auto.\ninversion 3; eauto.\nDefined.\n", "definition": "\n forall (vs ws : list word) (a : letter), R a vs ws -> good vs -> good ws.", "proof": "\nsimple induction 1; auto.\ninversion 3; eauto.\n", "def_ranges": [91, 0, 92, 74], "proof_ranges": [93, 0, 95, 8], "proof_steps": [{"text": "simple induction 1; auto.", "goal_before": ["forall (vs ws : list word) (a : letter), R a vs ws -> good vs -> good ws"], "goal_after": ["forall (vs0 ws0 : list word) (w : word),\nR a vs0 ws0 ->\n(good vs0 -> good ws0) -> good (w :: vs0) -> good ((a :: w) :: ws0)"], "proof_term_before": [], "proof_term_after": ["(fun (vs ws : list word) (a : letter) (H : R a vs ws) =>\n R_ind a (fun vs0 ws0 : list word => good vs0 -> good ws0)\n   (fun H0 : good nil => H0) ?Goal vs ws H)"]}, {"text": "inversion 3; eauto.", "goal_before": ["forall (vs0 ws0 : list word) (w : word),\nR a vs0 ws0 ->\n(good vs0 -> good ws0) -> good (w :: vs0) -> good ((a :: w) :: ws0)"], "goal_after": ["good ((a :: w) :: ws0)", "good ((a :: w) :: ws0)"], "proof_term_before": ["(fun (vs ws : list word) (a : letter) (H : R a vs ws) =>\n R_ind a (fun vs0 ws0 : list word => good vs0 -> good ws0)\n   (fun H0 : good nil => H0) ?Goal vs ws H)"], "proof_term_after": ["(fun (vs ws : list word) (a : letter) (H : R a vs ws) =>\n R_ind a (fun vs0 ws0 : list word => good vs0 -> good ws0)\n   (fun H0 : good nil => H0)\n   (fun (vs0 ws0 : list word) (w : word) (H0 : R a vs0 ws0)\n      (H1 : good vs0 -> good ws0) (H2 : good (w :: vs0)) =>\n    let H3 : w :: vs0 = w :: vs0 -> good ((a :: w) :: ws0) :=\n      match\n        H2 in (good l) return (l = w :: vs0 -> good ((a :: w) :: ws0))\n      with\n      | good0 ws1 w0 x =>\n          (fun (ws2 : list word) (w1 : word) (H3 : L w1 ws2)\n             (H4 : w1 :: ws2 = w :: vs0) =>\n           (fun H5 : w1 :: ws2 = w :: vs0 =>\n            let H6 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H5 in\n            (let H7 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H5 in\n             (fun H8 : w1 = w =>\n              let H9 : w1 = w := H8 in\n              eq_ind_r\n                (fun w2 : word =>\n                 ws2 = vs0 -> L w2 ws2 -> good ((a :: w) :: ws0))\n                (fun H10 : ws2 = vs0 =>\n                 let H11 : ws2 = vs0 := H10 in\n                 eq_ind_r\n                   (fun l : list word => L w l -> good ((a :: w) :: ws0))\n                   (fun H12 : L w vs0 =>\n                    ?Goal@{ws1:=ws2; w0:=w1; H4:=H12; H3:=H8; H5:=H10}) H11)\n                H9) H7) H6) H4 H3) ws1 w0 x\n      | good1 ws1 w0 x =>\n          (fun (ws2 : list word) (w1 : word) (H3 : good ws2)\n             (H4 : w1 :: ws2 = w :: vs0) =>\n           (fun H5 : w1 :: ws2 = w :: vs0 =>\n            let H6 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H5 in\n            (let H7 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H5 in\n             (fun H8 : w1 = w =>\n              let H9 : w1 = w := H8 in\n              eq_ind_r\n                (fun _ : word =>\n                 ws2 = vs0 -> good ws2 -> good ((a :: w) :: ws0))\n                (fun H10 : ws2 = vs0 =>\n                 let H11 : ws2 = vs0 := H10 in\n                 eq_ind_r\n                   (fun l : list word => good l -> good ((a :: w) :: ws0))\n                   (fun H12 : good vs0 =>\n                    ?Goal0@{ws1:=ws2; w0:=w1; H4:=H12; H3:=H8; H5:=H10}) H11)\n                H9) H7) H6) H4 H3) ws1 w0 x\n      end in\n    H3 eq_refl) vs ws H)"]}, {"text": "Qed.", "goal_before": ["good ((a :: w) :: ws0)", "good ((a :: w) :: ws0)"], "goal_after": [], "proof_term_before": ["(fun (vs ws : list word) (a : letter) (H : R a vs ws) =>\n R_ind a (fun vs0 ws0 : list word => good vs0 -> good ws0)\n   (fun H0 : good nil => H0)\n   (fun (vs0 ws0 : list word) (w : word) (H0 : R a vs0 ws0)\n      (H1 : good vs0 -> good ws0) (H2 : good (w :: vs0)) =>\n    let H3 : w :: vs0 = w :: vs0 -> good ((a :: w) :: ws0) :=\n      match\n        H2 in (good l) return (l = w :: vs0 -> good ((a :: w) :: ws0))\n      with\n      | good0 ws1 w0 x =>\n          (fun (ws2 : list word) (w1 : word) (H3 : L w1 ws2)\n             (H4 : w1 :: ws2 = w :: vs0) =>\n           (fun H5 : w1 :: ws2 = w :: vs0 =>\n            let H6 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H5 in\n            (let H7 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H5 in\n             (fun H8 : w1 = w =>\n              let H9 : w1 = w := H8 in\n              eq_ind_r\n                (fun w2 : word =>\n                 ws2 = vs0 -> L w2 ws2 -> good ((a :: w) :: ws0))\n                (fun H10 : ws2 = vs0 =>\n                 let H11 : ws2 = vs0 := H10 in\n                 eq_ind_r\n                   (fun l : list word => L w l -> good ((a :: w) :: ws0))\n                   (fun H12 : L w vs0 =>\n                    ?Goal@{ws1:=ws2; w0:=w1; H4:=H12; H3:=H8; H5:=H10}) H11)\n                H9) H7) H6) H4 H3) ws1 w0 x\n      | good1 ws1 w0 x =>\n          (fun (ws2 : list word) (w1 : word) (H3 : good ws2)\n             (H4 : w1 :: ws2 = w :: vs0) =>\n           (fun H5 : w1 :: ws2 = w :: vs0 =>\n            let H6 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H5 in\n            (let H7 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H5 in\n             (fun H8 : w1 = w =>\n              let H9 : w1 = w := H8 in\n              eq_ind_r\n                (fun _ : word =>\n                 ws2 = vs0 -> good ws2 -> good ((a :: w) :: ws0))\n                (fun H10 : ws2 = vs0 =>\n                 let H11 : ws2 = vs0 := H10 in\n                 eq_ind_r\n                   (fun l : list word => good l -> good ((a :: w) :: ws0))\n                   (fun H12 : good vs0 =>\n                    ?Goal0@{ws1:=ws2; w0:=w1; H4:=H12; H3:=H8; H5:=H10}) H11)\n                H9) H7) H6) H4 H3) ws1 w0 x\n      end in\n    H3 eq_refl) vs ws H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "lemma3'", "text": "Theorem lemma3' :\n forall (vs ws : list word) (x : letter) (xs : word),\n T x vs ws -> L xs vs -> L (x :: xs) ws.\nsimple induction 1; auto; inversion 3; auto.\nQed.\n", "definition": "\n forall (vs ws : list word) (x : letter) (xs : word),\n T x vs ws -> L xs vs -> L (x :: xs) ws.", "proof": "\nsimple induction 1; auto; inversion 3; auto.\n", "def_ranges": [98, 0, 100, 40], "proof_ranges": [101, 0, 102, 4], "proof_steps": [{"text": "simple induction 1; auto; inversion 3; auto.", "goal_before": ["forall (vs ws : list word) (x : letter) (xs : word),\nT x vs ws -> L xs vs -> L (x :: xs) ws"], "goal_after": ["forall (vs ws : list word) (x : letter) (xs : word),\nT x vs ws -> L xs vs -> L (x :: xs) ws"], "proof_term_before": [], "proof_term_after": ["?Goal"]}, {"text": "Qed.", "goal_before": ["forall (vs ws : list word) (x : letter) (xs : word),\nT x vs ws -> L xs vs -> L (x :: xs) ws"], "goal_after": [], "proof_term_before": ["?Goal"], "proof_term_after": []}], "ends_qed": true}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "lemma3", "text": "Theorem lemma3 :\n forall (ws zs : list word) (a : letter), T a ws zs -> good ws -> good zs.\nsimple induction 1; auto; inversion 3; eauto.\nDefined.\n", "definition": "\n forall (ws zs : list word) (a : letter), T a ws zs -> good ws -> good zs.", "proof": "\nsimple induction 1; auto; inversion 3; eauto.\n", "def_ranges": [105, 0, 106, 74], "proof_ranges": [107, 0, 108, 8], "proof_steps": [{"text": "simple induction 1; auto; inversion 3; eauto.", "goal_before": ["forall (ws zs : list word) (a : letter), T a ws zs -> good ws -> good zs"], "goal_after": ["forall (ws zs : list word) (a : letter), T a ws zs -> good ws -> good zs"], "proof_term_before": [], "proof_term_after": ["?Goal"]}, {"text": "Qed.", "goal_before": ["forall (ws zs : list word) (a : letter), T a ws zs -> good ws -> good zs"], "goal_after": [], "proof_term_before": ["?Goal"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "lemma4", "text": "Theorem lemma4 :\n forall (ws zs : list word) (a : letter), R a ws zs -> ws <> nil -> T a ws zs.\nsimple induction 1.\ntauto.\nintro.\ncase vs.\ninversion 1.\nintros.\ncase a.\napply (T0 A B w nil); auto.\napply (T0 B A w nil); auto.\nauto.\nDefined.\n", "definition": "\n forall (ws zs : list word) (a : letter), R a ws zs -> ws <> nil -> T a ws zs.", "proof": "\nsimple induction 1.\ntauto.\nintro.\ncase vs.\ninversion 1.\nintros.\ncase a.\napply (T0 A B w nil); auto.\napply (T0 B A w nil); auto.\nauto.\n", "def_ranges": [111, 0, 112, 78], "proof_ranges": [113, 0, 123, 8], "proof_steps": [{"text": "simple induction 1.", "goal_before": ["forall (ws zs : list word) (a : letter), R a ws zs -> ws <> nil -> T a ws zs"], "goal_after": ["nil <> nil -> T a nil nil", "forall (vs ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "proof_term_before": [], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0) \n   ?Goal ?Goal0 ws zs H)"]}, {"text": "tauto.", "goal_before": ["nil <> nil -> T a nil nil", "forall (vs ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "goal_after": ["forall (vs ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0) \n   ?Goal ?Goal0 ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1) \n   ?Goal ws zs H)"]}, {"text": "intro.", "goal_before": ["forall (vs ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "goal_after": ["forall (ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1) \n   ?Goal ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word => ?Goal) ws zs H)"]}, {"text": "case vs.", "goal_before": ["forall (ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "goal_after": ["forall (ws0 : list word) (w : word),\nR a nil ws0 ->\n(nil <> nil -> T a nil ws0) ->\nw :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word => ?Goal) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil => ?Goal\n    | a0 :: l => ?Goal0 a0 l\n    end) ws zs H)"]}, {"text": "inversion 1.", "goal_before": ["forall (ws0 : list word) (w : word),\nR a nil ws0 ->\n(nil <> nil -> T a nil ws0) ->\nw :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["(nil <> nil -> T a nil nil) ->\nw :: nil <> nil -> T a (w :: nil) ((a :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil => ?Goal\n    | a0 :: l => ?Goal0 a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 ?Goal0@{H2:=H4} ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "intros.", "goal_before": ["(nil <> nil -> T a nil nil) ->\nw :: nil <> nil -> T a (w :: nil) ((a :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["T a (w :: nil) ((a :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 ?Goal0@{H2:=H4} ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H6 : nil <> nil -> T a nil nil) (H7 : w :: nil <> nil)\n                  => ?Goal0@{H2:=H4; H1:=H6; H3:=H7}) ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "case a.", "goal_before": ["T a (w :: nil) ((a :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["T A (w :: nil) ((A :: w) :: nil)", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H6 : nil <> nil -> T a nil nil) (H7 : w :: nil <> nil)\n                  => ?Goal0@{H2:=H4; H1:=H6; H3:=H7}) ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H6 : nil <> nil -> T a nil nil) (H7 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A => ?Goal0@{H2:=H4; H1:=H6; H3:=H7}\n                  | B => ?Goal1@{H2:=H4; H1:=H6; H3:=H7}\n                  end) ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "apply (T0 A B w nil); auto.", "goal_before": ["T A (w :: nil) ((A :: w) :: nil)", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H6 : nil <> nil -> T a nil nil) (H7 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A => ?Goal0@{H2:=H4; H1:=H6; H3:=H7}\n                  | B => ?Goal1@{H2:=H4; H1:=H6; H3:=H7}\n                  end) ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H6 : nil <> nil -> T a nil nil) (H7 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H2:=H4; H1:=H6; H3:=H7}\n                        ?Goal2@{H2:=H4; H1:=H6; H3:=H7}\n                  | B => ?Goal0@{H2:=H4; H1:=H6; H3:=H7}\n                  end) ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "apply (T0 B A w nil); auto.", "goal_before": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H6 : nil <> nil -> T a nil nil) (H7 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H2:=H4; H1:=H6; H3:=H7}\n                        ?Goal2@{H2:=H4; H1:=H6; H3:=H7}\n                  | B => ?Goal0@{H2:=H4; H1:=H6; H3:=H7}\n                  end) ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H6 : nil <> nil -> T a nil nil) (H7 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H2:=H4; H1:=H6; H3:=H7}\n                        ?Goal2@{H2:=H4; H1:=H6; H3:=H7}\n                  | B => ?Goal0@{H2:=H4; H1:=H6; H3:=H7}\n                  end) ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "auto.", "goal_before": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H6 : nil <> nil -> T a nil nil) (H7 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H2:=H4; H1:=H6; H3:=H7}\n                        ?Goal2@{H2:=H4; H1:=H6; H3:=H7}\n                  | B => ?Goal0@{H2:=H4; H1:=H6; H3:=H7}\n                  end) ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H6 : nil <> nil -> T a nil nil) (H7 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H2:=H4; H1:=H6; H3:=H7}\n                        ?Goal2@{H2:=H4; H1:=H6; H3:=H7}\n                  | B => ?Goal0@{H2:=H4; H1:=H6; H3:=H7}\n                  end) ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "Qed.", "goal_before": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": [], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_ind a (fun ws0 zs0 : list word => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_ind (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (H0 : R a nil ws0) =>\n        let H1 :\n          nil = nil ->\n          ws0 = ws0 ->\n          (nil <> nil -> T a nil ws0) ->\n          w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0) :=\n          match\n            H0 in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H1 : nil = nil) (H2 : nil = ws0) =>\n              (fun (_ : nil = nil) (H4 : nil = ws0) =>\n               let H5 : nil = ws0 := H4 in\n               eq_ind nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H6 : nil <> nil -> T a nil nil) (H7 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H2:=H4; H1:=H6; H3:=H7}\n                        ?Goal2@{H2:=H4; H1:=H6; H3:=H7}\n                  | B => ?Goal0@{H2:=H4; H1:=H6; H3:=H7}\n                  end) ws0 H5) H1 H2\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H1 : R a vs1 ws2) (H2 : w1 :: vs1 = nil)\n                 (H3 : (a :: w1) :: ws2 = ws0) =>\n               (fun H4 : w1 :: vs1 = nil =>\n                let H5 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H4 in\n                False_ind\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H5)\n                 H2 H3 H1) vs0 ws1 w0 x\n          end in\n        H1 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "letter_neq", "text": "Theorem letter_neq : forall a b c : letter, a <> b -> c <> a -> c = b.\nintros a b c; case a; case b; case c; tauto.\nQed.\n", "definition": " forall a b c : letter, a <> b -> c <> a -> c = b.", "proof": "\nintros a b c; case a; case b; case c; tauto.\n", "def_ranges": [126, 0, 126, 70], "proof_ranges": [127, 0, 128, 4], "proof_steps": [{"text": "intros a b c; case a; case b; case c; tauto.", "goal_before": ["forall a b c : letter, a <> b -> c <> a -> c = b"], "goal_after": [], "proof_term_before": [], "proof_term_after": ["(fun a b c : letter =>\n match a as l return (l <> b -> c <> l -> c = b) with\n | A =>\n     match b as l return (A <> l -> c <> A -> c = l) with\n     | A =>\n         match c as l return (A <> A -> l <> A -> l = A) with\n         | A =>\n             fun H H0 : A <> A =>\n             let H1 : False := let H1 : A = A := eq_refl in H H1 in\n             (fun _ : False =>\n              let H3 : False := let H3 : A = A := eq_refl in H0 H3 in\n              (fun _ : False => eq_refl) H3) H1\n         | B =>\n             fun (H : A <> A) (_ : B <> A) =>\n             let H1 : False := let H1 : A = A := eq_refl in H H1 in\n             (fun H2 : False => False_ind (B = A) H2) H1\n         end\n     | B =>\n         match c as l return (A <> B -> l <> A -> l = B) with\n         | A =>\n             fun (_ : A <> B) (H0 : A <> A) =>\n             let H1 : False := let H1 : A = A := eq_refl in H0 H1 in\n             (fun H2 : False => False_ind (A = B) H2) H1\n         | B => fun (_ : A <> B) (_ : B <> A) => eq_refl\n         end\n     end\n | B =>\n     match b as l return (B <> l -> c <> B -> c = l) with\n     | A =>\n         match c as l return (B <> A -> l <> B -> l = A) with\n         | A => fun (_ : B <> A) (_ : A <> B) => eq_refl\n         | B =>\n             fun (_ : B <> A) (H0 : B <> B) =>\n             let H1 : False := let H1 : B = B := eq_refl in H0 H1 in\n             (fun H2 : False => False_ind (B = A) H2) H1\n         end\n     | B =>\n         match c as l return (B <> B -> l <> B -> l = B) with\n         | A =>\n             fun (H : B <> B) (_ : A <> B) =>\n             let H1 : False := let H1 : B = B := eq_refl in H H1 in\n             (fun H2 : False => False_ind (A = B) H2) H1\n         | B =>\n             fun H H0 : B <> B =>\n             let H1 : False := let H1 : B = B := eq_refl in H H1 in\n             (fun _ : False =>\n              let H3 : False := let H3 : B = B := eq_refl in H0 H3 in\n              (fun _ : False => eq_refl) H3) H1\n         end\n     end\n end)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun a b c : letter =>\n match a as l return (l <> b -> c <> l -> c = b) with\n | A =>\n     match b as l return (A <> l -> c <> A -> c = l) with\n     | A =>\n         match c as l return (A <> A -> l <> A -> l = A) with\n         | A =>\n             fun H H0 : A <> A =>\n             let H1 : False := let H1 : A = A := eq_refl in H H1 in\n             (fun _ : False =>\n              let H3 : False := let H3 : A = A := eq_refl in H0 H3 in\n              (fun _ : False => eq_refl) H3) H1\n         | B =>\n             fun (H : A <> A) (_ : B <> A) =>\n             let H1 : False := let H1 : A = A := eq_refl in H H1 in\n             (fun H2 : False => False_ind (B = A) H2) H1\n         end\n     | B =>\n         match c as l return (A <> B -> l <> A -> l = B) with\n         | A =>\n             fun (_ : A <> B) (H0 : A <> A) =>\n             let H1 : False := let H1 : A = A := eq_refl in H0 H1 in\n             (fun H2 : False => False_ind (A = B) H2) H1\n         | B => fun (_ : A <> B) (_ : B <> A) => eq_refl\n         end\n     end\n | B =>\n     match b as l return (B <> l -> c <> B -> c = l) with\n     | A =>\n         match c as l return (B <> A -> l <> B -> l = A) with\n         | A => fun (_ : B <> A) (_ : A <> B) => eq_refl\n         | B =>\n             fun (_ : B <> A) (H0 : B <> B) =>\n             let H1 : False := let H1 : B = B := eq_refl in H0 H1 in\n             (fun H2 : False => False_ind (B = A) H2) H1\n         end\n     | B =>\n         match c as l return (B <> B -> l <> B -> l = B) with\n         | A =>\n             fun (H : B <> B) (_ : A <> B) =>\n             let H1 : False := let H1 : B = B := eq_refl in H H1 in\n             (fun H2 : False => False_ind (A = B) H2) H1\n         | B =>\n             fun H H0 : B <> B =>\n             let H1 : False := let H1 : B = B := eq_refl in H H1 in\n             (fun _ : False =>\n              let H3 : False := let H3 : B = B := eq_refl in H0 H3 in\n              (fun _ : False => eq_refl) H3) H1\n         end\n     end\n end)"], "proof_term_after": []}], "ends_qed": true}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "letter_eq_dec", "text": "Theorem letter_eq_dec : forall a b : letter, {a = b} + {a <> b}.\nintros.\ndecide equality.\nDefined.\n", "definition": " forall a b : letter, {a = b} + {a <> b}.", "proof": "\nintros.\ndecide equality.\n", "def_ranges": [130, 0, 130, 64], "proof_ranges": [131, 0, 133, 8], "proof_steps": [{"text": "intros.", "goal_before": ["forall a b : letter, {a = b} + {a <> b}"], "goal_after": ["{a = b} + {a <> b}"], "proof_term_before": [], "proof_term_after": ["(fun a b : letter => ?Goal)"]}, {"text": "decide equality.", "goal_before": ["{a = b} + {a <> b}"], "goal_after": [], "proof_term_before": ["(fun a b : letter => ?Goal)"], "proof_term_after": ["(fun a b : letter =>\n letter_rec (fun a0 : letter => forall x : letter, {a0 = x} + {a0 <> x})\n   (fun x : letter =>\n    match x as l return ({A = l} + {A <> l}) with\n    | A => left eq_refl\n    | B =>\n        right\n          ((fun H : A = B =>\n            let H0 : False :=\n              eq_ind A\n                (fun e : letter => match e with\n                                   | A => True\n                                   | B => False\n                                   end) I B H in\n            False_ind False H0)\n           :\n           A <> B)\n    end)\n   (fun x : letter =>\n    match x as l return ({B = l} + {B <> l}) with\n    | A =>\n        right\n          ((fun H : B = A =>\n            let H0 : False :=\n              eq_ind B\n                (fun e : letter => match e with\n                                   | A => False\n                                   | B => True\n                                   end) I A H in\n            False_ind False H0)\n           :\n           B <> A)\n    | B => left eq_refl\n    end) a b)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun a b : letter =>\n letter_rec (fun a0 : letter => forall x : letter, {a0 = x} + {a0 <> x})\n   (fun x : letter =>\n    match x as l return ({A = l} + {A <> l}) with\n    | A => left eq_refl\n    | B =>\n        right\n          ((fun H : A = B =>\n            let H0 : False :=\n              eq_ind A\n                (fun e : letter => match e with\n                                   | A => True\n                                   | B => False\n                                   end) I B H in\n            False_ind False H0)\n           :\n           A <> B)\n    end)\n   (fun x : letter =>\n    match x as l return ({B = l} + {B <> l}) with\n    | A =>\n        right\n          ((fun H : B = A =>\n            let H0 : False :=\n              eq_ind B\n                (fun e : letter => match e with\n                                   | A => False\n                                   | B => True\n                                   end) I A H in\n            False_ind False H0)\n           :\n           B <> A)\n    | B => left eq_refl\n    end) a b)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "prop2", "text": "Theorem prop2 :\n forall (a b : letter) (xs : list word),\n a <> b ->\n bar xs ->\n forall ys : list word,\n bar ys -> forall zs : list word, T a xs zs -> T b ys zs -> bar zs.\nintros a b xs neq.\nsimple induction 1.\neauto.\nsimple induction 3.\neauto.\nintros.\napply bar2.\nintro.\ncase w.\napply prop1.\nintros.\nelim (letter_eq_dec l a).\nintro; rewrite a0; eauto.\nintro; rewrite (letter_neq a b l neq b2); eauto.\nDefined.\n", "definition": "\n forall (a b : letter) (xs : list word),\n a <> b ->\n bar xs ->\n forall ys : list word,\n bar ys -> forall zs : list word, T a xs zs -> T b ys zs -> bar zs.", "proof": "\nintros a b xs neq.\nsimple induction 1.\neauto.\nsimple induction 3.\neauto.\nintros.\napply bar2.\nintro.\ncase w.\napply prop1.\nintros.\nelim (letter_eq_dec l a).\nintro; rewrite a0; eauto.\nintro; rewrite (letter_neq a b l neq b2); eauto.\n", "def_ranges": [135, 0, 140, 67], "proof_ranges": [141, 0, 155, 8], "proof_steps": [{"text": "intros a b xs neq.", "goal_before": ["forall (a b : letter) (xs : list word),\na <> b ->\nbar xs ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a xs zs -> T b ys zs -> bar zs"], "goal_after": ["bar xs ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a xs zs -> T b ys zs -> bar zs"], "proof_term_before": [], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) => ?Goal)"]}, {"text": "simple induction 1.", "goal_before": ["bar xs ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a xs zs -> T b ys zs -> bar zs"], "goal_after": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) => ?Goal)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"]}, {"text": "eauto.", "goal_before": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"]}, {"text": "simple induction 3.", "goal_before": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"]}, {"text": "eauto.", "goal_before": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"]}, {"text": "intros.", "goal_before": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) => ?Goal0) ?Goal xs H)"]}, {"text": "apply bar2.", "goal_before": ["bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["forall w : word, bar (w :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) => ?Goal0) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) => bar2 zs ?Goal0) ?Goal xs H)"]}, {"text": "intro.", "goal_before": ["forall w : word, bar (w :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar (w :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) => bar2 zs ?Goal0) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) => bar2 zs (fun w : word => ?Goal0)) \n   ?Goal xs H)"]}, {"text": "case w.", "goal_before": ["bar (w :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (l : letter) (l0 : list letter), bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) => bar2 zs (fun w : word => ?Goal0)) \n   ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => ?Goal0\n       | a0 :: l => ?Goal1 a0 l\n       end)) ?Goal xs H)"]}, {"text": "apply prop1.", "goal_before": ["bar (nil :: zs)", "forall (l : letter) (l0 : list letter), bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["forall (l : letter) (l0 : list letter), bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => ?Goal0\n       | a0 :: l => ?Goal1 a0 l\n       end)) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => prop1 zs\n       | a0 :: l => ?Goal0 a0 l\n       end)) ?Goal xs H)"]}, {"text": "intros.", "goal_before": ["forall (l : letter) (l0 : list letter), bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => prop1 zs\n       | a0 :: l => ?Goal0 a0 l\n       end)) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => prop1 zs\n       | a0 :: l =>\n           (fun (l0 : letter) (l1 : list letter) => ?Goal0@{l:=l0; l0:=l1})\n             a0 l\n       end)) ?Goal xs H)"]}, {"text": "elim (letter_eq_dec l a).", "goal_before": ["bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["l = a -> bar ((l :: l0) :: zs)", "l <> a -> bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => prop1 zs\n       | a0 :: l =>\n           (fun (l0 : letter) (l1 : list letter) => ?Goal0@{l:=l0; l0:=l1})\n             a0 l\n       end)) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => prop1 zs\n       | a0 :: l =>\n           (fun (l0 : letter) (l1 : list letter) =>\n            sumbool_rec\n              (fun _ : {l0 = a} + {l0 <> a} => bar ((l0 :: l1) :: zs))\n              ?Goal0@{l:=l0; l0:=l1} ?Goal1@{l:=l0; l0:=l1}\n              (letter_eq_dec l0 a)) a0 l\n       end)) ?Goal xs H)"]}, {"text": "intro; rewrite a0; eauto.", "goal_before": ["l = a -> bar ((l :: l0) :: zs)", "l <> a -> bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar ((a :: l0) :: zs)", "l <> a -> bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => prop1 zs\n       | a0 :: l =>\n           (fun (l0 : letter) (l1 : list letter) =>\n            sumbool_rec\n              (fun _ : {l0 = a} + {l0 <> a} => bar ((l0 :: l1) :: zs))\n              ?Goal0@{l:=l0; l0:=l1} ?Goal1@{l:=l0; l0:=l1}\n              (letter_eq_dec l0 a)) a0 l\n       end)) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => prop1 zs\n       | a0 :: l =>\n           (fun (l0 : letter) (l1 : list letter) =>\n            sumbool_rec\n              (fun _ : {l0 = a} + {l0 <> a} => bar ((l0 :: l1) :: zs))\n              (fun a1 : l0 = a =>\n               eq_rec_r (fun l2 : letter => bar ((l2 :: l1) :: zs))\n                 ?Goal1@{l:=l0; l0:=l1; a0:=a1} a1) \n              ?Goal0@{l:=l0; l0:=l1} (letter_eq_dec l0 a)) a0 l\n       end)) ?Goal xs H)"]}, {"text": "intro; rewrite (letter_neq a b l neq b2); eauto.", "goal_before": ["bar ((a :: l0) :: zs)", "l <> a -> bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar ((a :: l0) :: zs)", "l <> a -> bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => prop1 zs\n       | a0 :: l =>\n           (fun (l0 : letter) (l1 : list letter) =>\n            sumbool_rec\n              (fun _ : {l0 = a} + {l0 <> a} => bar ((l0 :: l1) :: zs))\n              (fun a1 : l0 = a =>\n               eq_rec_r (fun l2 : letter => bar ((l2 :: l1) :: zs))\n                 ?Goal1@{l:=l0; l0:=l1; a0:=a1} a1) \n              ?Goal0@{l:=l0; l0:=l1} (letter_eq_dec l0 a)) a0 l\n       end)) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => prop1 zs\n       | a0 :: l =>\n           (fun (l0 : letter) (l1 : list letter) =>\n            sumbool_rec\n              (fun _ : {l0 = a} + {l0 <> a} => bar ((l0 :: l1) :: zs))\n              (fun a1 : l0 = a =>\n               eq_rec_r (fun l2 : letter => bar ((l2 :: l1) :: zs))\n                 ?Goal1@{l:=l0; l0:=l1; a0:=a1} a1) \n              ?Goal0@{l:=l0; l0:=l1} (letter_eq_dec l0 a)) a0 l\n       end)) ?Goal xs H)"]}, {"text": "Qed.", "goal_before": ["bar ((a :: l0) :: zs)", "l <> a -> bar ((l :: l0) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": [], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) \n      (H2 : T b ys zs) =>\n    bar2 zs\n      (fun w : word =>\n       match w as l return (bar (l :: zs)) with\n       | nil => prop1 zs\n       | a0 :: l =>\n           (fun (l0 : letter) (l1 : list letter) =>\n            sumbool_rec\n              (fun _ : {l0 = a} + {l0 <> a} => bar ((l0 :: l1) :: zs))\n              (fun a1 : l0 = a =>\n               eq_rec_r (fun l2 : letter => bar ((l2 :: l1) :: zs))\n                 ?Goal1@{l:=l0; l0:=l1; a0:=a1} a1) \n              ?Goal0@{l:=l0; l0:=l1} (letter_eq_dec l0 a)) a0 l\n       end)) ?Goal xs H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "prop3", "text": "Theorem prop3 :\n forall (a : letter) (xs : list word),\n bar xs -> forall zs : list word, xs <> nil -> R a xs zs -> bar zs.\nsimple induction 1.\neauto.\nintros.\napply bar2.\nsimple induction w.\nauto.\nintros.\nelim (letter_eq_dec a0 a).\nintro. \nrewrite a1; eauto.\nintro.\napply (prop2 a0 a (l :: zs) b0 H3 ws); eauto.\nDefined.\n", "definition": "\n forall (a : letter) (xs : list word),\n bar xs -> forall zs : list word, xs <> nil -> R a xs zs -> bar zs.", "proof": "\nsimple induction 1.\neauto.\nintros.\napply bar2.\nsimple induction w.\nauto.\nintros.\nelim (letter_eq_dec a0 a).\nintro. \nrewrite a1; eauto.\nintro.\napply (prop2 a0 a (l :: zs) b0 H3 ws); eauto.\n", "def_ranges": [158, 0, 160, 67], "proof_ranges": [161, 0, 173, 8], "proof_steps": [{"text": "simple induction 1.", "goal_before": ["forall (a : letter) (xs : list word),\nbar xs -> forall zs : list word, xs <> nil -> R a xs zs -> bar zs"], "goal_after": ["forall ws : list word,\ngood ws -> forall zs : list word, ws <> nil -> R a ws zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": [], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs) \n   ?Goal ?Goal0 xs H)"]}, {"text": "eauto.", "goal_before": ["forall ws : list word,\ngood ws -> forall zs : list word, ws <> nil -> R a ws zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["forall ws : list word,\ngood ws -> forall zs : list word, ws <> nil -> R a ws zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs) \n   ?Goal ?Goal0 xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs) \n   ?Goal ?Goal0 xs H)"]}, {"text": "intros.", "goal_before": ["forall ws : list word,\ngood ws -> forall zs : list word, ws <> nil -> R a ws zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs) \n   ?Goal ?Goal0 xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) => ?Goal0) \n   ?Goal xs H)"]}, {"text": "apply bar2.", "goal_before": ["bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["forall w : word, bar (w :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) => ?Goal0) \n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) => bar2 zs ?Goal0) \n   ?Goal xs H)"]}, {"text": "simple induction w.", "goal_before": ["forall w : word, bar (w :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) => bar2 zs ?Goal0) \n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "auto.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "intros.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "elim (letter_eq_dec a0 a).", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "intro.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "rewrite a1; eauto.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "intro.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "apply (prop2 a0 a (l :: zs) b0 H3 ws); eauto.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "Qed.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": [], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "higman", "text": "Theorem higman : bar nil.\napply bar2.\nsimple induction w; eauto.\nDefined.\n", "definition": " bar nil.", "proof": "\napply bar2.\nsimple induction w; eauto.\n", "def_ranges": [176, 0, 176, 25], "proof_ranges": [177, 0, 179, 8], "proof_steps": [{"text": "apply bar2.", "goal_before": ["bar nil"], "goal_after": ["forall w : word, bar (w :: nil)"], "proof_term_before": [], "proof_term_after": ["(bar2 nil ?Goal)"]}, {"text": "simple induction w; eauto.", "goal_before": ["forall w : word, bar (w :: nil)"], "goal_after": ["bar (nil :: nil)", "forall (a : letter) (l : list letter),\nbar (l :: nil) -> bar ((a :: l) :: nil)"], "proof_term_before": ["(bar2 nil ?Goal)"], "proof_term_after": ["(bar2 nil\n   (fun w : word =>\n    list_rec (fun w0 : list letter => bar (w0 :: nil)) ?Goal ?Goal0 w))"]}, {"text": "Qed.", "goal_before": ["bar (nil :: nil)", "forall (a : letter) (l : list letter),\nbar (l :: nil) -> bar ((a :: l) :: nil)"], "goal_after": [], "proof_term_before": ["(bar2 nil\n   (fun w : word =>\n    list_rec (fun w0 : list letter => bar (w0 :: nil)) ?Goal ?Goal0 w))"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "good_prefix_lemma", "text": "Theorem good_prefix_lemma :\n forall (ws : list word) (f : nat -> word),\n bar ws ->\n is_prefix word ws f -> {vs : list word | is_prefix word vs f /\\ good vs}.\nsimple induction 1.\nintros.\nexists ws0; auto.\neauto.\nDefined.\n", "definition": "\n forall (ws : list word) (f : nat -> word),\n bar ws ->\n is_prefix word ws f -> {vs : list word | is_prefix word vs f /\\ good vs}.", "proof": "\nsimple induction 1.\nintros.\nexists ws0; auto.\neauto.\n", "def_ranges": [189, 0, 192, 74], "proof_ranges": [193, 0, 197, 8], "proof_steps": [{"text": "simple induction 1.", "goal_before": ["forall (ws : list word) (f : nat -> word),\nbar ws ->\nis_prefix word ws f -> {vs : list word | is_prefix word vs f /\\ good vs}"], "goal_after": ["forall ws0 : list word,\ngood ws0 ->\nis_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs}", "forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {vs : list word | is_prefix word vs f /\\ good vs}) ->\nis_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs}"], "proof_term_before": [], "proof_term_after": ["(fun (ws : list word) (f : nat -> word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs})\n   ?Goal ?Goal0 ws H)"]}, {"text": "intros.", "goal_before": ["forall ws0 : list word,\ngood ws0 ->\nis_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs}", "forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {vs : list word | is_prefix word vs f /\\ good vs}) ->\nis_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs}"], "goal_after": ["{vs : list word | is_prefix word vs f /\\ good vs}", "forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {vs : list word | is_prefix word vs f /\\ good vs}) ->\nis_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs}"], "proof_term_before": ["(fun (ws : list word) (f : nat -> word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs})\n   ?Goal ?Goal0 ws H)"], "proof_term_after": ["(fun (ws : list word) (f : nat -> word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs})\n   (fun (ws0 : list word) (g : good ws0) (H0 : is_prefix word ws0 f) =>\n    ?Goal0) ?Goal ws H)"]}, {"text": "exists ws0; auto.", "goal_before": ["{vs : list word | is_prefix word vs f /\\ good vs}", "forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {vs : list word | is_prefix word vs f /\\ good vs}) ->\nis_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs}"], "goal_after": ["forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {vs : list word | is_prefix word vs f /\\ good vs}) ->\nis_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs}"], "proof_term_before": ["(fun (ws : list word) (f : nat -> word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs})\n   (fun (ws0 : list word) (g : good ws0) (H0 : is_prefix word ws0 f) =>\n    ?Goal0) ?Goal ws H)"], "proof_term_after": ["(fun (ws : list word) (f : nat -> word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs})\n   (fun (ws0 : list word) (g : good ws0) (H0 : is_prefix word ws0 f) =>\n    exist (fun vs : list word => is_prefix word vs f /\\ good vs) ws0\n      (conj H0 g)) ?Goal ws H)"]}, {"text": "eauto.", "goal_before": ["forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {vs : list word | is_prefix word vs f /\\ good vs}) ->\nis_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs}"], "goal_after": ["forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {vs : list word | is_prefix word vs f /\\ good vs}) ->\nis_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs}"], "proof_term_before": ["(fun (ws : list word) (f : nat -> word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs})\n   (fun (ws0 : list word) (g : good ws0) (H0 : is_prefix word ws0 f) =>\n    exist (fun vs : list word => is_prefix word vs f /\\ good vs) ws0\n      (conj H0 g)) ?Goal ws H)"], "proof_term_after": ["(fun (ws : list word) (f : nat -> word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs})\n   (fun (ws0 : list word) (g : good ws0) (H0 : is_prefix word ws0 f) =>\n    exist (fun vs : list word => is_prefix word vs f /\\ good vs) ws0\n      (conj H0 g)) ?Goal ws H)"]}, {"text": "Qed.", "goal_before": ["forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {vs : list word | is_prefix word vs f /\\ good vs}) ->\nis_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs}"], "goal_after": [], "proof_term_before": ["(fun (ws : list word) (f : nat -> word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {vs : list word | is_prefix word vs f /\\ good vs})\n   (fun (ws0 : list word) (g : good ws0) (H0 : is_prefix word ws0 f) =>\n    exist (fun vs : list word => is_prefix word vs f /\\ good vs) ws0\n      (conj H0 g)) ?Goal ws H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman.v", "name": "good_prefix", "text": "Theorem good_prefix :\n forall f : nat -> word, {vs : list word | is_prefix word vs f /\\ good vs}.\neauto.\nDefined.\n", "definition": "\n forall f : nat -> word, {vs : list word | is_prefix word vs f /\\ good vs}.", "proof": "\neauto.\n", "def_ranges": [200, 0, 201, 75], "proof_ranges": [202, 0, 203, 8], "proof_steps": [{"text": "eauto.", "goal_before": ["forall f : nat -> word, {vs : list word | is_prefix word vs f /\\ good vs}"], "goal_after": ["forall f : nat -> word, {vs : list word | is_prefix word vs f /\\ good vs}"], "proof_term_before": [], "proof_term_after": ["?Goal"]}, {"text": "Qed.", "goal_before": ["forall f : nat -> word, {vs : list word | is_prefix word vs f /\\ good vs}"], "goal_after": [], "proof_term_before": ["?Goal"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "prop1", "text": "Theorem prop1 : forall ws : list word, bar (nil :: ws).\nauto.\nDefined.\n", "definition": " forall ws : list word, bar (nil :: ws).", "proof": "\nauto.\n", "def_ranges": [71, 0, 71, 55], "proof_ranges": [72, 0, 73, 8], "proof_steps": [{"text": "auto.", "goal_before": ["forall ws : list word, bar (nil :: ws)"], "goal_after": ["forall ws : list word, bar (nil :: ws)"], "proof_term_before": [], "proof_term_after": ["?Goal"]}, {"text": "Qed.", "goal_before": ["forall ws : list word, bar (nil :: ws)"], "goal_after": [], "proof_term_before": ["?Goal"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "lemma1", "text": "Theorem lemma1 :\n forall (ws : list word) (xs : word) (x : letter), L xs ws -> L (x :: xs) ws.\nsimple induction 1; auto.\nDefined.\n", "definition": "\n forall (ws : list word) (xs : word) (x : letter), L xs ws -> L (x :: xs) ws.", "proof": "\nsimple induction 1; auto.\n", "def_ranges": [76, 0, 77, 77], "proof_ranges": [78, 0, 79, 8], "proof_steps": [{"text": "simple induction 1; auto.", "goal_before": ["forall (ws : list word) (xs : word) (x : letter), L xs ws -> L (x :: xs) ws"], "goal_after": ["forall (w : word) (ws0 : list word), emb w xs -> L (x :: xs) (w :: ws0)", "forall (w : word) (ws0 : list word),\nL xs ws0 -> L (x :: xs) ws0 -> L (x :: xs) (w :: ws0)"], "proof_term_before": [], "proof_term_after": ["(fun (ws : list word) (xs : word) (x : letter) (H : L xs ws) =>\n L_rec xs (fun (ws0 : list word) (_ : L xs ws0) => L (x :: xs) ws0) \n   ?Goal ?Goal0 ws H)"]}, {"text": "Qed.", "goal_before": ["forall (w : word) (ws0 : list word), emb w xs -> L (x :: xs) (w :: ws0)", "forall (w : word) (ws0 : list word),\nL xs ws0 -> L (x :: xs) ws0 -> L (x :: xs) (w :: ws0)"], "goal_after": [], "proof_term_before": ["(fun (ws : list word) (xs : word) (x : letter) (H : L xs ws) =>\n L_rec xs (fun (ws0 : list word) (_ : L xs ws0) => L (x :: xs) ws0) \n   ?Goal ?Goal0 ws H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "lemma2'", "text": "Theorem lemma2' :\n forall (vs ws : list word) (x : letter) (xs : word),\n R x vs ws -> L xs vs -> L (x :: xs) ws.\nsimple induction 1.\ninversion 1.\ninversion 3; auto.\nDefined.\n", "definition": "\n forall (vs ws : list word) (x : letter) (xs : word),\n R x vs ws -> L xs vs -> L (x :: xs) ws.", "proof": "\nsimple induction 1.\ninversion 1.\ninversion 3; auto.\n", "def_ranges": [82, 0, 84, 40], "proof_ranges": [85, 0, 88, 8], "proof_steps": [{"text": "simple induction 1.", "goal_before": ["forall (vs ws : list word) (x : letter) (xs : word),\nR x vs ws -> L xs vs -> L (x :: xs) ws"], "goal_after": ["L xs nil -> L (x :: xs) nil", "forall (vs0 ws0 : list word) (w : word),\nR x vs0 ws0 ->\n(L xs vs0 -> L (x :: xs) ws0) ->\nL xs (w :: vs0) -> L (x :: xs) ((x :: w) :: ws0)"], "proof_term_before": [], "proof_term_after": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_rec x\n   (fun (vs0 ws0 : list word) (_ : R x vs0 ws0) =>\n    L xs vs0 -> L (x :: xs) ws0) ?Goal ?Goal0 vs ws H)"]}, {"text": "inversion 1.", "goal_before": ["L xs nil -> L (x :: xs) nil", "forall (vs0 ws0 : list word) (w : word),\nR x vs0 ws0 ->\n(L xs vs0 -> L (x :: xs) ws0) ->\nL xs (w :: vs0) -> L (x :: xs) ((x :: w) :: ws0)"], "goal_after": ["forall (vs0 ws0 : list word) (w : word),\nR x vs0 ws0 ->\n(L xs vs0 -> L (x :: xs) ws0) ->\nL xs (w :: vs0) -> L (x :: xs) ((x :: w) :: ws0)"], "proof_term_before": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_rec x\n   (fun (vs0 ws0 : list word) (_ : R x vs0 ws0) =>\n    L xs vs0 -> L (x :: xs) ws0) ?Goal ?Goal0 vs ws H)"], "proof_term_after": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_rec x\n   (fun (vs0 ws0 : list word) (_ : R x vs0 ws0) =>\n    L xs vs0 -> L (x :: xs) ws0)\n   (fun H0 : L xs nil =>\n    let H1 :=\n      match H0 in (L _ l) return (l = nil -> L (x :: xs) nil) with\n      | L0 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : emb w0 xs)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_rec (emb w0 xs -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      | L1 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : L xs ws1)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_rec (L xs ws1 -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      end in\n    H1 eq_refl) ?Goal vs ws H)"]}, {"text": "inversion 3; auto.", "goal_before": ["forall (vs0 ws0 : list word) (w : word),\nR x vs0 ws0 ->\n(L xs vs0 -> L (x :: xs) ws0) ->\nL xs (w :: vs0) -> L (x :: xs) ((x :: w) :: ws0)"], "goal_after": ["L (x :: xs) ((x :: w) :: ws0)", "L (x :: xs) ((x :: w) :: ws0)"], "proof_term_before": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_rec x\n   (fun (vs0 ws0 : list word) (_ : R x vs0 ws0) =>\n    L xs vs0 -> L (x :: xs) ws0)\n   (fun H0 : L xs nil =>\n    let H1 :=\n      match H0 in (L _ l) return (l = nil -> L (x :: xs) nil) with\n      | L0 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : emb w0 xs)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_rec (emb w0 xs -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      | L1 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : L xs ws1)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_rec (L xs ws1 -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      end in\n    H1 eq_refl) ?Goal vs ws H)"], "proof_term_after": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_rec x\n   (fun (vs0 ws0 : list word) (_ : R x vs0 ws0) =>\n    L xs vs0 -> L (x :: xs) ws0)\n   (fun H0 : L xs nil =>\n    let H1 :=\n      match H0 in (L _ l) return (l = nil -> L (x :: xs) nil) with\n      | L0 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : emb w0 xs)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_rec (emb w0 xs -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      | L1 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : L xs ws1)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_rec (L xs ws1 -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      end in\n    H1 eq_refl)\n   (fun (vs0 ws0 : list word) (w : word) (r : R x vs0 ws0)\n      (H0 : L xs vs0 -> L (x :: xs) ws0) (H1 : L xs (w :: vs0)) =>\n    let H2 :=\n      match\n        H1 in (L _ l) return (l = w :: vs0 -> L (x :: xs) ((x :: w) :: ws0))\n      with\n      | L0 _ w0 ws1 x0 =>\n          (fun (w1 : word) (ws2 : list word) (H2 : emb w1 xs)\n             (H3 : w1 :: ws2 = w :: vs0) =>\n           (fun H4 : w1 :: ws2 = w :: vs0 =>\n            let H5 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H4 in\n            (let H6 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H4 in\n             (fun H7 : w1 = w =>\n              let H8 : w1 = w := H7 in\n              eq_rec_r\n                (fun w2 : word =>\n                 ws2 = vs0 -> emb w2 xs -> L (x :: xs) ((x :: w) :: ws0))\n                (fun H9 : ws2 = vs0 =>\n                 let H10 : ws2 = vs0 := H9 in\n                 eq_rec_r\n                   (fun _ : list word =>\n                    emb w xs -> L (x :: xs) ((x :: w) :: ws0))\n                   (fun H11 : emb w xs =>\n                    ?Goal@{w0:=w1; ws1:=ws2; H3:=H11; H2:=H7; H4:=H9}) H10)\n                H8) H6) H5) H3 H2) w0 ws1 x0\n      | L1 _ w0 ws1 x0 =>\n          (fun (w1 : word) (ws2 : list word) (H2 : L xs ws2)\n             (H3 : w1 :: ws2 = w :: vs0) =>\n           (fun H4 : w1 :: ws2 = w :: vs0 =>\n            let H5 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H4 in\n            (let H6 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H4 in\n             (fun H7 : w1 = w =>\n              let H8 : w1 = w := H7 in\n              eq_rec_r\n                (fun _ : word =>\n                 ws2 = vs0 -> L xs ws2 -> L (x :: xs) ((x :: w) :: ws0))\n                (fun H9 : ws2 = vs0 =>\n                 let H10 : ws2 = vs0 := H9 in\n                 eq_rec_r\n                   (fun l : list word =>\n                    L xs l -> L (x :: xs) ((x :: w) :: ws0))\n                   (fun H11 : L xs vs0 =>\n                    ?Goal0@{w0:=w1; ws1:=ws2; H3:=H11; H2:=H7; H4:=H9}) H10)\n                H8) H6) H5) H3 H2) w0 ws1 x0\n      end in\n    H2 eq_refl) vs ws H)"]}, {"text": "Qed.", "goal_before": ["L (x :: xs) ((x :: w) :: ws0)", "L (x :: xs) ((x :: w) :: ws0)"], "goal_after": [], "proof_term_before": ["(fun (vs ws : list word) (x : letter) (xs : word) (H : R x vs ws) =>\n R_rec x\n   (fun (vs0 ws0 : list word) (_ : R x vs0 ws0) =>\n    L xs vs0 -> L (x :: xs) ws0)\n   (fun H0 : L xs nil =>\n    let H1 :=\n      match H0 in (L _ l) return (l = nil -> L (x :: xs) nil) with\n      | L0 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : emb w0 xs)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_rec (emb w0 xs -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      | L1 _ w ws0 x0 =>\n          (fun (w0 : word) (ws1 : list word) (H1 : L xs ws1)\n             (H2 : w0 :: ws1 = nil) =>\n           (fun H3 : w0 :: ws1 = nil =>\n            let H4 : False :=\n              eq_ind (w0 :: ws1)\n                (fun e : list word =>\n                 match e with\n                 | nil => False\n                 | _ :: _ => True\n                 end) I nil H3 in\n            False_rec (L xs ws1 -> L (x :: xs) nil) H4) H2 H1) w ws0 x0\n      end in\n    H1 eq_refl)\n   (fun (vs0 ws0 : list word) (w : word) (r : R x vs0 ws0)\n      (H0 : L xs vs0 -> L (x :: xs) ws0) (H1 : L xs (w :: vs0)) =>\n    let H2 :=\n      match\n        H1 in (L _ l) return (l = w :: vs0 -> L (x :: xs) ((x :: w) :: ws0))\n      with\n      | L0 _ w0 ws1 x0 =>\n          (fun (w1 : word) (ws2 : list word) (H2 : emb w1 xs)\n             (H3 : w1 :: ws2 = w :: vs0) =>\n           (fun H4 : w1 :: ws2 = w :: vs0 =>\n            let H5 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H4 in\n            (let H6 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H4 in\n             (fun H7 : w1 = w =>\n              let H8 : w1 = w := H7 in\n              eq_rec_r\n                (fun w2 : word =>\n                 ws2 = vs0 -> emb w2 xs -> L (x :: xs) ((x :: w) :: ws0))\n                (fun H9 : ws2 = vs0 =>\n                 let H10 : ws2 = vs0 := H9 in\n                 eq_rec_r\n                   (fun _ : list word =>\n                    emb w xs -> L (x :: xs) ((x :: w) :: ws0))\n                   (fun H11 : emb w xs =>\n                    ?Goal@{w0:=w1; ws1:=ws2; H3:=H11; H2:=H7; H4:=H9}) H10)\n                H8) H6) H5) H3 H2) w0 ws1 x0\n      | L1 _ w0 ws1 x0 =>\n          (fun (w1 : word) (ws2 : list word) (H2 : L xs ws2)\n             (H3 : w1 :: ws2 = w :: vs0) =>\n           (fun H4 : w1 :: ws2 = w :: vs0 =>\n            let H5 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H4 in\n            (let H6 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H4 in\n             (fun H7 : w1 = w =>\n              let H8 : w1 = w := H7 in\n              eq_rec_r\n                (fun _ : word =>\n                 ws2 = vs0 -> L xs ws2 -> L (x :: xs) ((x :: w) :: ws0))\n                (fun H9 : ws2 = vs0 =>\n                 let H10 : ws2 = vs0 := H9 in\n                 eq_rec_r\n                   (fun l : list word =>\n                    L xs l -> L (x :: xs) ((x :: w) :: ws0))\n                   (fun H11 : L xs vs0 =>\n                    ?Goal0@{w0:=w1; ws1:=ws2; H3:=H11; H2:=H7; H4:=H9}) H10)\n                H8) H6) H5) H3 H2) w0 ws1 x0\n      end in\n    H2 eq_refl) vs ws H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "lemma2", "text": "Theorem lemma2 :\n forall (vs ws : list word) (a : letter), R a vs ws -> good vs -> good ws.\nsimple induction 1; auto.\ninversion 3; eauto.\nDefined.\n", "definition": "\n forall (vs ws : list word) (a : letter), R a vs ws -> good vs -> good ws.", "proof": "\nsimple induction 1; auto.\ninversion 3; eauto.\n", "def_ranges": [91, 0, 92, 74], "proof_ranges": [93, 0, 95, 8], "proof_steps": [{"text": "simple induction 1; auto.", "goal_before": ["forall (vs ws : list word) (a : letter), R a vs ws -> good vs -> good ws"], "goal_after": ["forall (vs0 ws0 : list word) (w : word),\nR a vs0 ws0 ->\n(good vs0 -> good ws0) -> good (w :: vs0) -> good ((a :: w) :: ws0)"], "proof_term_before": [], "proof_term_after": ["(fun (vs ws : list word) (a : letter) (H : R a vs ws) =>\n R_rec a\n   (fun (vs0 ws0 : list word) (_ : R a vs0 ws0) => good vs0 -> good ws0)\n   (fun H0 : good nil => H0) ?Goal vs ws H)"]}, {"text": "inversion 3; eauto.", "goal_before": ["forall (vs0 ws0 : list word) (w : word),\nR a vs0 ws0 ->\n(good vs0 -> good ws0) -> good (w :: vs0) -> good ((a :: w) :: ws0)"], "goal_after": ["good ((a :: w) :: ws0)", "good ((a :: w) :: ws0)"], "proof_term_before": ["(fun (vs ws : list word) (a : letter) (H : R a vs ws) =>\n R_rec a\n   (fun (vs0 ws0 : list word) (_ : R a vs0 ws0) => good vs0 -> good ws0)\n   (fun H0 : good nil => H0) ?Goal vs ws H)"], "proof_term_after": ["(fun (vs ws : list word) (a : letter) (H : R a vs ws) =>\n R_rec a\n   (fun (vs0 ws0 : list word) (_ : R a vs0 ws0) => good vs0 -> good ws0)\n   (fun H0 : good nil => H0)\n   (fun (vs0 ws0 : list word) (w : word) (r : R a vs0 ws0)\n      (H0 : good vs0 -> good ws0) (H1 : good (w :: vs0)) =>\n    let H2 :=\n      match\n        H1 in (good l) return (l = w :: vs0 -> good ((a :: w) :: ws0))\n      with\n      | good0 ws1 w0 x =>\n          (fun (ws2 : list word) (w1 : word) (H2 : L w1 ws2)\n             (H3 : w1 :: ws2 = w :: vs0) =>\n           (fun H4 : w1 :: ws2 = w :: vs0 =>\n            let H5 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H4 in\n            (let H6 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H4 in\n             (fun H7 : w1 = w =>\n              let H8 : w1 = w := H7 in\n              eq_rec_r\n                (fun w2 : word =>\n                 ws2 = vs0 -> L w2 ws2 -> good ((a :: w) :: ws0))\n                (fun H9 : ws2 = vs0 =>\n                 let H10 : ws2 = vs0 := H9 in\n                 eq_rec_r\n                   (fun l : list word => L w l -> good ((a :: w) :: ws0))\n                   (fun H11 : L w vs0 =>\n                    ?Goal@{ws1:=ws2; w0:=w1; H3:=H11; H2:=H7; H4:=H9}) H10)\n                H8) H6) H5) H3 H2) ws1 w0 x\n      | good1 ws1 w0 x =>\n          (fun (ws2 : list word) (w1 : word) (H2 : good ws2)\n             (H3 : w1 :: ws2 = w :: vs0) =>\n           (fun H4 : w1 :: ws2 = w :: vs0 =>\n            let H5 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H4 in\n            (let H6 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H4 in\n             (fun H7 : w1 = w =>\n              let H8 : w1 = w := H7 in\n              eq_rec_r\n                (fun _ : word =>\n                 ws2 = vs0 -> good ws2 -> good ((a :: w) :: ws0))\n                (fun H9 : ws2 = vs0 =>\n                 let H10 : ws2 = vs0 := H9 in\n                 eq_rec_r\n                   (fun l : list word => good l -> good ((a :: w) :: ws0))\n                   (fun H11 : good vs0 =>\n                    ?Goal0@{ws1:=ws2; w0:=w1; H3:=H11; H2:=H7; H4:=H9}) H10)\n                H8) H6) H5) H3 H2) ws1 w0 x\n      end in\n    H2 eq_refl) vs ws H)"]}, {"text": "Qed.", "goal_before": ["good ((a :: w) :: ws0)", "good ((a :: w) :: ws0)"], "goal_after": [], "proof_term_before": ["(fun (vs ws : list word) (a : letter) (H : R a vs ws) =>\n R_rec a\n   (fun (vs0 ws0 : list word) (_ : R a vs0 ws0) => good vs0 -> good ws0)\n   (fun H0 : good nil => H0)\n   (fun (vs0 ws0 : list word) (w : word) (r : R a vs0 ws0)\n      (H0 : good vs0 -> good ws0) (H1 : good (w :: vs0)) =>\n    let H2 :=\n      match\n        H1 in (good l) return (l = w :: vs0 -> good ((a :: w) :: ws0))\n      with\n      | good0 ws1 w0 x =>\n          (fun (ws2 : list word) (w1 : word) (H2 : L w1 ws2)\n             (H3 : w1 :: ws2 = w :: vs0) =>\n           (fun H4 : w1 :: ws2 = w :: vs0 =>\n            let H5 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H4 in\n            (let H6 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H4 in\n             (fun H7 : w1 = w =>\n              let H8 : w1 = w := H7 in\n              eq_rec_r\n                (fun w2 : word =>\n                 ws2 = vs0 -> L w2 ws2 -> good ((a :: w) :: ws0))\n                (fun H9 : ws2 = vs0 =>\n                 let H10 : ws2 = vs0 := H9 in\n                 eq_rec_r\n                   (fun l : list word => L w l -> good ((a :: w) :: ws0))\n                   (fun H11 : L w vs0 =>\n                    ?Goal@{ws1:=ws2; w0:=w1; H3:=H11; H2:=H7; H4:=H9}) H10)\n                H8) H6) H5) H3 H2) ws1 w0 x\n      | good1 ws1 w0 x =>\n          (fun (ws2 : list word) (w1 : word) (H2 : good ws2)\n             (H3 : w1 :: ws2 = w :: vs0) =>\n           (fun H4 : w1 :: ws2 = w :: vs0 =>\n            let H5 : ws2 = vs0 :=\n              f_equal\n                (fun e : list word =>\n                 match e with\n                 | nil => ws2\n                 | _ :: l => l\n                 end) H4 in\n            (let H6 : w1 = w :=\n               f_equal\n                 (fun e : list word =>\n                  match e with\n                  | nil => w1\n                  | w2 :: _ => w2\n                  end) H4 in\n             (fun H7 : w1 = w =>\n              let H8 : w1 = w := H7 in\n              eq_rec_r\n                (fun _ : word =>\n                 ws2 = vs0 -> good ws2 -> good ((a :: w) :: ws0))\n                (fun H9 : ws2 = vs0 =>\n                 let H10 : ws2 = vs0 := H9 in\n                 eq_rec_r\n                   (fun l : list word => good l -> good ((a :: w) :: ws0))\n                   (fun H11 : good vs0 =>\n                    ?Goal0@{ws1:=ws2; w0:=w1; H3:=H11; H2:=H7; H4:=H9}) H10)\n                H8) H6) H5) H3 H2) ws1 w0 x\n      end in\n    H2 eq_refl) vs ws H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "lemma3'", "text": "Theorem lemma3' :\n forall (vs ws : list word) (x : letter) (xs : word),\n T x vs ws -> L xs vs -> L (x :: xs) ws.\nsimple induction 1; auto; inversion 3; auto.\nDefined.\n", "definition": "\n forall (vs ws : list word) (x : letter) (xs : word),\n T x vs ws -> L xs vs -> L (x :: xs) ws.", "proof": "\nsimple induction 1; auto; inversion 3; auto.\n", "def_ranges": [98, 0, 100, 40], "proof_ranges": [101, 0, 102, 8], "proof_steps": [{"text": "simple induction 1; auto; inversion 3; auto.", "goal_before": ["forall (vs ws : list word) (x : letter) (xs : word),\nT x vs ws -> L xs vs -> L (x :: xs) ws"], "goal_after": ["forall (vs ws : list word) (x : letter) (xs : word),\nT x vs ws -> L xs vs -> L (x :: xs) ws"], "proof_term_before": [], "proof_term_after": ["?Goal"]}, {"text": "Qed.", "goal_before": ["forall (vs ws : list word) (x : letter) (xs : word),\nT x vs ws -> L xs vs -> L (x :: xs) ws"], "goal_after": [], "proof_term_before": ["?Goal"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "lemma3", "text": "Theorem lemma3 :\n forall (ws zs : list word) (a : letter), T a ws zs -> good ws -> good zs.\nsimple induction 1; auto; inversion 3; eauto.\nDefined.\n", "definition": "\n forall (ws zs : list word) (a : letter), T a ws zs -> good ws -> good zs.", "proof": "\nsimple induction 1; auto; inversion 3; eauto.\n", "def_ranges": [105, 0, 106, 74], "proof_ranges": [107, 0, 108, 8], "proof_steps": [{"text": "simple induction 1; auto; inversion 3; eauto.", "goal_before": ["forall (ws zs : list word) (a : letter), T a ws zs -> good ws -> good zs"], "goal_after": ["forall (ws zs : list word) (a : letter), T a ws zs -> good ws -> good zs"], "proof_term_before": [], "proof_term_after": ["?Goal"]}, {"text": "Qed.", "goal_before": ["forall (ws zs : list word) (a : letter), T a ws zs -> good ws -> good zs"], "goal_after": [], "proof_term_before": ["?Goal"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "lemma4", "text": "Theorem lemma4 :\n forall (ws zs : list word) (a : letter), R a ws zs -> ws <> nil -> T a ws zs.\nsimple induction 1.\ntauto.\nintro.\ncase vs.\ninversion 1.\nintros.\ncase a.\napply (T0 A B w nil); auto.\napply (T0 B A w nil); auto.\nauto.\nDefined.\n", "definition": "\n forall (ws zs : list word) (a : letter), R a ws zs -> ws <> nil -> T a ws zs.", "proof": "\nsimple induction 1.\ntauto.\nintro.\ncase vs.\ninversion 1.\nintros.\ncase a.\napply (T0 A B w nil); auto.\napply (T0 B A w nil); auto.\nauto.\n", "def_ranges": [111, 0, 112, 78], "proof_ranges": [113, 0, 123, 8], "proof_steps": [{"text": "simple induction 1.", "goal_before": ["forall (ws zs : list word) (a : letter), R a ws zs -> ws <> nil -> T a ws zs"], "goal_after": ["nil <> nil -> T a nil nil", "forall (vs ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "proof_term_before": [], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   ?Goal ?Goal0 ws zs H)"]}, {"text": "tauto.", "goal_before": ["nil <> nil -> T a nil nil", "forall (vs ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "goal_after": ["forall (vs ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   ?Goal ?Goal0 ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1) \n   ?Goal ws zs H)"]}, {"text": "intro.", "goal_before": ["forall (vs ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "goal_after": ["forall (ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1) \n   ?Goal ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word => ?Goal) ws zs H)"]}, {"text": "case vs.", "goal_before": ["forall (ws0 : list word) (w : word),\nR a vs ws0 ->\n(vs <> nil -> T a vs ws0) ->\nw :: vs <> nil -> T a (w :: vs) ((a :: w) :: ws0)"], "goal_after": ["forall (ws0 : list word) (w : word),\nR a nil ws0 ->\n(nil <> nil -> T a nil ws0) ->\nw :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word => ?Goal) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil => ?Goal\n    | a0 :: l => ?Goal0 a0 l\n    end) ws zs H)"]}, {"text": "inversion 1.", "goal_before": ["forall (ws0 : list word) (w : word),\nR a nil ws0 ->\n(nil <> nil -> T a nil ws0) ->\nw :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["(nil <> nil -> T a nil nil) ->\nw :: nil <> nil -> T a (w :: nil) ((a :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil => ?Goal\n    | a0 :: l => ?Goal0 a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 ?Goal0@{H1:=H3} ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "intros.", "goal_before": ["(nil <> nil -> T a nil nil) ->\nw :: nil <> nil -> T a (w :: nil) ((a :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["T a (w :: nil) ((a :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 ?Goal0@{H1:=H3} ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H5 : nil <> nil -> T a nil nil) (H6 : w :: nil <> nil)\n                  => ?Goal0@{H1:=H3; H0:=H5; H2:=H6}) ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "case a.", "goal_before": ["T a (w :: nil) ((a :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["T A (w :: nil) ((A :: w) :: nil)", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H5 : nil <> nil -> T a nil nil) (H6 : w :: nil <> nil)\n                  => ?Goal0@{H1:=H3; H0:=H5; H2:=H6}) ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H5 : nil <> nil -> T a nil nil) (H6 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A => ?Goal0@{H1:=H3; H0:=H5; H2:=H6}\n                  | B => ?Goal1@{H1:=H3; H0:=H5; H2:=H6}\n                  end) ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "apply (T0 A B w nil); auto.", "goal_before": ["T A (w :: nil) ((A :: w) :: nil)", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H5 : nil <> nil -> T a nil nil) (H6 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A => ?Goal0@{H1:=H3; H0:=H5; H2:=H6}\n                  | B => ?Goal1@{H1:=H3; H0:=H5; H2:=H6}\n                  end) ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H5 : nil <> nil -> T a nil nil) (H6 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H1:=H3; H0:=H5; H2:=H6}\n                        ?Goal2@{H1:=H3; H0:=H5; H2:=H6}\n                  | B => ?Goal0@{H1:=H3; H0:=H5; H2:=H6}\n                  end) ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "apply (T0 B A w nil); auto.", "goal_before": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H5 : nil <> nil -> T a nil nil) (H6 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H1:=H3; H0:=H5; H2:=H6}\n                        ?Goal2@{H1:=H3; H0:=H5; H2:=H6}\n                  | B => ?Goal0@{H1:=H3; H0:=H5; H2:=H6}\n                  end) ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H5 : nil <> nil -> T a nil nil) (H6 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H1:=H3; H0:=H5; H2:=H6}\n                        ?Goal2@{H1:=H3; H0:=H5; H2:=H6}\n                  | B => ?Goal0@{H1:=H3; H0:=H5; H2:=H6}\n                  end) ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "auto.", "goal_before": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H5 : nil <> nil -> T a nil nil) (H6 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H1:=H3; H0:=H5; H2:=H6}\n                        ?Goal2@{H1:=H3; H0:=H5; H2:=H6}\n                  | B => ?Goal0@{H1:=H3; H0:=H5; H2:=H6}\n                  end) ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H5 : nil <> nil -> T a nil nil) (H6 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H1:=H3; H0:=H5; H2:=H6}\n                        ?Goal2@{H1:=H3; H0:=H5; H2:=H6}\n                  | B => ?Goal0@{H1:=H3; H0:=H5; H2:=H6}\n                  end) ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"]}, {"text": "Qed.", "goal_before": ["A <> B", "R B nil nil", "T B (w :: nil) ((B :: w) :: nil)", "forall (w : word) (l ws0 : list word) (w0 : word),\nR a (w :: l) ws0 ->\n(w :: l <> nil -> T a (w :: l) ws0) ->\nw0 :: w :: l <> nil -> T a (w0 :: w :: l) ((a :: w0) :: ws0)"], "goal_after": [], "proof_term_before": ["(fun (ws zs : list word) (a : letter) (H : R a ws zs) =>\n R_rec a\n   (fun (ws0 zs0 : list word) (_ : R a ws0 zs0) => ws0 <> nil -> T a ws0 zs0)\n   (fun H0 : nil <> nil =>\n    let H1 : False := let H1 : nil = nil := eq_refl in H0 H1 in\n    (fun H2 : False => False_rec (T a nil nil) H2) H1)\n   (fun vs : list word =>\n    match\n      vs as l\n      return\n        (forall (ws0 : list word) (w : word),\n         R a l ws0 ->\n         (l <> nil -> T a l ws0) ->\n         w :: l <> nil -> T a (w :: l) ((a :: w) :: ws0))\n    with\n    | nil =>\n        fun (ws0 : list word) (w : word) (r : R a nil ws0) =>\n        let H0 :=\n          match\n            r in (R _ l l0)\n            return\n              (l = nil ->\n               l0 = ws0 ->\n               (nil <> nil -> T a nil ws0) ->\n               w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0))\n          with\n          | R0 _ =>\n              fun (H0 : nil = nil) (H1 : nil = ws0) =>\n              (fun (_ : nil = nil) (H3 : nil = ws0) =>\n               let H4 : nil = ws0 := H3 in\n               eq_rect nil\n                 (fun l : list word =>\n                  (nil <> nil -> T a nil l) ->\n                  w :: nil <> nil -> T a (w :: nil) ((a :: w) :: l))\n                 (fun (H5 : nil <> nil -> T a nil nil) (H6 : w :: nil <> nil)\n                  =>\n                  match a as l return (T l (w :: nil) ((l :: w) :: nil)) with\n                  | A =>\n                      T0 A B w nil nil ?Goal1@{H1:=H3; H0:=H5; H2:=H6}\n                        ?Goal2@{H1:=H3; H0:=H5; H2:=H6}\n                  | B => ?Goal0@{H1:=H3; H0:=H5; H2:=H6}\n                  end) ws0 H4) H0 H1\n          | R1 _ vs0 ws1 w0 x =>\n              (fun (vs1 ws2 : list word) (w1 : word) \n                 (H0 : R a vs1 ws2) (H1 : w1 :: vs1 = nil)\n                 (H2 : (a :: w1) :: ws2 = ws0) =>\n               (fun H3 : w1 :: vs1 = nil =>\n                let H4 : False :=\n                  eq_ind (w1 :: vs1)\n                    (fun e : list word =>\n                     match e with\n                     | nil => False\n                     | _ :: _ => True\n                     end) I nil H3 in\n                False_rec\n                  ((a :: w1) :: ws2 = ws0 ->\n                   R a vs1 ws2 ->\n                   (nil <> nil -> T a nil ws0) ->\n                   w :: nil <> nil -> T a (w :: nil) ((a :: w) :: ws0)) H4)\n                 H1 H2 H0) vs0 ws1 w0 x\n          end in\n        H0 eq_refl eq_refl\n    | a0 :: l => ?Goal a0 l\n    end) ws zs H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "letter_neq", "text": "Theorem letter_neq : forall a b c : letter, a <> b -> c <> a -> c = b.\nintros a b c; case a; case b; case c; tauto.\nQed.\n", "definition": " forall a b c : letter, a <> b -> c <> a -> c = b.", "proof": "\nintros a b c; case a; case b; case c; tauto.\n", "def_ranges": [126, 0, 126, 70], "proof_ranges": [127, 0, 128, 4], "proof_steps": [{"text": "intros a b c; case a; case b; case c; tauto.", "goal_before": ["forall a b c : letter, a <> b -> c <> a -> c = b"], "goal_after": [], "proof_term_before": [], "proof_term_after": ["(fun a b c : letter =>\n match a as l return (l <> b -> c <> l -> c = b) with\n | A =>\n     match b as l return (A <> l -> c <> A -> c = l) with\n     | A =>\n         match c as l return (A <> A -> l <> A -> l = A) with\n         | A =>\n             fun H H0 : A <> A =>\n             let H1 : False := let H1 : A = A := eq_refl in H H1 in\n             (fun _ : False =>\n              let H3 : False := let H3 : A = A := eq_refl in H0 H3 in\n              (fun _ : False => eq_refl) H3) H1\n         | B =>\n             fun (H : A <> A) (_ : B <> A) =>\n             let H1 : False := let H1 : A = A := eq_refl in H H1 in\n             (fun H2 : False => False_ind (B = A) H2) H1\n         end\n     | B =>\n         match c as l return (A <> B -> l <> A -> l = B) with\n         | A =>\n             fun (_ : A <> B) (H0 : A <> A) =>\n             let H1 : False := let H1 : A = A := eq_refl in H0 H1 in\n             (fun H2 : False => False_ind (A = B) H2) H1\n         | B => fun (_ : A <> B) (_ : B <> A) => eq_refl\n         end\n     end\n | B =>\n     match b as l return (B <> l -> c <> B -> c = l) with\n     | A =>\n         match c as l return (B <> A -> l <> B -> l = A) with\n         | A => fun (_ : B <> A) (_ : A <> B) => eq_refl\n         | B =>\n             fun (_ : B <> A) (H0 : B <> B) =>\n             let H1 : False := let H1 : B = B := eq_refl in H0 H1 in\n             (fun H2 : False => False_ind (B = A) H2) H1\n         end\n     | B =>\n         match c as l return (B <> B -> l <> B -> l = B) with\n         | A =>\n             fun (H : B <> B) (_ : A <> B) =>\n             let H1 : False := let H1 : B = B := eq_refl in H H1 in\n             (fun H2 : False => False_ind (A = B) H2) H1\n         | B =>\n             fun H H0 : B <> B =>\n             let H1 : False := let H1 : B = B := eq_refl in H H1 in\n             (fun _ : False =>\n              let H3 : False := let H3 : B = B := eq_refl in H0 H3 in\n              (fun _ : False => eq_refl) H3) H1\n         end\n     end\n end)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun a b c : letter =>\n match a as l return (l <> b -> c <> l -> c = b) with\n | A =>\n     match b as l return (A <> l -> c <> A -> c = l) with\n     | A =>\n         match c as l return (A <> A -> l <> A -> l = A) with\n         | A =>\n             fun H H0 : A <> A =>\n             let H1 : False := let H1 : A = A := eq_refl in H H1 in\n             (fun _ : False =>\n              let H3 : False := let H3 : A = A := eq_refl in H0 H3 in\n              (fun _ : False => eq_refl) H3) H1\n         | B =>\n             fun (H : A <> A) (_ : B <> A) =>\n             let H1 : False := let H1 : A = A := eq_refl in H H1 in\n             (fun H2 : False => False_ind (B = A) H2) H1\n         end\n     | B =>\n         match c as l return (A <> B -> l <> A -> l = B) with\n         | A =>\n             fun (_ : A <> B) (H0 : A <> A) =>\n             let H1 : False := let H1 : A = A := eq_refl in H0 H1 in\n             (fun H2 : False => False_ind (A = B) H2) H1\n         | B => fun (_ : A <> B) (_ : B <> A) => eq_refl\n         end\n     end\n | B =>\n     match b as l return (B <> l -> c <> B -> c = l) with\n     | A =>\n         match c as l return (B <> A -> l <> B -> l = A) with\n         | A => fun (_ : B <> A) (_ : A <> B) => eq_refl\n         | B =>\n             fun (_ : B <> A) (H0 : B <> B) =>\n             let H1 : False := let H1 : B = B := eq_refl in H0 H1 in\n             (fun H2 : False => False_ind (B = A) H2) H1\n         end\n     | B =>\n         match c as l return (B <> B -> l <> B -> l = B) with\n         | A =>\n             fun (H : B <> B) (_ : A <> B) =>\n             let H1 : False := let H1 : B = B := eq_refl in H H1 in\n             (fun H2 : False => False_ind (A = B) H2) H1\n         | B =>\n             fun H H0 : B <> B =>\n             let H1 : False := let H1 : B = B := eq_refl in H H1 in\n             (fun _ : False =>\n              let H3 : False := let H3 : B = B := eq_refl in H0 H3 in\n              (fun _ : False => eq_refl) H3) H1\n         end\n     end\n end)"], "proof_term_after": []}], "ends_qed": true}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "letter_eq_dec", "text": "Theorem letter_eq_dec : forall a b : letter, {a = b} + {a <> b}.\nintros.\ndecide equality.\nDefined.\n", "definition": " forall a b : letter, {a = b} + {a <> b}.", "proof": "\nintros.\ndecide equality.\n", "def_ranges": [130, 0, 130, 64], "proof_ranges": [131, 0, 133, 8], "proof_steps": [{"text": "intros.", "goal_before": ["forall a b : letter, {a = b} + {a <> b}"], "goal_after": ["{a = b} + {a <> b}"], "proof_term_before": [], "proof_term_after": ["(fun a b : letter => ?Goal)"]}, {"text": "decide equality.", "goal_before": ["{a = b} + {a <> b}"], "goal_after": [], "proof_term_before": ["(fun a b : letter => ?Goal)"], "proof_term_after": ["(fun a b : letter =>\n letter_rec (fun a0 : letter => forall x : letter, {a0 = x} + {a0 <> x})\n   (fun x : letter =>\n    match x as l return ({A = l} + {A <> l}) with\n    | A => left eq_refl\n    | B =>\n        right\n          ((fun H : A = B =>\n            let H0 : False :=\n              eq_ind A\n                (fun e : letter => match e with\n                                   | A => True\n                                   | B => False\n                                   end) I B H in\n            False_ind False H0)\n           :\n           A <> B)\n    end)\n   (fun x : letter =>\n    match x as l return ({B = l} + {B <> l}) with\n    | A =>\n        right\n          ((fun H : B = A =>\n            let H0 : False :=\n              eq_ind B\n                (fun e : letter => match e with\n                                   | A => False\n                                   | B => True\n                                   end) I A H in\n            False_ind False H0)\n           :\n           B <> A)\n    | B => left eq_refl\n    end) a b)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun a b : letter =>\n letter_rec (fun a0 : letter => forall x : letter, {a0 = x} + {a0 <> x})\n   (fun x : letter =>\n    match x as l return ({A = l} + {A <> l}) with\n    | A => left eq_refl\n    | B =>\n        right\n          ((fun H : A = B =>\n            let H0 : False :=\n              eq_ind A\n                (fun e : letter => match e with\n                                   | A => True\n                                   | B => False\n                                   end) I B H in\n            False_ind False H0)\n           :\n           A <> B)\n    end)\n   (fun x : letter =>\n    match x as l return ({B = l} + {B <> l}) with\n    | A =>\n        right\n          ((fun H : B = A =>\n            let H0 : False :=\n              eq_ind B\n                (fun e : letter => match e with\n                                   | A => False\n                                   | B => True\n                                   end) I A H in\n            False_ind False H0)\n           :\n           B <> A)\n    | B => left eq_refl\n    end) a b)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "prop2", "text": "Theorem prop2 :\n forall (a b : letter) (xs : list word),\n a <> b ->\n bar xs ->\n forall ys : list word,\n bar ys -> forall zs : list word, T a xs zs -> T b ys zs -> bar zs.\nintros a b xs neq.\nsimple induction 1.\neauto.\nsimple induction 3.\neauto.\nintros.\napply bar2.\nintro.\ncase w.\napply prop1.\nintros.\nelim (letter_eq_dec l a).\nintro; rewrite a0; eauto.\nintro; rewrite (letter_neq a b l neq b2); eauto.\nDefined.\n", "definition": "\n forall (a b : letter) (xs : list word),\n a <> b ->\n bar xs ->\n forall ys : list word,\n bar ys -> forall zs : list word, T a xs zs -> T b ys zs -> bar zs.", "proof": "\nintros a b xs neq.\nsimple induction 1.\neauto.\nsimple induction 3.\neauto.\nintros.\napply bar2.\nintro.\ncase w.\napply prop1.\nintros.\nelim (letter_eq_dec l a).\nintro; rewrite a0; eauto.\nintro; rewrite (letter_neq a b l neq b2); eauto.\n", "def_ranges": [135, 0, 140, 67], "proof_ranges": [141, 0, 155, 8], "proof_steps": [{"text": "intros a b xs neq.", "goal_before": ["forall (a b : letter) (xs : list word),\na <> b ->\nbar xs ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a xs zs -> T b ys zs -> bar zs"], "goal_after": ["bar xs ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a xs zs -> T b ys zs -> bar zs"], "proof_term_before": [], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) => ?Goal)"]}, {"text": "simple induction 1.", "goal_before": ["bar xs ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a xs zs -> T b ys zs -> bar zs"], "goal_after": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) => ?Goal)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"]}, {"text": "eauto.", "goal_before": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"]}, {"text": "simple induction 3.", "goal_before": ["forall ws : list word,\ngood ws ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 -> R b0 ws0 zs0 -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs) \n   ?Goal ?Goal0 xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      ?Goal0 ?Goal1 ?Goal2 ws zs H1) ?Goal xs H)"]}, {"text": "eauto.", "goal_before": ["forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 -> R b0 ws0 zs0 -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 -> R b0 ws0 zs0 -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      ?Goal0 ?Goal1 ?Goal2 ws zs H1) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      ?Goal0 ?Goal1 ?Goal2 ws zs H1) ?Goal xs H)"]}, {"text": "intros.", "goal_before": ["forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 -> R b0 ws0 zs0 -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar ((a :: w) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      ?Goal0 ?Goal1 ?Goal2 ws zs H1) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       ?Goal2) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"]}, {"text": "apply bar2.", "goal_before": ["bar ((a :: w) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["forall w0 : word, bar (w0 :: (a :: w) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       ?Goal2) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0) ?Goal2) ?Goal0 ?Goal1 ws zs H1) \n   ?Goal xs H)"]}, {"text": "intro.", "goal_before": ["forall w0 : word, bar (w0 :: (a :: w) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar (w0 :: (a :: w) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0) ?Goal2) ?Goal0 ?Goal1 ws zs H1) \n   ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0) (fun w0 : word => ?Goal2)) \n      ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"]}, {"text": "case w.", "goal_before": ["bar (w0 :: (a :: w) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0) (fun w0 : word => ?Goal2)) \n      ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"]}, {"text": "apply prop1.", "goal_before": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"]}, {"text": "intros.", "goal_before": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"]}, {"text": "elim (letter_eq_dec l a).", "goal_before": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"]}, {"text": "intro; rewrite a0; eauto.", "goal_before": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"]}, {"text": "intro; rewrite (letter_neq a b l neq b2); eauto.", "goal_before": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"], "proof_term_after": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"]}, {"text": "Qed.", "goal_before": ["bar (w0 :: (a :: nil) :: zs0)", "forall (l : letter) (l0 : list letter), bar (w0 :: (a :: l :: l0) :: zs0)", "forall (w : word) (ws0 zs0 : list word),\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) -> T b ys ((a :: w) :: zs0) -> bar ((a :: w) :: zs0)", "forall (b0 : letter) (w : word) (ws0 zs0 : list word),\na <> b0 ->\nT a ws0 zs0 ->\n(T b ys zs0 -> bar zs0) ->\nT b ys ((b0 :: w) :: zs0) -> bar ((b0 :: w) :: zs0)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (ys : list word),\n bar ys -> forall zs : list word, T a (w :: ws) zs -> T b ys zs -> bar zs) ->\nforall ys : list word,\nbar ys -> forall zs : list word, T a ws zs -> T b ys zs -> bar zs"], "goal_after": [], "proof_term_before": ["(fun (a b : letter) (xs : list word) (neq : a <> b) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall ys : list word,\n    bar ys -> forall zs : list word, T a xs0 zs -> T b ys zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (ys : list word) \n      (H0 : bar ys) (zs : list word) (H1 : T a ws zs) =>\n    T_rec a\n      (fun (ws0 zs0 : list word) (_ : T a ws0 zs0) => T b ys zs0 -> bar zs0)\n      (fun (b0 : letter) (w : word) (ws0 zs0 : list word) \n         (n : a <> b0) (r : R b0 ws0 zs0) (H2 : T b ys ((a :: w) :: zs0)) =>\n       bar2 ((a :: w) :: zs0)\n         (fun w0 : word =>\n          match w as l return (bar (w0 :: (a :: l) :: zs0)) with\n          | nil => ?Goal2\n          | a0 :: l => ?Goal3 a0 l\n          end)) ?Goal0 ?Goal1 ws zs H1) ?Goal xs H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "prop3", "text": "Theorem prop3 :\n forall (a : letter) (xs : list word),\n bar xs -> forall zs : list word, xs <> nil -> R a xs zs -> bar zs.\nsimple induction 1.\neauto.\nintros.\napply bar2.\nsimple induction w.\nauto.\nintros.\nelim (letter_eq_dec a0 a).\nintro. \nrewrite a1; eauto.\nintro.\napply (prop2 a0 a (l :: zs) b0 H3 ws); eauto.\nDefined.\n", "definition": "\n forall (a : letter) (xs : list word),\n bar xs -> forall zs : list word, xs <> nil -> R a xs zs -> bar zs.", "proof": "\nsimple induction 1.\neauto.\nintros.\napply bar2.\nsimple induction w.\nauto.\nintros.\nelim (letter_eq_dec a0 a).\nintro. \nrewrite a1; eauto.\nintro.\napply (prop2 a0 a (l :: zs) b0 H3 ws); eauto.\n", "def_ranges": [158, 0, 160, 67], "proof_ranges": [161, 0, 173, 8], "proof_steps": [{"text": "simple induction 1.", "goal_before": ["forall (a : letter) (xs : list word),\nbar xs -> forall zs : list word, xs <> nil -> R a xs zs -> bar zs"], "goal_after": ["forall ws : list word,\ngood ws -> forall zs : list word, ws <> nil -> R a ws zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": [], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs) \n   ?Goal ?Goal0 xs H)"]}, {"text": "eauto.", "goal_before": ["forall ws : list word,\ngood ws -> forall zs : list word, ws <> nil -> R a ws zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["forall ws : list word,\ngood ws -> forall zs : list word, ws <> nil -> R a ws zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs) \n   ?Goal ?Goal0 xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs) \n   ?Goal ?Goal0 xs H)"]}, {"text": "intros.", "goal_before": ["forall ws : list word,\ngood ws -> forall zs : list word, ws <> nil -> R a ws zs -> bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs) \n   ?Goal ?Goal0 xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) => ?Goal0) \n   ?Goal xs H)"]}, {"text": "apply bar2.", "goal_before": ["bar zs", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["forall w : word, bar (w :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) => ?Goal0) \n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) => bar2 zs ?Goal0) \n   ?Goal xs H)"]}, {"text": "simple induction w.", "goal_before": ["forall w : word, bar (w :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) => bar2 zs ?Goal0) \n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "auto.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "intros.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "elim (letter_eq_dec a0 a).", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "intro.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "rewrite a1; eauto.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "intro.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "apply (prop2 a0 a (l :: zs) b0 H3 ws); eauto.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"]}, {"text": "Qed.", "goal_before": ["bar (nil :: zs)", "forall (a0 : letter) (l : list letter),\nbar (l :: zs) -> bar ((a0 :: l) :: zs)", "forall ws : list word,\n(forall w : word, bar (w :: ws)) ->\n(forall (w : word) (zs : list word),\n w :: ws <> nil -> R a (w :: ws) zs -> bar zs) ->\nforall zs : list word, ws <> nil -> R a ws zs -> bar zs"], "goal_after": [], "proof_term_before": ["(fun (a : letter) (xs : list word) (H : bar xs) =>\n bar_rec\n   (fun (xs0 : list word) (_ : bar xs0) =>\n    forall zs : list word, xs0 <> nil -> R a xs0 zs -> bar zs)\n   (fun (ws : list word) (g : good ws) (zs : list word) \n      (H0 : ws <> nil) (H1 : R a ws zs) =>\n    bar2 zs\n      (fun w : word =>\n       list_rec (fun w0 : list letter => bar (w0 :: zs)) ?Goal0 ?Goal1 w))\n   ?Goal xs H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "higman", "text": "Theorem higman : bar nil.\napply bar2.\nsimple induction w; eauto.\nDefined.\n", "definition": " bar nil.", "proof": "\napply bar2.\nsimple induction w; eauto.\n", "def_ranges": [176, 0, 176, 25], "proof_ranges": [177, 0, 179, 8], "proof_steps": [{"text": "apply bar2.", "goal_before": ["bar nil"], "goal_after": ["forall w : word, bar (w :: nil)"], "proof_term_before": [], "proof_term_after": ["(bar2 nil ?Goal)"]}, {"text": "simple induction w; eauto.", "goal_before": ["forall w : word, bar (w :: nil)"], "goal_after": ["bar (nil :: nil)", "forall (a : letter) (l : list letter),\nbar (l :: nil) -> bar ((a :: l) :: nil)"], "proof_term_before": ["(bar2 nil ?Goal)"], "proof_term_after": ["(bar2 nil\n   (fun w : word =>\n    list_rec (fun w0 : list letter => bar (w0 :: nil)) ?Goal ?Goal0 w))"]}, {"text": "Qed.", "goal_before": ["bar (nil :: nil)", "forall (a : letter) (l : list letter),\nbar (l :: nil) -> bar ((a :: l) :: nil)"], "goal_after": [], "proof_term_before": ["(bar2 nil\n   (fun w : word =>\n    list_rec (fun w0 : list letter => bar (w0 :: nil)) ?Goal ?Goal0 w))"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "L_idx", "text": "Theorem L_idx :\n forall (f : nat -> word) (w : word) (ws : list word),\n L w ws -> is_prefix word ws f -> {i : nat | emb (f i) w /\\ i < length ws}. \nsimple induction 1.\nintros.\nexists (length ws0).\ninversion_clear H0.\nsplit.\nrewrite H1 in e.\nassumption.\nauto.\nintros.\ncut (is_prefix word ws0 f).\nintro.\nelim (H0 H2).\nintros.\nexists x.\nelim p.\nsplit.\nassumption.\napply (le_S (S x) (length ws0)).\nassumption.\ninversion H1.\nassumption.\nDefined.\n", "definition": "\n forall (f : nat -> word) (w : word) (ws : list word),\n L w ws -> is_prefix word ws f -> {i : nat | emb (f i) w /\\ i < length ws}.", "proof": " \nsimple induction 1.\nintros.\nexists (length ws0).\ninversion_clear H0.\nsplit.\nrewrite H1 in e.\nassumption.\nauto.\nintros.\ncut (is_prefix word ws0 f).\nintro.\nelim (H0 H2).\nintros.\nexists x.\nelim p.\nsplit.\nassumption.\napply (le_S (S x) (length ws0)).\nassumption.\ninversion H1.\nassumption.\n", "def_ranges": [189, 0, 191, 75], "proof_ranges": [191, 76, 213, 8], "proof_steps": [{"text": "simple induction 1.", "goal_before": ["forall (f : nat -> word) (w : word) (ws : list word),\nL w ws -> is_prefix word ws f -> {i : nat | emb (f i) w /\\ i < length ws}"], "goal_after": ["forall (w0 : word) (ws0 : list word),\nemb w0 w ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "proof_term_before": [], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) \n   ?Goal ?Goal0 ws H)"]}, {"text": "intros.", "goal_before": ["forall (w0 : word) (ws0 : list word),\nemb w0 w ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "goal_after": ["{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) \n   ?Goal ?Goal0 ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) => ?Goal0) \n   ?Goal ws H)"]}, {"text": "exists (length ws0).", "goal_before": ["{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "goal_after": ["emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0)", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) => ?Goal0) \n   ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0) ?Goal0) ?Goal ws H)"]}, {"text": "inversion_clear H0.", "goal_before": ["emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0)", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "goal_after": ["emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0)", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0) ?Goal0) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (H15 : is_prefix word ws0 f) =>\n                          ?Goal0@{H1:=H14; H2:=H15}) H13) H11) H9) H7) H6) H3\n                H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl)) ?Goal ws H)"]}, {"text": "split.", "goal_before": ["emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0)", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "goal_after": ["emb (f (length ws0)) w", "length ws0 < length (w0 :: ws0)", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (H15 : is_prefix word ws0 f) =>\n                          ?Goal0@{H1:=H14; H2:=H15}) H13) H11) H9) H7) H6) H3\n                H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl)) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (H15 : is_prefix word ws0 f) =>\n                          conj ?Goal0@{H1:=H14; H2:=H15}\n                            ?Goal1@{H1:=H14; H2:=H15}) H13) H11) H9) H7) H6)\n                H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl)) ?Goal ws H)"]}, {"text": "rewrite H1 in e.", "goal_before": ["emb (f (length ws0)) w", "length ws0 < length (w0 :: ws0)", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "goal_after": ["emb (f (length ws0)) w", "length ws0 < length (w0 :: ws0)", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (H15 : is_prefix word ws0 f) =>\n                          conj ?Goal0@{H1:=H14; H2:=H15}\n                            ?Goal1@{H1:=H14; H2:=H15}) H13) H11) H9) H7) H6)\n                H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl)) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (H15 : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             ?Goal1@{e:=e0; H1:=H14; H2:=H15})\n                            ?Goal0@{H1:=H14; H2:=H15}) H13) H11) H9) H7) H6)\n                H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl)) ?Goal ws H)"]}, {"text": "assumption.", "goal_before": ["emb (f (length ws0)) w", "length ws0 < length (w0 :: ws0)", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "goal_after": ["length ws0 < length (w0 :: ws0)", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (H15 : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             ?Goal1@{e:=e0; H1:=H14; H2:=H15})\n                            ?Goal0@{H1:=H14; H2:=H15}) H13) H11) H9) H7) H6)\n                H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl)) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (H15 : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0) ?Goal0@{H1:=H14; H2:=H15}) H13) H11) H9) H7)\n                 H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl)) ?Goal ws H)"]}, {"text": "auto.", "goal_before": ["length ws0 < length (w0 :: ws0)", "forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "goal_after": ["forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (H15 : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0) ?Goal0@{H1:=H14; H2:=H15}) H13) H11) H9) H7)\n                 H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl)) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl)) ?Goal ws H)"]}, {"text": "intros.", "goal_before": ["forall (w0 : word) (ws0 : list word),\nL w ws0 ->\n(is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0}) ->\nis_prefix word (w0 :: ws0) f ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "goal_after": ["{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl)) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) => ?Goal) ws H)"]}, {"text": "cut (is_prefix word ws0 f).", "goal_before": ["{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}"], "goal_after": ["is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) => ?Goal) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal0 in ?Goal H2) ws H)"]}, {"text": "intro.", "goal_before": ["is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "is_prefix word ws0 f"], "goal_after": ["{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal0 in ?Goal H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f => ?Goal0@{H2:=H3}) H2) ws H)"]}, {"text": "elim (H0 H2).", "goal_before": ["{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "is_prefix word ws0 f"], "goal_after": ["forall x : nat,\nemb (f x) w /\\ x < length ws0 ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f => ?Goal0@{H2:=H3}) H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}) \n       ?Goal0@{H2:=H3} (H0 H3)) H2) ws H)"]}, {"text": "intros.", "goal_before": ["forall x : nat,\nemb (f x) w /\\ x < length ws0 ->\n{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "is_prefix word ws0 f"], "goal_after": ["{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}) \n       ?Goal0@{H2:=H3} (H0 H3)) H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) => ?Goal0@{H2:=H3})\n       (H0 H3)) H2) ws H)"]}, {"text": "exists x.", "goal_before": ["{i : nat | emb (f i) w /\\ i < length (w0 :: ws0)}", "is_prefix word ws0 f"], "goal_after": ["emb (f x) w /\\ x < length (w0 :: ws0)", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) => ?Goal0@{H2:=H3})\n       (H0 H3)) H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          ?Goal0@{H2:=H3}) (H0 H3)) H2) ws H)"]}, {"text": "elim p.", "goal_before": ["emb (f x) w /\\ x < length (w0 :: ws0)", "is_prefix word ws0 f"], "goal_after": ["emb (f x) w -> x < length ws0 -> emb (f x) w /\\ x < length (w0 :: ws0)", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          ?Goal0@{H2:=H3}) (H0 H3)) H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind ?Goal0@{H2:=H3} p)) (H0 H3)) H2) ws H)"]}, {"text": "split.", "goal_before": ["emb (f x) w -> x < length ws0 -> emb (f x) w /\\ x < length (w0 :: ws0)", "is_prefix word ws0 f"], "goal_after": ["emb (f x) w", "x < length (w0 :: ws0)", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind ?Goal0@{H2:=H3} p)) (H0 H3)) H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj ?Goal0@{H2:=H3; H3:=H4; H4:=H5}\n                ?Goal1@{H2:=H3; H3:=H4; H4:=H5}) p)) \n       (H0 H3)) H2) ws H)"]}, {"text": "assumption.", "goal_before": ["emb (f x) w", "x < length (w0 :: ws0)", "is_prefix word ws0 f"], "goal_after": ["x < length (w0 :: ws0)", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj ?Goal0@{H2:=H3; H3:=H4; H4:=H5}\n                ?Goal1@{H2:=H3; H3:=H4; H4:=H5}) p)) \n       (H0 H3)) H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj H4 ?Goal0@{H2:=H3; H3:=H4; H4:=H5}) p)) \n       (H0 H3)) H2) ws H)"]}, {"text": "apply (le_S (S x) (length ws0)).", "goal_before": ["x < length (w0 :: ws0)", "is_prefix word ws0 f"], "goal_after": ["S x <= length ws0", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj H4 ?Goal0@{H2:=H3; H3:=H4; H4:=H5}) p)) \n       (H0 H3)) H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj H4\n                (le_S (S x) (length ws0) ?Goal0@{H2:=H3; H3:=H4; H4:=H5})) p))\n       (H0 H3)) H2) ws H)"]}, {"text": "assumption.", "goal_before": ["S x <= length ws0", "is_prefix word ws0 f"], "goal_after": ["is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj H4\n                (le_S (S x) (length ws0) ?Goal0@{H2:=H3; H3:=H4; H4:=H5})) p))\n       (H0 H3)) H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj H4 (le_S (S x) (length ws0) H5)) p)) \n       (H0 H3)) H2) ws H)"]}, {"text": "inversion H1.", "goal_before": ["is_prefix word ws0 f"], "goal_after": ["is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj H4 (le_S (S x) (length ws0) H5)) p)) \n       (H0 H3)) H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f :=\n      let H2 : w0 :: ws0 = w0 :: ws0 -> f = f -> is_prefix word ws0 f :=\n        match\n          H1 in (is_prefix _ l0 y)\n          return (l0 = w0 :: ws0 -> y = f -> is_prefix word ws0 f)\n        with\n        | is_prefix_nil _ f0 =>\n            (fun (f1 : nat -> word) (H2 : nil = w0 :: ws0) (H3 : f1 = f) =>\n             (fun H4 : nil = w0 :: ws0 =>\n              let H5 : False :=\n                eq_ind nil\n                  (fun e : list word =>\n                   match e with\n                   | nil => True\n                   | _ :: _ => False\n                   end) I (w0 :: ws0) H4 in\n              False_ind (f1 = f -> is_prefix word ws0 f) H5) H2 H3) f0\n        | is_prefix_cons _ f0 x xs x0 x1 =>\n            (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n               (H2 : x2 = f1 (length xs0)) (H3 : is_prefix word xs0 f1)\n               (H4 : x2 :: xs0 = w0 :: ws0) (H5 : f1 = f) =>\n             (fun H6 : x2 :: xs0 = w0 :: ws0 =>\n              let H7 : xs0 = ws0 :=\n                f_equal\n                  (fun e : list word =>\n                   match e with\n                   | nil => xs0\n                   | _ :: l0 => l0\n                   end) H6 in\n              (let H8 : x2 = w0 :=\n                 f_equal\n                   (fun e : list word =>\n                    match e with\n                    | nil => x2\n                    | w1 :: _ => w1\n                    end) H6 in\n               (fun H9 : x2 = w0 =>\n                let H10 : x2 = w0 := H9 in\n                eq_ind_r\n                  (fun w1 : word =>\n                   xs0 = ws0 ->\n                   f1 = f ->\n                   w1 = f1 (length xs0) ->\n                   is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                  (fun H11 : xs0 = ws0 =>\n                   let H12 : xs0 = ws0 := H11 in\n                   eq_ind_r\n                     (fun l0 : list word =>\n                      f1 = f ->\n                      w0 = f1 (length l0) ->\n                      is_prefix word l0 f1 -> is_prefix word ws0 f)\n                     (fun H13 : f1 = f =>\n                      let H14 : f1 = f := H13 in\n                      eq_ind_r\n                        (fun w1 : nat -> word =>\n                         w0 = w1 (length ws0) ->\n                         is_prefix word ws0 w1 -> is_prefix word ws0 f)\n                        (fun (H15 : w0 = f (length ws0))\n                           (H16 : is_prefix word ws0 f) =>\n                         ?Goal@{f0:=f1; x:=x2; xs:=xs0; H4:=H15; H6:=H16;\n                                H2:=H9; H3:=H11; H5:=H13}) H14) H12) H10) H8)\n                H7) H4 H5 H2 H3) f0 x xs x0 x1\n        end in\n      H2 eq_refl eq_refl in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj H4 (le_S (S x) (length ws0) H5)) p)) \n       (H0 H3)) H2) ws H)"]}, {"text": "assumption.", "goal_before": ["is_prefix word ws0 f"], "goal_after": [], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (l : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f :=\n      let H2 : w0 :: ws0 = w0 :: ws0 -> f = f -> is_prefix word ws0 f :=\n        match\n          H1 in (is_prefix _ l0 y)\n          return (l0 = w0 :: ws0 -> y = f -> is_prefix word ws0 f)\n        with\n        | is_prefix_nil _ f0 =>\n            (fun (f1 : nat -> word) (H2 : nil = w0 :: ws0) (H3 : f1 = f) =>\n             (fun H4 : nil = w0 :: ws0 =>\n              let H5 : False :=\n                eq_ind nil\n                  (fun e : list word =>\n                   match e with\n                   | nil => True\n                   | _ :: _ => False\n                   end) I (w0 :: ws0) H4 in\n              False_ind (f1 = f -> is_prefix word ws0 f) H5) H2 H3) f0\n        | is_prefix_cons _ f0 x xs x0 x1 =>\n            (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n               (H2 : x2 = f1 (length xs0)) (H3 : is_prefix word xs0 f1)\n               (H4 : x2 :: xs0 = w0 :: ws0) (H5 : f1 = f) =>\n             (fun H6 : x2 :: xs0 = w0 :: ws0 =>\n              let H7 : xs0 = ws0 :=\n                f_equal\n                  (fun e : list word =>\n                   match e with\n                   | nil => xs0\n                   | _ :: l0 => l0\n                   end) H6 in\n              (let H8 : x2 = w0 :=\n                 f_equal\n                   (fun e : list word =>\n                    match e with\n                    | nil => x2\n                    | w1 :: _ => w1\n                    end) H6 in\n               (fun H9 : x2 = w0 =>\n                let H10 : x2 = w0 := H9 in\n                eq_ind_r\n                  (fun w1 : word =>\n                   xs0 = ws0 ->\n                   f1 = f ->\n                   w1 = f1 (length xs0) ->\n                   is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                  (fun H11 : xs0 = ws0 =>\n                   let H12 : xs0 = ws0 := H11 in\n                   eq_ind_r\n                     (fun l0 : list word =>\n                      f1 = f ->\n                      w0 = f1 (length l0) ->\n                      is_prefix word l0 f1 -> is_prefix word ws0 f)\n                     (fun H13 : f1 = f =>\n                      let H14 : f1 = f := H13 in\n                      eq_ind_r\n                        (fun w1 : nat -> word =>\n                         w0 = w1 (length ws0) ->\n                         is_prefix word ws0 w1 -> is_prefix word ws0 f)\n                        (fun (H15 : w0 = f (length ws0))\n                           (H16 : is_prefix word ws0 f) =>\n                         ?Goal@{f0:=f1; x:=x2; xs:=xs0; H4:=H15; H6:=H16;\n                                H2:=H9; H3:=H11; H5:=H13}) H14) H12) H10) H8)\n                H7) H4 H5 H2 H3) f0 x xs x0 x1\n        end in\n      H2 eq_refl eq_refl in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj H4 (le_S (S x) (length ws0) H5)) p)) \n       (H0 H3)) H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (_ : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f :=\n      let H2 : w0 :: ws0 = w0 :: ws0 -> f = f -> is_prefix word ws0 f :=\n        match\n          H1 in (is_prefix _ l0 y)\n          return (l0 = w0 :: ws0 -> y = f -> is_prefix word ws0 f)\n        with\n        | is_prefix_nil _ f0 =>\n            (fun (f1 : nat -> word) (H2 : nil = w0 :: ws0) (H3 : f1 = f) =>\n             (fun H4 : nil = w0 :: ws0 =>\n              let H5 : False :=\n                eq_ind nil\n                  (fun e : list word =>\n                   match e with\n                   | nil => True\n                   | _ :: _ => False\n                   end) I (w0 :: ws0) H4 in\n              False_ind (f1 = f -> is_prefix word ws0 f) H5) H2 H3) f0\n        | is_prefix_cons _ f0 x xs x0 x1 =>\n            (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n               (H2 : x2 = f1 (length xs0)) (H3 : is_prefix word xs0 f1)\n               (H4 : x2 :: xs0 = w0 :: ws0) (H5 : f1 = f) =>\n             (fun H6 : x2 :: xs0 = w0 :: ws0 =>\n              let H7 : xs0 = ws0 :=\n                f_equal\n                  (fun e : list word =>\n                   match e with\n                   | nil => xs0\n                   | _ :: l0 => l0\n                   end) H6 in\n              (let H8 : x2 = w0 :=\n                 f_equal\n                   (fun e : list word =>\n                    match e with\n                    | nil => x2\n                    | w1 :: _ => w1\n                    end) H6 in\n               (fun H9 : x2 = w0 =>\n                let H10 : x2 = w0 := H9 in\n                eq_ind_r\n                  (fun w1 : word =>\n                   xs0 = ws0 ->\n                   f1 = f ->\n                   w1 = f1 (length xs0) ->\n                   is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                  (fun H11 : xs0 = ws0 =>\n                   let H12 : xs0 = ws0 := H11 in\n                   eq_ind_r\n                     (fun l0 : list word =>\n                      f1 = f ->\n                      w0 = f1 (length l0) ->\n                      is_prefix word l0 f1 -> is_prefix word ws0 f)\n                     (fun H13 : f1 = f =>\n                      let H14 : f1 = f := H13 in\n                      eq_ind_r\n                        (fun w1 : nat -> word =>\n                         w0 = w1 (length ws0) ->\n                         is_prefix word ws0 w1 -> is_prefix word ws0 f)\n                        (fun (_ : w0 = f (length ws0))\n                           (H16 : is_prefix word ws0 f) => H16) H14) H12) H10)\n                 H8) H7) H4 H5 H2 H3) f0 x xs x0 x1\n        end in\n      H2 eq_refl eq_refl in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj H4 (le_S (S x) (length ws0) H5)) p)) \n       (H0 H3)) H2) ws H)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun (f : nat -> word) (w : word) (ws : list word) (H : L w ws) =>\n L_rec w\n   (fun (ws0 : list word) (_ : L w ws0) =>\n    is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n   (fun (w0 : word) (ws0 : list word) (e : emb w0 w)\n      (H0 : is_prefix word (w0 :: ws0) f) =>\n    exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) \n      (length ws0)\n      (let H1 :\n         w0 :: ws0 = w0 :: ws0 ->\n         f = f -> emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0) :=\n         match\n           H0 in (is_prefix _ l y)\n           return\n             (l = w0 :: ws0 ->\n              y = f ->\n              emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n         with\n         | is_prefix_nil _ f0 =>\n             (fun (f1 : nat -> word) (H1 : nil = w0 :: ws0) (H2 : f1 = f) =>\n              (fun H3 : nil = w0 :: ws0 =>\n               let H4 : False :=\n                 eq_ind nil\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => True\n                    | _ :: _ => False\n                    end) I (w0 :: ws0) H3 in\n               False_ind\n                 (f1 = f ->\n                  emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                 H4) H1 H2) f0\n         | is_prefix_cons _ f0 x xs x0 x1 =>\n             (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n                (H1 : x2 = f1 (length xs0)) (H2 : is_prefix word xs0 f1)\n                (H3 : x2 :: xs0 = w0 :: ws0) (H4 : f1 = f) =>\n              (fun H5 : x2 :: xs0 = w0 :: ws0 =>\n               let H6 : xs0 = ws0 :=\n                 f_equal\n                   (fun e0 : list word =>\n                    match e0 with\n                    | nil => xs0\n                    | _ :: l => l\n                    end) H5 in\n               (let H7 : x2 = w0 :=\n                  f_equal\n                    (fun e0 : list word =>\n                     match e0 with\n                     | nil => x2\n                     | w1 :: _ => w1\n                     end) H5 in\n                (fun H8 : x2 = w0 =>\n                 let H9 : x2 = w0 := H8 in\n                 eq_ind_r\n                   (fun w1 : word =>\n                    xs0 = ws0 ->\n                    f1 = f ->\n                    w1 = f1 (length xs0) ->\n                    is_prefix word xs0 f1 ->\n                    emb (f (length ws0)) w /\\ length ws0 < length (w0 :: ws0))\n                   (fun H10 : xs0 = ws0 =>\n                    let H11 : xs0 = ws0 := H10 in\n                    eq_ind_r\n                      (fun l : list word =>\n                       f1 = f ->\n                       w0 = f1 (length l) ->\n                       is_prefix word l f1 ->\n                       emb (f (length ws0)) w /\\\n                       length ws0 < length (w0 :: ws0))\n                      (fun H12 : f1 = f =>\n                       let H13 : f1 = f := H12 in\n                       eq_ind_r\n                         (fun w1 : nat -> word =>\n                          w0 = w1 (length ws0) ->\n                          is_prefix word ws0 w1 ->\n                          emb (f (length ws0)) w /\\\n                          length ws0 < length (w0 :: ws0))\n                         (fun (H14 : w0 = f (length ws0))\n                            (_ : is_prefix word ws0 f) =>\n                          conj\n                            (let e0 : emb (f (length ws0)) w :=\n                               eq_ind w0 (fun w1 : word => emb w1 w) e\n                                 (f (length ws0)) H14 in\n                             e0)\n                            (le_n (length (w0 :: ws0))\n                             :\n                             length ws0 < length (w0 :: ws0))) H13) H11) H9)\n                  H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n         end in\n       H1 eq_refl eq_refl))\n   (fun (w0 : word) (ws0 : list word) (_ : L w ws0)\n      (H0 : is_prefix word ws0 f -> {i : nat | emb (f i) w /\\ i < length ws0})\n      (H1 : is_prefix word (w0 :: ws0) f) =>\n    let H2 : is_prefix word ws0 f :=\n      let H2 : w0 :: ws0 = w0 :: ws0 -> f = f -> is_prefix word ws0 f :=\n        match\n          H1 in (is_prefix _ l0 y)\n          return (l0 = w0 :: ws0 -> y = f -> is_prefix word ws0 f)\n        with\n        | is_prefix_nil _ f0 =>\n            (fun (f1 : nat -> word) (H2 : nil = w0 :: ws0) (H3 : f1 = f) =>\n             (fun H4 : nil = w0 :: ws0 =>\n              let H5 : False :=\n                eq_ind nil\n                  (fun e : list word =>\n                   match e with\n                   | nil => True\n                   | _ :: _ => False\n                   end) I (w0 :: ws0) H4 in\n              False_ind (f1 = f -> is_prefix word ws0 f) H5) H2 H3) f0\n        | is_prefix_cons _ f0 x xs x0 x1 =>\n            (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n               (H2 : x2 = f1 (length xs0)) (H3 : is_prefix word xs0 f1)\n               (H4 : x2 :: xs0 = w0 :: ws0) (H5 : f1 = f) =>\n             (fun H6 : x2 :: xs0 = w0 :: ws0 =>\n              let H7 : xs0 = ws0 :=\n                f_equal\n                  (fun e : list word =>\n                   match e with\n                   | nil => xs0\n                   | _ :: l0 => l0\n                   end) H6 in\n              (let H8 : x2 = w0 :=\n                 f_equal\n                   (fun e : list word =>\n                    match e with\n                    | nil => x2\n                    | w1 :: _ => w1\n                    end) H6 in\n               (fun H9 : x2 = w0 =>\n                let H10 : x2 = w0 := H9 in\n                eq_ind_r\n                  (fun w1 : word =>\n                   xs0 = ws0 ->\n                   f1 = f ->\n                   w1 = f1 (length xs0) ->\n                   is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                  (fun H11 : xs0 = ws0 =>\n                   let H12 : xs0 = ws0 := H11 in\n                   eq_ind_r\n                     (fun l0 : list word =>\n                      f1 = f ->\n                      w0 = f1 (length l0) ->\n                      is_prefix word l0 f1 -> is_prefix word ws0 f)\n                     (fun H13 : f1 = f =>\n                      let H14 : f1 = f := H13 in\n                      eq_ind_r\n                        (fun w1 : nat -> word =>\n                         w0 = w1 (length ws0) ->\n                         is_prefix word ws0 w1 -> is_prefix word ws0 f)\n                        (fun (_ : w0 = f (length ws0))\n                           (H16 : is_prefix word ws0 f) => H16) H14) H12) H10)\n                 H8) H7) H4 H5 H2 H3) f0 x xs x0 x1\n        end in\n      H2 eq_refl eq_refl in\n    (fun H3 : is_prefix word ws0 f =>\n     sig_rec\n       (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n        {i : nat | emb (f i) w /\\ i < length (w0 :: ws0)})\n       (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n        exist (fun i : nat => emb (f i) w /\\ i < length (w0 :: ws0)) x\n          (and_ind\n             (fun (H4 : emb (f x) w) (H5 : x < length ws0) =>\n              conj H4 (le_S (S x) (length ws0) H5)) p)) \n       (H0 H3)) H2) ws H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "good_idx", "text": "Theorem good_idx :\n forall (f : nat -> word) (ws : list word),\n good ws ->\n is_prefix word ws f -> {i : nat &  {j : nat | emb (f i) (f j) /\\ i < j}}.\nsimple induction 1.\nintros.\nelim (L_idx f w ws0 l).\nintros.\nexists x.\nexists (length ws0).\nelim p.\nintros.\ninversion H0.\nsplit.\nrewrite H5 in H1.\nassumption.\nassumption.\ninversion H0.\nassumption.\nintros.\ncut (is_prefix word ws0 f).\nassumption.\ninversion H1.\nassumption.\nDefined.\n", "definition": "\n forall (f : nat -> word) (ws : list word),\n good ws ->\n is_prefix word ws f -> {i : nat &  {j : nat | emb (f i) (f j) /\\ i < j}}.", "proof": "\nsimple induction 1.\nintros.\nelim (L_idx f w ws0 l).\nintros.\nexists x.\nexists (length ws0).\nelim p.\nintros.\ninversion H0.\nsplit.\nrewrite H5 in H1.\nassumption.\nassumption.\ninversion H0.\nassumption.\nintros.\ncut (is_prefix word ws0 f).\nassumption.\ninversion H1.\nassumption.\n", "def_ranges": [215, 0, 218, 74], "proof_ranges": [219, 0, 239, 8], "proof_steps": [{"text": "simple induction 1.", "goal_before": ["forall (f : nat -> word) (ws : list word),\ngood ws ->\nis_prefix word ws f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["forall (ws0 : list word) (w : word),\nL w ws0 ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": [], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   ?Goal ?Goal0 ws H)"]}, {"text": "intros.", "goal_before": ["forall (ws0 : list word) (w : word),\nL w ws0 ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   ?Goal ?Goal0 ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) => ?Goal0) \n   ?Goal ws H)"]}, {"text": "elim (L_idx f w ws0 l).", "goal_before": ["{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["forall x : nat,\nemb (f x) w /\\ x < length ws0 ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) => ?Goal0) \n   ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) \n      ?Goal0 (L_idx f w ws0 l ?Goal1)) ?Goal ws H)"]}, {"text": "intros.", "goal_before": ["forall x : nat,\nemb (f x) w /\\ x < length ws0 ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) \n      ?Goal0 (L_idx f w ws0 l ?Goal1)) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) => ?Goal1)\n      (L_idx f w ws0 l ?Goal0)) ?Goal ws H)"]}, {"text": "exists x.", "goal_before": ["{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["{j : nat | emb (f x) (f j) /\\ x < j}", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) => ?Goal1)\n      (L_idx f w ws0 l ?Goal0)) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x ?Goal1)\n      (L_idx f w ws0 l ?Goal0)) ?Goal ws H)"]}, {"text": "exists (length ws0).", "goal_before": ["{j : nat | emb (f x) (f j) /\\ x < j}", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["emb (f x) (f (length ws0)) /\\ x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x ?Goal1)\n      (L_idx f w ws0 l ?Goal0)) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) (length ws0) ?Goal1))\n      (L_idx f w ws0 l ?Goal0)) ?Goal ws H)"]}, {"text": "elim p.", "goal_before": ["emb (f x) (f (length ws0)) /\\ x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["emb (f x) w -> x < length ws0 -> emb (f x) (f (length ws0)) /\\ x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) (length ws0) ?Goal1))\n      (L_idx f w ws0 l ?Goal0)) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0) (and_ind ?Goal1 p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"]}, {"text": "intros.", "goal_before": ["emb (f x) w -> x < length ws0 -> emb (f x) (f (length ws0)) /\\ x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["emb (f x) (f (length ws0)) /\\ x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0) (and_ind ?Goal1 p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind (fun (H1 : emb (f x) w) (H2 : x < length ws0) => ?Goal1)\n               p))) (L_idx f w ws0 l ?Goal0)) ?Goal ws H)"]}, {"text": "inversion H0.", "goal_before": ["emb (f x) (f (length ws0)) /\\ x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["emb (f x) (f (length ws0)) /\\ x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind (fun (H1 : emb (f x) w) (H2 : x < length ws0) => ?Goal1)\n               p))) (L_idx f w ws0 l ?Goal0)) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (H17 : is_prefix word ws0 f) =>\n                                   ?Goal1@{f0:=f1; x0:=x3; xs:=xs0; H5:=H16;\n                                           H7:=H17; H3:=H10; H4:=H12; H6:=H14})\n                                  H15) H13) H11) H9) H8) H5 H6 H3 H4) f0 x0\n                        xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"]}, {"text": "split.", "goal_before": ["emb (f x) (f (length ws0)) /\\ x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["emb (f x) (f (length ws0))", "x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (H17 : is_prefix word ws0 f) =>\n                                   ?Goal1@{f0:=f1; x0:=x3; xs:=xs0; H5:=H16;\n                                           H7:=H17; H3:=H10; H4:=H12; H6:=H14})\n                                  H15) H13) H11) H9) H8) H5 H6 H3 H4) f0 x0\n                        xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (H17 : is_prefix word ws0 f) =>\n                                   conj\n                                     ?Goal1@{f0:=f1; x0:=x3; xs:=xs0;\n                                             H5:=H16; H7:=H17; H3:=H10;\n                                             H4:=H12; H6:=H14}\n                                     ?Goal2@{f0:=f1; x0:=x3; xs:=xs0;\n                                             H5:=H16; H7:=H17; H3:=H10;\n                                             H4:=H12; H6:=H14}) H15) H13) H11)\n                           H9) H8) H5 H6 H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"]}, {"text": "rewrite H5 in H1.", "goal_before": ["emb (f x) (f (length ws0))", "x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["emb (f x) (f (length ws0))", "x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (H17 : is_prefix word ws0 f) =>\n                                   conj\n                                     ?Goal1@{f0:=f1; x0:=x3; xs:=xs0;\n                                             H5:=H16; H7:=H17; H3:=H10;\n                                             H4:=H12; H6:=H14}\n                                     ?Goal2@{f0:=f1; x0:=x3; xs:=xs0;\n                                             H5:=H16; H7:=H17; H3:=H10;\n                                             H4:=H12; H6:=H14}) H15) H13) H11)\n                           H9) H8) H5 H6 H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (H17 : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      ?Goal2@{H1:=H18; f0:=f1; x0:=x3;\n                                              xs:=xs0; H5:=H16; H7:=H17;\n                                              H3:=H10; H4:=H12; H6:=H14})\n                                     ?Goal1@{f0:=f1; x0:=x3; xs:=xs0;\n                                             H5:=H16; H7:=H17; H3:=H10;\n                                             H4:=H12; H6:=H14}) H15) H13) H11)\n                           H9) H8) H5 H6 H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"]}, {"text": "assumption.", "goal_before": ["emb (f x) (f (length ws0))", "x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (H17 : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      ?Goal2@{H1:=H18; f0:=f1; x0:=x3;\n                                              xs:=xs0; H5:=H16; H7:=H17;\n                                              H3:=H10; H4:=H12; H6:=H14})\n                                     ?Goal1@{f0:=f1; x0:=x3; xs:=xs0;\n                                             H5:=H16; H7:=H17; H3:=H10;\n                                             H4:=H12; H6:=H14}) H15) H13) H11)\n                           H9) H8) H5 H6 H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (H17 : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18)\n                                     ?Goal1@{f0:=f1; x0:=x3; xs:=xs0;\n                                             H5:=H16; H7:=H17; H3:=H10;\n                                             H4:=H12; H6:=H14}) H15) H13) H11)\n                           H9) H8) H5 H6 H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"]}, {"text": "assumption.", "goal_before": ["x < length ws0", "is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (H17 : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18)\n                                     ?Goal1@{f0:=f1; x0:=x3; xs:=xs0;\n                                             H5:=H16; H7:=H17; H3:=H10;\n                                             H4:=H12; H6:=H14}) H15) H13) H11)\n                           H9) H8) H5 H6 H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"]}, {"text": "inversion H0.", "goal_before": ["is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p))) (L_idx f w ws0 l ?Goal0)) \n   ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (H14 : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) =>\n                             ?Goal0@{f0:=f1; x:=x2; xs:=xs0; H3:=H14;\n                                     H5:=H15; H1:=H8; H2:=H10; H4:=H12}) H13)\n                         H11) H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl))) ?Goal ws H)"]}, {"text": "assumption.", "goal_before": ["is_prefix word ws0 f", "forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (H14 : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) =>\n                             ?Goal0@{f0:=f1; x:=x2; xs:=xs0; H3:=H14;\n                                     H5:=H15; H1:=H8; H2:=H10; H4:=H12}) H13)\n                         H11) H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl))) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl))) ?Goal ws H)"]}, {"text": "intros.", "goal_before": ["forall (ws0 : list word) (w : word),\ngood ws0 ->\n(is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word (w :: ws0) f ->\n{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl))) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl)))\n   (fun (ws0 : list word) (w : word) (g : good ws0)\n      (H0 : is_prefix word ws0 f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word (w :: ws0) f) => ?Goal) ws H)"]}, {"text": "cut (is_prefix word ws0 f).", "goal_before": ["{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl)))\n   (fun (ws0 : list word) (w : word) (g : good ws0)\n      (H0 : is_prefix word ws0 f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word (w :: ws0) f) => ?Goal) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl)))\n   (fun (ws0 : list word) (w : word) (g : good ws0)\n      (H0 : is_prefix word ws0 f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word (w :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal0 in ?Goal H2) ws H)"]}, {"text": "assumption.", "goal_before": ["is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "is_prefix word ws0 f"], "goal_after": ["is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl)))\n   (fun (ws0 : list word) (w : word) (g : good ws0)\n      (H0 : is_prefix word ws0 f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word (w :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal0 in ?Goal H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl)))\n   (fun (ws0 : list word) (w : word) (g : good ws0)\n      (H0 : is_prefix word ws0 f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word (w :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in H0 H2) ws H)"]}, {"text": "inversion H1.", "goal_before": ["is_prefix word ws0 f"], "goal_after": ["is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl)))\n   (fun (ws0 : list word) (w : word) (g : good ws0)\n      (H0 : is_prefix word ws0 f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word (w :: ws0) f) =>\n    let H2 : is_prefix word ws0 f := ?Goal in H0 H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl)))\n   (fun (ws0 : list word) (w : word) (g : good ws0)\n      (H0 : is_prefix word ws0 f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word (w :: ws0) f) =>\n    let H2 : is_prefix word ws0 f :=\n      let H2 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n        match\n          H1 in (is_prefix _ l y)\n          return (l = w :: ws0 -> y = f -> is_prefix word ws0 f)\n        with\n        | is_prefix_nil _ f0 =>\n            (fun (f1 : nat -> word) (H2 : nil = w :: ws0) (H3 : f1 = f) =>\n             (fun H4 : nil = w :: ws0 =>\n              let H5 : False :=\n                eq_ind nil\n                  (fun e : list word =>\n                   match e with\n                   | nil => True\n                   | _ :: _ => False\n                   end) I (w :: ws0) H4 in\n              False_ind (f1 = f -> is_prefix word ws0 f) H5) H2 H3) f0\n        | is_prefix_cons _ f0 x xs x0 x1 =>\n            (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n               (H2 : x2 = f1 (length xs0)) (H3 : is_prefix word xs0 f1)\n               (H4 : x2 :: xs0 = w :: ws0) (H5 : f1 = f) =>\n             (fun H6 : x2 :: xs0 = w :: ws0 =>\n              let H7 : xs0 = ws0 :=\n                f_equal\n                  (fun e : list word =>\n                   match e with\n                   | nil => xs0\n                   | _ :: l => l\n                   end) H6 in\n              (let H8 : x2 = w :=\n                 f_equal\n                   (fun e : list word =>\n                    match e with\n                    | nil => x2\n                    | w0 :: _ => w0\n                    end) H6 in\n               (fun H9 : x2 = w =>\n                let H10 : x2 = w := H9 in\n                eq_ind_r\n                  (fun w0 : word =>\n                   xs0 = ws0 ->\n                   f1 = f ->\n                   w0 = f1 (length xs0) ->\n                   is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                  (fun H11 : xs0 = ws0 =>\n                   let H12 : xs0 = ws0 := H11 in\n                   eq_ind_r\n                     (fun l : list word =>\n                      f1 = f ->\n                      w = f1 (length l) ->\n                      is_prefix word l f1 -> is_prefix word ws0 f)\n                     (fun H13 : f1 = f =>\n                      let H14 : f1 = f := H13 in\n                      eq_ind_r\n                        (fun w0 : nat -> word =>\n                         w = w0 (length ws0) ->\n                         is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                        (fun (H15 : w = f (length ws0))\n                           (H16 : is_prefix word ws0 f) =>\n                         ?Goal@{f0:=f1; x:=x2; xs:=xs0; H4:=H15; H6:=H16;\n                                H2:=H9; H3:=H11; H5:=H13}) H14) H12) H10) H8)\n                H7) H4 H5 H2 H3) f0 x xs x0 x1\n        end in\n      H2 eq_refl eq_refl in\n    H0 H2) ws H)"]}, {"text": "assumption.", "goal_before": ["is_prefix word ws0 f"], "goal_after": [], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl)))\n   (fun (ws0 : list word) (w : word) (g : good ws0)\n      (H0 : is_prefix word ws0 f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word (w :: ws0) f) =>\n    let H2 : is_prefix word ws0 f :=\n      let H2 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n        match\n          H1 in (is_prefix _ l y)\n          return (l = w :: ws0 -> y = f -> is_prefix word ws0 f)\n        with\n        | is_prefix_nil _ f0 =>\n            (fun (f1 : nat -> word) (H2 : nil = w :: ws0) (H3 : f1 = f) =>\n             (fun H4 : nil = w :: ws0 =>\n              let H5 : False :=\n                eq_ind nil\n                  (fun e : list word =>\n                   match e with\n                   | nil => True\n                   | _ :: _ => False\n                   end) I (w :: ws0) H4 in\n              False_ind (f1 = f -> is_prefix word ws0 f) H5) H2 H3) f0\n        | is_prefix_cons _ f0 x xs x0 x1 =>\n            (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n               (H2 : x2 = f1 (length xs0)) (H3 : is_prefix word xs0 f1)\n               (H4 : x2 :: xs0 = w :: ws0) (H5 : f1 = f) =>\n             (fun H6 : x2 :: xs0 = w :: ws0 =>\n              let H7 : xs0 = ws0 :=\n                f_equal\n                  (fun e : list word =>\n                   match e with\n                   | nil => xs0\n                   | _ :: l => l\n                   end) H6 in\n              (let H8 : x2 = w :=\n                 f_equal\n                   (fun e : list word =>\n                    match e with\n                    | nil => x2\n                    | w0 :: _ => w0\n                    end) H6 in\n               (fun H9 : x2 = w =>\n                let H10 : x2 = w := H9 in\n                eq_ind_r\n                  (fun w0 : word =>\n                   xs0 = ws0 ->\n                   f1 = f ->\n                   w0 = f1 (length xs0) ->\n                   is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                  (fun H11 : xs0 = ws0 =>\n                   let H12 : xs0 = ws0 := H11 in\n                   eq_ind_r\n                     (fun l : list word =>\n                      f1 = f ->\n                      w = f1 (length l) ->\n                      is_prefix word l f1 -> is_prefix word ws0 f)\n                     (fun H13 : f1 = f =>\n                      let H14 : f1 = f := H13 in\n                      eq_ind_r\n                        (fun w0 : nat -> word =>\n                         w = w0 (length ws0) ->\n                         is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                        (fun (H15 : w = f (length ws0))\n                           (H16 : is_prefix word ws0 f) =>\n                         ?Goal@{f0:=f1; x:=x2; xs:=xs0; H4:=H15; H6:=H16;\n                                H2:=H9; H3:=H11; H5:=H13}) H14) H12) H10) H8)\n                H7) H4 H5 H2 H3) f0 x xs x0 x1\n        end in\n      H2 eq_refl eq_refl in\n    H0 H2) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl)))\n   (fun (ws0 : list word) (w : word) (_ : good ws0)\n      (H0 : is_prefix word ws0 f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word (w :: ws0) f) =>\n    let H2 : is_prefix word ws0 f :=\n      let H2 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n        match\n          H1 in (is_prefix _ l y)\n          return (l = w :: ws0 -> y = f -> is_prefix word ws0 f)\n        with\n        | is_prefix_nil _ f0 =>\n            (fun (f1 : nat -> word) (H2 : nil = w :: ws0) (H3 : f1 = f) =>\n             (fun H4 : nil = w :: ws0 =>\n              let H5 : False :=\n                eq_ind nil\n                  (fun e : list word =>\n                   match e with\n                   | nil => True\n                   | _ :: _ => False\n                   end) I (w :: ws0) H4 in\n              False_ind (f1 = f -> is_prefix word ws0 f) H5) H2 H3) f0\n        | is_prefix_cons _ f0 x xs x0 x1 =>\n            (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n               (H2 : x2 = f1 (length xs0)) (H3 : is_prefix word xs0 f1)\n               (H4 : x2 :: xs0 = w :: ws0) (H5 : f1 = f) =>\n             (fun H6 : x2 :: xs0 = w :: ws0 =>\n              let H7 : xs0 = ws0 :=\n                f_equal\n                  (fun e : list word =>\n                   match e with\n                   | nil => xs0\n                   | _ :: l => l\n                   end) H6 in\n              (let H8 : x2 = w :=\n                 f_equal\n                   (fun e : list word =>\n                    match e with\n                    | nil => x2\n                    | w0 :: _ => w0\n                    end) H6 in\n               (fun H9 : x2 = w =>\n                let H10 : x2 = w := H9 in\n                eq_ind_r\n                  (fun w0 : word =>\n                   xs0 = ws0 ->\n                   f1 = f ->\n                   w0 = f1 (length xs0) ->\n                   is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                  (fun H11 : xs0 = ws0 =>\n                   let H12 : xs0 = ws0 := H11 in\n                   eq_ind_r\n                     (fun l : list word =>\n                      f1 = f ->\n                      w = f1 (length l) ->\n                      is_prefix word l f1 -> is_prefix word ws0 f)\n                     (fun H13 : f1 = f =>\n                      let H14 : f1 = f := H13 in\n                      eq_ind_r\n                        (fun w0 : nat -> word =>\n                         w = w0 (length ws0) ->\n                         is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                        (fun (_ : w = f (length ws0))\n                           (H16 : is_prefix word ws0 f) => H16) H14) H12) H10)\n                 H8) H7) H4 H5 H2 H3) f0 x xs x0 x1\n        end in\n      H2 eq_refl eq_refl in\n    H0 H2) ws H)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : good ws) =>\n good_rec\n   (fun (ws0 : list word) (_ : good ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (fun (ws0 : list word) (w : word) (l : L w ws0)\n      (H0 : is_prefix word (w :: ws0) f) =>\n    sig_rec\n      (fun _ : {i : nat | emb (f i) w /\\ i < length ws0} =>\n       {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (fun (x : nat) (p : emb (f x) w /\\ x < length ws0) =>\n       existT (fun i : nat => {j : nat | emb (f i) (f j) /\\ i < j}) x\n         (exist (fun j : nat => emb (f x) (f j) /\\ x < j) \n            (length ws0)\n            (and_ind\n               (fun (H1 : emb (f x) w) (H2 : x < length ws0) =>\n                let H3 :\n                  w :: ws0 = w :: ws0 ->\n                  f = f -> emb (f x) (f (length ws0)) /\\ x < length ws0 :=\n                  match\n                    H0 in (is_prefix _ l0 y)\n                    return\n                      (l0 = w :: ws0 ->\n                       y = f -> emb (f x) (f (length ws0)) /\\ x < length ws0)\n                  with\n                  | is_prefix_nil _ f0 =>\n                      (fun (f1 : nat -> word) (H3 : nil = w :: ws0)\n                         (H4 : f1 = f) =>\n                       (fun H5 : nil = w :: ws0 =>\n                        let H6 : False :=\n                          eq_ind nil\n                            (fun e : list word =>\n                             match e with\n                             | nil => True\n                             | _ :: _ => False\n                             end) I (w :: ws0) H5 in\n                        False_ind\n                          (f1 = f ->\n                           emb (f x) (f (length ws0)) /\\ x < length ws0) H6)\n                         H3 H4) f0\n                  | is_prefix_cons _ f0 x0 xs x1 x2 =>\n                      (fun (f1 : nat -> word) (x3 : word) \n                         (xs0 : list word) (H3 : x3 = f1 (length xs0))\n                         (H4 : is_prefix word xs0 f1)\n                         (H5 : x3 :: xs0 = w :: ws0) \n                         (H6 : f1 = f) =>\n                       (fun H7 : x3 :: xs0 = w :: ws0 =>\n                        let H8 : xs0 = ws0 :=\n                          f_equal\n                            (fun e : list word =>\n                             match e with\n                             | nil => xs0\n                             | _ :: l0 => l0\n                             end) H7 in\n                        (let H9 : x3 = w :=\n                           f_equal\n                             (fun e : list word =>\n                              match e with\n                              | nil => x3\n                              | w0 :: _ => w0\n                              end) H7 in\n                         (fun H10 : x3 = w =>\n                          let H11 : x3 = w := H10 in\n                          eq_ind_r\n                            (fun w0 : word =>\n                             xs0 = ws0 ->\n                             f1 = f ->\n                             w0 = f1 (length xs0) ->\n                             is_prefix word xs0 f1 ->\n                             emb (f x) (f (length ws0)) /\\ x < length ws0)\n                            (fun H12 : xs0 = ws0 =>\n                             let H13 : xs0 = ws0 := H12 in\n                             eq_ind_r\n                               (fun l0 : list word =>\n                                f1 = f ->\n                                w = f1 (length l0) ->\n                                is_prefix word l0 f1 ->\n                                emb (f x) (f (length ws0)) /\\ x < length ws0)\n                               (fun H14 : f1 = f =>\n                                let H15 : f1 = f := H14 in\n                                eq_ind_r\n                                  (fun w0 : nat -> word =>\n                                   w = w0 (length ws0) ->\n                                   is_prefix word ws0 w0 ->\n                                   emb (f x) (f (length ws0)) /\\\n                                   x < length ws0)\n                                  (fun (H16 : w = f (length ws0))\n                                     (_ : is_prefix word ws0 f) =>\n                                   conj\n                                     (let H18 : emb (f x) (f (length ws0)) :=\n                                        eq_ind w\n                                          (fun w0 : word => emb (f x) w0) H1\n                                          (f (length ws0)) H16 in\n                                      H18) H2) H15) H13) H11) H9) H8) H5 H6\n                         H3 H4) f0 x0 xs x1 x2\n                  end in\n                H3 eq_refl eq_refl) p)))\n      (L_idx f w ws0 l\n         (let H1 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n            match\n              H0 in (is_prefix _ l0 y)\n              return (l0 = w :: ws0 -> y = f -> is_prefix word ws0 f)\n            with\n            | is_prefix_nil _ f0 =>\n                (fun (f1 : nat -> word) (H1 : nil = w :: ws0) (H2 : f1 = f)\n                 =>\n                 (fun H3 : nil = w :: ws0 =>\n                  let H4 : False :=\n                    eq_ind nil\n                      (fun e : list word =>\n                       match e with\n                       | nil => True\n                       | _ :: _ => False\n                       end) I (w :: ws0) H3 in\n                  False_ind (f1 = f -> is_prefix word ws0 f) H4) H1 H2) f0\n            | is_prefix_cons _ f0 x xs x0 x1 =>\n                (fun (f1 : nat -> word) (x2 : word) \n                   (xs0 : list word) (H1 : x2 = f1 (length xs0))\n                   (H2 : is_prefix word xs0 f1) (H3 : x2 :: xs0 = w :: ws0)\n                   (H4 : f1 = f) =>\n                 (fun H5 : x2 :: xs0 = w :: ws0 =>\n                  let H6 : xs0 = ws0 :=\n                    f_equal\n                      (fun e : list word =>\n                       match e with\n                       | nil => xs0\n                       | _ :: l0 => l0\n                       end) H5 in\n                  (let H7 : x2 = w :=\n                     f_equal\n                       (fun e : list word =>\n                        match e with\n                        | nil => x2\n                        | w0 :: _ => w0\n                        end) H5 in\n                   (fun H8 : x2 = w =>\n                    let H9 : x2 = w := H8 in\n                    eq_ind_r\n                      (fun w0 : word =>\n                       xs0 = ws0 ->\n                       f1 = f ->\n                       w0 = f1 (length xs0) ->\n                       is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                      (fun H10 : xs0 = ws0 =>\n                       let H11 : xs0 = ws0 := H10 in\n                       eq_ind_r\n                         (fun l0 : list word =>\n                          f1 = f ->\n                          w = f1 (length l0) ->\n                          is_prefix word l0 f1 -> is_prefix word ws0 f)\n                         (fun H12 : f1 = f =>\n                          let H13 : f1 = f := H12 in\n                          eq_ind_r\n                            (fun w0 : nat -> word =>\n                             w = w0 (length ws0) ->\n                             is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                            (fun (_ : w = f (length ws0))\n                               (H15 : is_prefix word ws0 f) => H15) H13) H11)\n                      H9) H7) H6) H3 H4 H1 H2) f0 x xs x0 x1\n            end in\n          H1 eq_refl eq_refl)))\n   (fun (ws0 : list word) (w : word) (_ : good ws0)\n      (H0 : is_prefix word ws0 f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word (w :: ws0) f) =>\n    let H2 : is_prefix word ws0 f :=\n      let H2 : w :: ws0 = w :: ws0 -> f = f -> is_prefix word ws0 f :=\n        match\n          H1 in (is_prefix _ l y)\n          return (l = w :: ws0 -> y = f -> is_prefix word ws0 f)\n        with\n        | is_prefix_nil _ f0 =>\n            (fun (f1 : nat -> word) (H2 : nil = w :: ws0) (H3 : f1 = f) =>\n             (fun H4 : nil = w :: ws0 =>\n              let H5 : False :=\n                eq_ind nil\n                  (fun e : list word =>\n                   match e with\n                   | nil => True\n                   | _ :: _ => False\n                   end) I (w :: ws0) H4 in\n              False_ind (f1 = f -> is_prefix word ws0 f) H5) H2 H3) f0\n        | is_prefix_cons _ f0 x xs x0 x1 =>\n            (fun (f1 : nat -> word) (x2 : word) (xs0 : list word)\n               (H2 : x2 = f1 (length xs0)) (H3 : is_prefix word xs0 f1)\n               (H4 : x2 :: xs0 = w :: ws0) (H5 : f1 = f) =>\n             (fun H6 : x2 :: xs0 = w :: ws0 =>\n              let H7 : xs0 = ws0 :=\n                f_equal\n                  (fun e : list word =>\n                   match e with\n                   | nil => xs0\n                   | _ :: l => l\n                   end) H6 in\n              (let H8 : x2 = w :=\n                 f_equal\n                   (fun e : list word =>\n                    match e with\n                    | nil => x2\n                    | w0 :: _ => w0\n                    end) H6 in\n               (fun H9 : x2 = w =>\n                let H10 : x2 = w := H9 in\n                eq_ind_r\n                  (fun w0 : word =>\n                   xs0 = ws0 ->\n                   f1 = f ->\n                   w0 = f1 (length xs0) ->\n                   is_prefix word xs0 f1 -> is_prefix word ws0 f)\n                  (fun H11 : xs0 = ws0 =>\n                   let H12 : xs0 = ws0 := H11 in\n                   eq_ind_r\n                     (fun l : list word =>\n                      f1 = f ->\n                      w = f1 (length l) ->\n                      is_prefix word l f1 -> is_prefix word ws0 f)\n                     (fun H13 : f1 = f =>\n                      let H14 : f1 = f := H13 in\n                      eq_ind_r\n                        (fun w0 : nat -> word =>\n                         w = w0 (length ws0) ->\n                         is_prefix word ws0 w0 -> is_prefix word ws0 f)\n                        (fun (_ : w = f (length ws0))\n                           (H16 : is_prefix word ws0 f) => H16) H14) H12) H10)\n                 H8) H7) H4 H5 H2 H3) f0 x xs x0 x1\n        end in\n      H2 eq_refl eq_refl in\n    H0 H2) ws H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "bar_idx", "text": "Theorem bar_idx :\n forall (f : nat -> word) (ws : list word),\n bar ws ->\n is_prefix word ws f -> {i : nat &  {j : nat | emb (f i) (f j) /\\ i < j}}.\nsimple induction 1.\napply good_idx.\nintros.\napply (H0 (f (length ws0))).\napply is_prefix_cons.\nreflexivity.\nassumption.\nDefined.\n", "definition": "\n forall (f : nat -> word) (ws : list word),\n bar ws ->\n is_prefix word ws f -> {i : nat &  {j : nat | emb (f i) (f j) /\\ i < j}}.", "proof": "\nsimple induction 1.\napply good_idx.\nintros.\napply (H0 (f (length ws0))).\napply is_prefix_cons.\nreflexivity.\nassumption.\n", "def_ranges": [241, 0, 244, 74], "proof_ranges": [245, 0, 252, 8], "proof_steps": [{"text": "simple induction 1.", "goal_before": ["forall (f : nat -> word) (ws : list word),\nbar ws ->\nis_prefix word ws f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["forall ws0 : list word,\ngood ws0 ->\nis_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": [], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   ?Goal ?Goal0 ws H)"]}, {"text": "apply good_idx.", "goal_before": ["forall ws0 : list word,\ngood ws0 ->\nis_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}", "forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   ?Goal ?Goal0 ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f) ?Goal ws H)"]}, {"text": "intros.", "goal_before": ["forall ws0 : list word,\n(forall w : word, bar (w :: ws0)) ->\n(forall w : word,\n is_prefix word (w :: ws0) f ->\n {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}) ->\nis_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f) ?Goal ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f)\n   (fun (ws0 : list word) (b : forall w : word, bar (w :: ws0))\n      (H0 : forall w : word,\n            is_prefix word (w :: ws0) f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word ws0 f) => ?Goal) ws H)"]}, {"text": "apply (H0 (f (length ws0))).", "goal_before": ["{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["is_prefix word (f (length ws0) :: ws0) f"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f)\n   (fun (ws0 : list word) (b : forall w : word, bar (w :: ws0))\n      (H0 : forall w : word,\n            is_prefix word (w :: ws0) f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word ws0 f) => ?Goal) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f)\n   (fun (ws0 : list word) (b : forall w : word, bar (w :: ws0))\n      (H0 : forall w : word,\n            is_prefix word (w :: ws0) f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word ws0 f) => H0 (f (length ws0)) ?Goal) ws H)"]}, {"text": "apply is_prefix_cons.", "goal_before": ["is_prefix word (f (length ws0) :: ws0) f"], "goal_after": ["f (length ws0) = f (length ws0)", "is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f)\n   (fun (ws0 : list word) (b : forall w : word, bar (w :: ws0))\n      (H0 : forall w : word,\n            is_prefix word (w :: ws0) f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word ws0 f) => H0 (f (length ws0)) ?Goal) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f)\n   (fun (ws0 : list word) (b : forall w : word, bar (w :: ws0))\n      (H0 : forall w : word,\n            is_prefix word (w :: ws0) f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word ws0 f) =>\n    H0 (f (length ws0))\n      (is_prefix_cons word f (f (length ws0)) ws0 ?Goal ?Goal0)) ws H)"]}, {"text": "reflexivity.", "goal_before": ["f (length ws0) = f (length ws0)", "is_prefix word ws0 f"], "goal_after": ["is_prefix word ws0 f"], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f)\n   (fun (ws0 : list word) (b : forall w : word, bar (w :: ws0))\n      (H0 : forall w : word,\n            is_prefix word (w :: ws0) f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word ws0 f) =>\n    H0 (f (length ws0))\n      (is_prefix_cons word f (f (length ws0)) ws0 ?Goal ?Goal0)) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f)\n   (fun (ws0 : list word) (b : forall w : word, bar (w :: ws0))\n      (H0 : forall w : word,\n            is_prefix word (w :: ws0) f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word ws0 f) =>\n    H0 (f (length ws0))\n      (is_prefix_cons word f (f (length ws0)) ws0 eq_refl ?Goal)) ws H)"]}, {"text": "assumption.", "goal_before": ["is_prefix word ws0 f"], "goal_after": [], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f)\n   (fun (ws0 : list word) (b : forall w : word, bar (w :: ws0))\n      (H0 : forall w : word,\n            is_prefix word (w :: ws0) f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word ws0 f) =>\n    H0 (f (length ws0))\n      (is_prefix_cons word f (f (length ws0)) ws0 eq_refl ?Goal)) ws H)"], "proof_term_after": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f)\n   (fun (ws0 : list word) (_ : forall w : word, bar (w :: ws0))\n      (H0 : forall w : word,\n            is_prefix word (w :: ws0) f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word ws0 f) =>\n    H0 (f (length ws0))\n      (is_prefix_cons word f (f (length ws0)) ws0 eq_refl H1)) ws H)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun (f : nat -> word) (ws : list word) (H : bar ws) =>\n bar_rec\n   (fun (ws0 : list word) (_ : bar ws0) =>\n    is_prefix word ws0 f -> {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n   (good_idx f)\n   (fun (ws0 : list word) (_ : forall w : word, bar (w :: ws0))\n      (H0 : forall w : word,\n            is_prefix word (w :: ws0) f ->\n            {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}})\n      (H1 : is_prefix word ws0 f) =>\n    H0 (f (length ws0))\n      (is_prefix_cons word f (f (length ws0)) ws0 eq_refl H1)) ws H)"], "proof_term_after": []}], "ends_qed": false}, {"path": "/home/jizej/proverbot9001/coq-projects/higman-cf/Higman2.v", "name": "higman_idx", "text": "Theorem higman_idx :\n forall f : nat -> word, {i : nat &  {j : nat | emb (f i) (f j) /\\ i < j}}.\nintro.\napply (bar_idx f nil).\napply higman.\napply is_prefix_nil.\nDefined.\n", "definition": "\n forall f : nat -> word, {i : nat &  {j : nat | emb (f i) (f j) /\\ i < j}}.", "proof": "\nintro.\napply (bar_idx f nil).\napply higman.\napply is_prefix_nil.\n", "def_ranges": [254, 0, 255, 75], "proof_ranges": [256, 0, 260, 8], "proof_steps": [{"text": "intro.", "goal_before": ["forall f : nat -> word, {i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "proof_term_before": [], "proof_term_after": ["(fun f : nat -> word => ?Goal)"]}, {"text": "apply (bar_idx f nil).", "goal_before": ["{i : nat & {j : nat | emb (f i) (f j) /\\ i < j}}"], "goal_after": ["bar nil", "is_prefix word nil f"], "proof_term_before": ["(fun f : nat -> word => ?Goal)"], "proof_term_after": ["(fun f : nat -> word => bar_idx f nil ?Goal ?Goal0)"]}, {"text": "apply higman.", "goal_before": ["bar nil", "is_prefix word nil f"], "goal_after": ["is_prefix word nil f"], "proof_term_before": ["(fun f : nat -> word => bar_idx f nil ?Goal ?Goal0)"], "proof_term_after": ["(fun f : nat -> word => bar_idx f nil higman ?Goal)"]}, {"text": "apply is_prefix_nil.", "goal_before": ["is_prefix word nil f"], "goal_after": [], "proof_term_before": ["(fun f : nat -> word => bar_idx f nil higman ?Goal)"], "proof_term_after": ["(fun f : nat -> word => bar_idx f nil higman (is_prefix_nil word f))"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun f : nat -> word => bar_idx f nil higman (is_prefix_nil word f))"], "proof_term_after": []}], "ends_qed": false}]