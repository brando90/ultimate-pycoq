{"subseq_inf_often": {"text": "Theorem subseq_inf_often :\n  forall P si s, subseqs si s -> always1 P si -> inf_often P s.\nProof using.\nintros P. red. cofix sio.\nintros si s su a.\nconstructor.\n- apply subseqs_eventually with si; assumption.\n- genclear a. case su. \n  clear su si s; intros (s0, si) s sf su a; simpl in * |- * . \n  apply (sio si); clear sio.\n  * induction sf; simpl.\n    trivial. \n    apply subseqs_tl. assumption (* induction hyp *). \n  * change (always1 P (tl (Cons s0 si))). case a; simpl; trivial. \nQed.\n", "definition": "\n  forall P si s, subseqs si s -> always1 P si -> inf_often P s.", "proof": "\nProof using.\nintros P. red. cofix sio.\nintros si s su a.\nconstructor.\n- apply subseqs_eventually with si; assumption.\n- genclear a. case su. \n  clear su si s; intros (s0, si) s sf su a; simpl in * |- * . \n  apply (sio si); clear sio.\n  * induction sf; simpl.\n    trivial. \n    apply subseqs_tl. assumption (* induction hyp *). \n  * change (always1 P (tl (Cons s0 si))). case a; simpl; trivial. \n", "def_ranges": [66, 0, 67, 63], "proof_ranges": [68, 0, 80, 4], "proof_steps": [{"text": "Proof using.", "goal_before": ["forall (P : infseq T -> Prop) (si : infseq (infseq T)) (s : infseq T),\nsubseqs si s -> always1 P si -> inf_often P s"], "goal_after": ["forall (P : infseq T -> Prop) (si : infseq (infseq T)) (s : infseq T),\nsubseqs si s -> always1 P si -> inf_often P s"], "proof_term_before": [], "proof_term_after": ["?Goal"]}, {"text": "intros P.", "goal_before": ["forall (P : infseq T -> Prop) (si : infseq (infseq T)) (s : infseq T),\nsubseqs si s -> always1 P si -> inf_often P s"], "goal_after": ["forall (si : infseq (infseq T)) (s : infseq T),\nsubseqs si s -> always1 P si -> inf_often P s"], "proof_term_before": ["?Goal"], "proof_term_after": ["(fun P : infseq T -> Prop => ?Goal)"]}, {"text": "red.", "goal_before": ["forall (si : infseq (infseq T)) (s : infseq T),\nsubseqs si s -> always1 P si -> inf_often P s"], "goal_after": ["forall (si : infseq (infseq T)) (s : infseq T),\nsubseqs si s -> always1 P si -> always (eventually P) s"], "proof_term_before": ["(fun P : infseq T -> Prop => ?Goal)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n ?Goal\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "cofix sio.", "goal_before": ["forall (si : infseq (infseq T)) (s : infseq T),\nsubseqs si s -> always1 P si -> always (eventually P) s"], "goal_after": ["forall (si : infseq (infseq T)) (s : infseq T),\nsubseqs si s -> always1 P si -> always (eventually P) s"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n ?Goal\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio :\n      forall (si : infseq (infseq T)) (s : infseq T),\n      subseqs si s -> always1 P si -> always (eventually P) s :=\n    ?Goal)\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "intros si s su a.", "goal_before": ["forall (si : infseq (infseq T)) (s : infseq T),\nsubseqs si s -> always1 P si -> always (eventually P) s"], "goal_after": ["always (eventually P) s"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio :\n      forall (si : infseq (infseq T)) (s : infseq T),\n      subseqs si s -> always1 P si -> always (eventually P) s :=\n    ?Goal)\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    ?Goal)\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "constructor.", "goal_before": ["always (eventually P) s"], "goal_after": ["eventually P s", "always (eventually P) (tl s)"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    ?Goal)\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s ?Goal ?Goal0)\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "apply subseqs_eventually with si; assumption.", "goal_before": ["eventually P s", "always (eventually P) (tl s)"], "goal_after": ["always (eventually P) (tl s)"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s ?Goal ?Goal0)\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a) ?Goal)\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "genclear a.", "goal_before": ["always (eventually P) (tl s)"], "goal_after": ["always1 P si -> always (eventually P) (tl s)"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a) ?Goal)\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a) (?Goal a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "case su.", "goal_before": ["always1 P si -> always (eventually P) (tl s)"], "goal_after": ["forall (si0 : infseq (infseq T)) (s0 : infseq T),\nsuff (hd si0) s0 ->\nsubseqs (tl si0) (tl (hd si0)) ->\nalways1 P si0 -> always (eventually P) (tl s0)"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a) (?Goal a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 => ?Goal si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "clear su si s; intros (s0, si) s sf su a; simpl in * |- * .", "goal_before": ["forall (si0 : infseq (infseq T)) (s0 : infseq T),\nsuff (hd si0) s0 ->\nsubseqs (tl si0) (tl (hd si0)) ->\nalways1 P si0 -> always (eventually P) (tl s0)"], "goal_after": ["always (eventually P) (tl s)"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 => ?Goal si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "apply (sio si); clear sio.", "goal_before": ["always (eventually P) (tl s)"], "goal_after": ["subseqs si (tl s)", "always1 P si"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                   ?Goal0@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "induction sf; simpl.", "goal_before": ["subseqs si (tl s)", "always1 P si"], "goal_after": ["subseqs si (tl s0)", "subseqs si s1", "always1 P si"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                   ?Goal0@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (?Goal0@{s0:=s1; si:=si2; su:=su0; a:=a0}\n                       :\n                       subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (sf0 : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       ?Goal1@{s0:=s1; si:=si2; x:=x1; s1:=s3; sf:=sf0;\n                               su:=su0; a:=a0}\n                       :\n                       subseqs si2 (tl (Cons x1 s3))) s2 sf)\n                   ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "trivial.", "goal_before": ["subseqs si (tl s0)", "subseqs si s1", "always1 P si"], "goal_after": ["subseqs si s1", "always1 P si"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (?Goal0@{s0:=s1; si:=si2; su:=su0; a:=a0}\n                       :\n                       subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (sf0 : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       ?Goal1@{s0:=s1; si:=si2; x:=x1; s1:=s3; sf:=sf0;\n                               su:=su0; a:=a0}\n                       :\n                       subseqs si2 (tl (Cons x1 s3))) s2 sf)\n                   ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (su0 : subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (sf0 : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       ?Goal0@{s0:=s1; si:=si2; x:=x1; s1:=s3; sf:=sf0;\n                               su:=su0; a:=a0}\n                       :\n                       subseqs si2 (tl (Cons x1 s3))) s2 sf)\n                   ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "apply subseqs_tl.", "goal_before": ["subseqs si s1", "always1 P si"], "goal_after": ["subseqs si (tl s1)", "always1 P si"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (su0 : subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (sf0 : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       ?Goal0@{s0:=s1; si:=si2; x:=x1; s1:=s3; sf:=sf0;\n                               su:=su0; a:=a0}\n                       :\n                       subseqs si2 (tl (Cons x1 s3))) s2 sf)\n                   ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (su0 : subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (sf0 : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       subseqs_tl si2 s3\n                         ?Goal0@{s0:=s1; si:=si2; x:=x1; s1:=s3; sf:=sf0;\n                                 su:=su0; a:=a0}\n                       :\n                       subseqs si2 (tl (Cons x1 s3))) s2 sf)\n                   ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "assumption.", "goal_before": ["subseqs si (tl s1)", "always1 P si"], "goal_after": ["always1 P si"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (su0 : subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (sf0 : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       subseqs_tl si2 s3\n                         ?Goal0@{s0:=s1; si:=si2; x:=x1; s1:=s3; sf:=sf0;\n                                 su:=su0; a:=a0}\n                       :\n                       subseqs si2 (tl (Cons x1 s3))) s2 sf)\n                   ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (su0 : subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (_ : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       subseqs_tl si2 s3 IHsf : subseqs si2 (tl (Cons x1 s3)))\n                      s2 sf) ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "change (always1 P (tl (Cons s0 si))).", "goal_before": ["always1 P si"], "goal_after": ["always1 P (tl (Cons s0 si))"], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (su0 : subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (_ : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       subseqs_tl si2 s3 IHsf : subseqs si2 (tl (Cons x1 s3)))\n                      s2 sf) ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (su0 : subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (_ : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       subseqs_tl si2 s3 IHsf : subseqs si2 (tl (Cons x1 s3)))\n                      s2 sf) ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "case a; simpl; trivial.", "goal_before": ["always1 P (tl (Cons s0 si))"], "goal_after": [], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (su0 : subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (_ : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       subseqs_tl si2 s3 IHsf : subseqs si2 (tl (Cons x1 s3)))\n                      s2 sf) ?Goal@{s0:=s1; si:=si2; s:=s2; su:=su0; a:=a0}\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (su0 : subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (_ : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       subseqs_tl si2 s3 IHsf : subseqs si2 (tl (Cons x1 s3)))\n                      s2 sf)\n                   match a0 in (always1 _ i0) return (always1 P (tl i0)) with\n                   | Always1 _ _ x1 s3 x2 x3 =>\n                       ((fun (x4 : infseq T) (s4 : infseq (infseq T))\n                           (_ : P x4) (H0 : always1 P s4) => H0)\n                        :\n                        forall (x4 : infseq T) (s4 : infseq (infseq T)),\n                        P x4 -> always1 P s4 -> always1 P (tl (Cons x4 s4)))\n                         x1 s3 x2 x3\n                   end\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun P : infseq T -> Prop =>\n (cofix sio\n    (si : infseq (infseq T)) (s : infseq T) (su : subseqs si s)\n    (a : always1 P si) : always (eventually P) s :=\n    Always T (eventually P) s (subseqs_eventually P si s su a)\n      (match\n         su in (subseqs i i0)\n         return (always1 P i -> always (eventually P) (tl i0))\n       with\n       | Subseqs si0 s0 x x0 =>\n           (fun si1 : infseq (infseq T) =>\n            match\n              si1 as i\n              return\n                (forall s1 : infseq T,\n                 suff (hd i) s1 ->\n                 subseqs (tl i) (tl (hd i)) ->\n                 always1 P i -> always (eventually P) (tl s1))\n            with\n            | Cons t i =>\n                (fun (s1 : infseq T) (si2 : infseq (infseq T))\n                   (s2 : infseq T) (sf : suff (hd (Cons s1 si2)) s2)\n                   (su0 : subseqs (tl (Cons s1 si2)) (tl (hd (Cons s1 si2))))\n                   (a0 : always1 P (Cons s1 si2)) =>\n                 sio si2 (tl s2)\n                   (suff_ind s1 (fun s3 : infseq T => subseqs si2 (tl s3))\n                      (su0 : subseqs si2 (tl s1))\n                      (fun (x1 : T) (s3 : infseq T) \n                         (_ : suff s1 s3) (IHsf : subseqs si2 (tl s3)) =>\n                       subseqs_tl si2 s3 IHsf : subseqs si2 (tl (Cons x1 s3)))\n                      s2 sf)\n                   match a0 in (always1 _ i0) return (always1 P (tl i0)) with\n                   | Always1 _ _ x1 s3 x2 x3 =>\n                       ((fun (x4 : infseq T) (s4 : infseq (infseq T))\n                           (_ : P x4) (H0 : always1 P s4) => H0)\n                        :\n                        forall (x4 : infseq T) (s4 : infseq (infseq T)),\n                        P x4 -> always1 P s4 -> always1 P (tl (Cons x4 s4)))\n                         x1 s3 x2 x3\n                   end\n                 :\n                 always (eventually P) (tl s2)) t i\n            end) si0 s0 x x0\n       end a))\n :\n forall (si : infseq (infseq T)) (s : infseq T),\n subseqs si s -> always1 P si -> inf_often P s)"], "proof_term_after": []}]}, "eventually_suff": {"text": "Theorem eventually_suff :\n   forall P s', eventually P s' -> ex_suff P s'.\nProof using.\nintros P s ev. induction ev.   \n- exists s; [ constructor | assumption]. \n- destruct IHev. exists s0. \n  * constructor; assumption.\n  * assumption.\nQed.\n", "definition": "\n   forall P s', eventually P s' -> ex_suff P s'.", "proof": "\nProof using.\nintros P s ev. induction ev.   \n- exists s; [ constructor | assumption]. \n- destruct IHev. exists s0. \n  * constructor; assumption.\n  * assumption.\n", "def_ranges": [87, 0, 88, 48], "proof_ranges": [89, 0, 95, 4], "proof_steps": [{"text": "Proof using.", "goal_before": ["forall (P : infseq T -> Prop) (s' : infseq T),\neventually P s' -> ex_suff P s'"], "goal_after": ["forall (P : infseq T -> Prop) (s' : infseq T),\neventually P s' -> ex_suff P s'"], "proof_term_before": [], "proof_term_after": ["?Goal"]}, {"text": "intros P s ev.", "goal_before": ["forall (P : infseq T -> Prop) (s' : infseq T),\neventually P s' -> ex_suff P s'"], "goal_after": ["ex_suff P s"], "proof_term_before": ["?Goal"], "proof_term_after": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) => ?Goal)"]}, {"text": "induction ev.", "goal_before": ["ex_suff P s"], "goal_after": ["ex_suff P s", "ex_suff P (Cons x s)"], "proof_term_before": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) => ?Goal)"], "proof_term_after": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => ?Goal@{s:=s0})\n   (fun (x : T) (s0 : infseq T) (ev0 : eventually P s0) (IHev : ex_suff P s0)\n    => ?Goal0@{s:=s0; ev:=ev0}) s ev)"]}, {"text": "exists s; [ constructor | assumption].", "goal_before": ["ex_suff P s", "ex_suff P (Cons x s)"], "goal_after": ["ex_suff P (Cons x s)"], "proof_term_before": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => ?Goal@{s:=s0})\n   (fun (x : T) (s0 : infseq T) (ev0 : eventually P s0) (IHev : ex_suff P s0)\n    => ?Goal0@{s:=s0; ev:=ev0}) s ev)"], "proof_term_after": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => Esp P s0 s0 (sp_eq s0) H)\n   (fun (x : T) (s0 : infseq T) (ev0 : eventually P s0) (IHev : ex_suff P s0)\n    => ?Goal@{s:=s0; ev:=ev0}) s ev)"]}, {"text": "destruct IHev.", "goal_before": ["ex_suff P (Cons x s)"], "goal_after": ["ex_suff P (Cons x s)"], "proof_term_before": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => Esp P s0 s0 (sp_eq s0) H)\n   (fun (x : T) (s0 : infseq T) (ev0 : eventually P s0) (IHev : ex_suff P s0)\n    => ?Goal@{s:=s0; ev:=ev0}) s ev)"], "proof_term_after": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => Esp P s0 s0 (sp_eq s0) H)\n   (fun (x : T) (s0 : infseq T) (ev0 : eventually P s0) (IHev : ex_suff P s0)\n    =>\n    match IHev with\n    | Esp _ _ s1 x0 x1 =>\n        (fun (s2 : infseq T) (H : suff s2 s0) (H0 : P s2) =>\n         ?Goal@{s:=s0; ev:=ev0; s0:=s2}) s1 x0 x1\n    end) s ev)"]}, {"text": "exists s0.", "goal_before": ["ex_suff P (Cons x s)"], "goal_after": ["suff s0 (Cons x s)", "P s0"], "proof_term_before": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => Esp P s0 s0 (sp_eq s0) H)\n   (fun (x : T) (s0 : infseq T) (ev0 : eventually P s0) (IHev : ex_suff P s0)\n    =>\n    match IHev with\n    | Esp _ _ s1 x0 x1 =>\n        (fun (s2 : infseq T) (H : suff s2 s0) (H0 : P s2) =>\n         ?Goal@{s:=s0; ev:=ev0; s0:=s2}) s1 x0 x1\n    end) s ev)"], "proof_term_after": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => Esp P s0 s0 (sp_eq s0) H)\n   (fun (x : T) (s0 : infseq T) (ev0 : eventually P s0) (IHev : ex_suff P s0)\n    =>\n    match IHev with\n    | Esp _ _ s1 x0 x1 =>\n        (fun (s2 : infseq T) (H : suff s2 s0) (H0 : P s2) =>\n         Esp P (Cons x s0) s2 ?Goal@{s:=s0; ev:=ev0; s0:=s2}\n           ?Goal0@{s:=s0; ev:=ev0; s0:=s2}) s1 x0 x1\n    end) s ev)"]}, {"text": "constructor; assumption.", "goal_before": ["suff s0 (Cons x s)", "P s0"], "goal_after": ["P s0"], "proof_term_before": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => Esp P s0 s0 (sp_eq s0) H)\n   (fun (x : T) (s0 : infseq T) (ev0 : eventually P s0) (IHev : ex_suff P s0)\n    =>\n    match IHev with\n    | Esp _ _ s1 x0 x1 =>\n        (fun (s2 : infseq T) (H : suff s2 s0) (H0 : P s2) =>\n         Esp P (Cons x s0) s2 ?Goal@{s:=s0; ev:=ev0; s0:=s2}\n           ?Goal0@{s:=s0; ev:=ev0; s0:=s2}) s1 x0 x1\n    end) s ev)"], "proof_term_after": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => Esp P s0 s0 (sp_eq s0) H)\n   (fun (x : T) (s0 : infseq T) (ev0 : eventually P s0) (IHev : ex_suff P s0)\n    =>\n    match IHev with\n    | Esp _ _ s1 x0 x1 =>\n        (fun (s2 : infseq T) (H : suff s2 s0) (H0 : P s2) =>\n         Esp P (Cons x s0) s2 (sp_next s2 x s0 H)\n           ?Goal@{s:=s0; ev:=ev0; s0:=s2}) s1 x0 x1\n    end) s ev)"]}, {"text": "assumption.", "goal_before": ["P s0"], "goal_after": [], "proof_term_before": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => Esp P s0 s0 (sp_eq s0) H)\n   (fun (x : T) (s0 : infseq T) (ev0 : eventually P s0) (IHev : ex_suff P s0)\n    =>\n    match IHev with\n    | Esp _ _ s1 x0 x1 =>\n        (fun (s2 : infseq T) (H : suff s2 s0) (H0 : P s2) =>\n         Esp P (Cons x s0) s2 (sp_next s2 x s0 H)\n           ?Goal@{s:=s0; ev:=ev0; s0:=s2}) s1 x0 x1\n    end) s ev)"], "proof_term_after": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => Esp P s0 s0 (sp_eq s0) H)\n   (fun (x : T) (s0 : infseq T) (_ : eventually P s0) (IHev : ex_suff P s0)\n    =>\n    match IHev with\n    | Esp _ _ s1 x0 x1 =>\n        (fun (s2 : infseq T) (H : suff s2 s0) (H0 : P s2) =>\n         Esp P (Cons x s0) s2 (sp_next s2 x s0 H) H0) s1 x0 x1\n    end) s ev)"]}, {"text": "Qed.", "goal_before": [], "goal_after": [], "proof_term_before": ["(fun (P : infseq T -> Prop) (s : infseq T) (ev : eventually P s) =>\n eventually_ind T P (fun s0 : infseq T => ex_suff P s0)\n   (fun (s0 : infseq T) (H : P s0) => Esp P s0 s0 (sp_eq s0) H)\n   (fun (x : T) (s0 : infseq T) (_ : eventually P s0) (IHev : ex_suff P s0)\n    =>\n    match IHev with\n    | Esp _ _ s1 x0 x1 =>\n        (fun (s2 : infseq T) (H : suff s2 s0) (H0 : P s2) =>\n         Esp P (Cons x s0) s2 (sp_next s2 x s0 H) H0) s1 x0 x1\n    end) s ev)"], "proof_term_after": []}]}}